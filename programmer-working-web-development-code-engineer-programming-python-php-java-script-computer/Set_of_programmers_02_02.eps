%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 25.0
%%For: Tom
%%CreationDate: 4/24/2021
%%BoundingBox: 0 0 387 360
%%HiResBoundingBox: 0 0 386.8246 359.5381
%%CropBox: 0 0 386.8246 359.5381
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 25.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 25.0.0 x60 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164519, 2020/08/25-17:54:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2021-04-24T20:01:56+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-04-24T20:01:56+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-04-24T20:01:56+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator 25.0 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>240</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA8AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXEgCp2GKrPVr9hS3v0GGldxlP2mp7KP4nFXGOMfaJPzJxtVhNqP5f147q1ytPl8qjHdWw0&#xA;f7MpHzNR+OKrw0g7Bx4r1xVtZFbYHfwOxwKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KrDISaIOR7nsMKuEYrVzyPv0+7G1WvcRpsPiPgMaVQe5kboeI9sNKpEk7k1wq7F&#xA;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&#xA;lReRV2KuxV2KuxV2KuxV2KuxV2KuxV//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:722dd2ab-63ad-8347-96f6-ff70a46af47a</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:722dd2ab-63ad-8347-96f6-ff70a46af47a</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:75e9ec93-e308-894f-a1b7-b6c2f91b043a</stRef:instanceID>
            <stRef:documentID>xmp.did:75e9ec93-e308-894f-a1b7-b6c2f91b043a</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0d7bd0ce-43e5-4e30-9115-e50c86d0098e</stEvt:instanceID>
                  <stEvt:when>2021-03-09T21:20:36+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:75e9ec93-e308-894f-a1b7-b6c2f91b043a</stEvt:instanceID>
                  <stEvt:when>2021-04-24T19:57:56+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:722dd2ab-63ad-8347-96f6-ff70a46af47a</stEvt:instanceID>
                  <stEvt:when>2021-04-24T20:01:56+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>400.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -359.538 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 359.538 li
386.825 359.538 li
386.825 0 li
cp
clp
178.469 1.76999 mo
157.605 1.76999 133.93 8.75198 106.51 27.6699 cv
54.6662 63.4385 24.1828 94.5489 10.5774 125.576 cv
-1.26592 152.583 -1.25177 180.583 10.6242 219.202 cv
13.6564 229.061 16.2858 238.078 18.8293 246.795 cv
29.6784 283.994 36.8459 308.567 53.4098 321.499 cv
69.8673 334.35 96.3679 335.74 144.88 326.293 cv
185.65 318.355 223.51 320.431 256.913 322.264 cv
284.198 323.759 307.764 325.052 324.548 319.886 cv
342.682 314.304 351.481 301.775 353.077 279.26 cv
356.379 232.706 363.74 205.753 369.655 184.098 cv
375.399 163.066 379.549 147.87 376.149 125.896 cv
371.057 92.9878 341.527 78.6079 310.264 63.3833 cv
299.98 58.375 289.345 53.1968 279.32 47.2363 cv
273.279 43.6446 267.111 39.4458 260.578 35.0005 cv
237.874 19.5473 211.752 1.76999 178.469 1.76999 cv
93.427 334.163 mo
91.1364 334.163 88.9377 334.106 86.818 333.992 cv
72.0397 333.198 61.0915 329.655 52.3639 322.839 cv
35.3679 309.569 28.1393 284.786 17.197 247.272 cv
14.6559 238.559 12.028 229.549 8.99964 219.701 cv
-3.00663 180.66 -3.00034 152.306 9.02067 124.893 cv
22.7585 93.5644 53.4298 62.2265 105.546 26.2705 cv
106.027 26.9702 li
105.546 26.2705 li
177.664 -23.4868 224.168 8.16313 261.535 33.5952 cv
268.044 38.0259 274.193 42.2105 280.189 45.7754 cv
290.153 51.6993 300.755 56.8623 311.008 61.855 cv
342.682 77.2803 372.6 91.8491 377.828 125.636 cv
381.284 147.968 377.094 163.311 371.294 184.545 cv
365.4 206.13 358.063 232.992 354.773 279.381 cv
351.243 329.138 311.636 326.965 256.82 323.96 cv
223.517 322.134 185.768 320.064 145.204 327.962 cv
123.671 332.155 106.98 334.163 93.427 334.163 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
.94902 .945098 .968627 rgb
f
114.618 35.3159 mo
7.38783 109.297 -2.68931 159.211 18.4026 227.797 cv
47.8664 323.607 44.2902 356.763 153.633 335.473 cv
193.032 327.802 230.416 329.546 262.389 331.29 cv
319.24 334.391 358.982 337.491 362.516 287.666 cv
369.117 194.586 392.426 178.354 385.579 134.112 cv
378.733 89.8701 328.934 78.9834 288.345 54.8516 cv
247.756 30.7193 198.731 -22.7158 114.618 35.3159 cv
f
357.044 176.234 mo
360.269 176.375 362.885 173.648 362.616 170.432 cv
359.768 136.265 358.95 114.644 363.132 79.3144 cv
307.385 82.8907 274.743 83.939 217.718 79.3144 cv
220.186 113.416 220.878 135.601 218.204 170.457 cv
217.684 177.244 221.059 176.264 248.578 175.284 cv
268.881 174.561 302.326 173.838 357.044 176.234 cv
1 1 1 rgb
f
287.957 174.024 mo
306.047 174.024 328.725 174.427 357.069 175.667 cv
358.439 175.732 359.776 175.193 360.729 174.202 cv
361.684 173.208 362.166 171.851 362.052 170.479 cv
359.133 135.47 358.499 113.989 362.489 79.9233 cv
307.896 83.4185 275.613 84.5484 218.33 79.9327 cv
220.753 113.579 221.428 135.843 218.769 170.5 cv
218.625 172.379 218.813 173.363 219.437 174.011 cv
221.15 175.789 226.738 175.568 240.24 175.034 cv
250.59 174.626 265.844 174.024 287.957 174.024 cv
357.277 176.805 mo
357.019 176.799 li
294.074 174.043 259.083 175.424 240.285 176.167 cv
226.022 176.73 220.686 176.94 218.62 174.797 cv
217.548 173.685 217.516 172.033 217.639 170.414 cv
220.31 135.602 219.611 113.314 217.153 79.3555 cv
217.105 78.6963 li
217.763 78.75 li
275.619 83.4404 307.938 82.2881 363.095 78.7491 cv
363.775 78.7056 li
363.695 79.3809 li
359.627 113.741 360.249 135.225 363.181 170.384 cv
363.322 172.081 362.727 173.759 361.546 174.987 cv
360.427 176.151 358.883 176.805 357.277 176.805 cv
.933333 .894118 .85098 rgb
f
357.538 73.8823 mo
360.481 73.7534 363.132 76.0474 363.132 79.3145 cv
306.534 82.7451 275.007 84.0855 217.718 79.3145 cv
217.718 68.1729 222.108 79.8316 357.538 73.8823 cv
cp
.266667 .258824 .266667 rgb
f
218.288 78.7935 mo
276.248 83.5952 307.773 82.0996 362.539 78.7827 cv
362.421 77.6196 361.916 76.5654 361.088 75.7725 cv
360.149 74.874 358.864 74.3916 357.564 74.4482 cv
288.844 77.4678 254.497 75.9819 236.045 75.1836 cv
225.033 74.708 220.477 74.5107 219.042 75.8843 cv
218.466 76.4356 218.314 77.3179 218.288 78.7935 cv
cp
285.629 82.9917 mo
265.373 82.9922 244.317 82.0982 217.67 79.8789 cv
217.151 79.8359 li
217.151 79.3145 li
217.151 77.5703 217.235 76.0464 218.258 75.0659 cv
220.041 73.3574 224.084 73.5322 236.094 74.0518 cv
254.529 74.8491 288.843 76.333 357.514 73.3164 cv
359.119 73.2441 360.709 73.8423 361.871 74.9541 cv
363.049 76.082 363.698 77.6304 363.698 79.3145 cv
363.698 79.8477 li
363.166 79.8799 li
333.01 81.708 309.896 82.9917 285.629 82.9917 cv
cp
f
355.168 78.709 mo
357.187 78.5713 357.929 78.6885 357.879 77.9541 cv
357.782 76.5381 357.884 75.7471 357.161 75.7964 cv
355.144 75.9341 354.402 75.8174 354.451 76.5513 cv
354.548 77.9678 354.446 78.7583 355.168 78.709 cv
cp
.745098 .752941 .760784 rgb
f
355.253 78.4077 mo
355.048 78.3203 li
354.94 78.2075 354.945 78.0278 355.057 77.9199 cv
356.882 76.1763 li
356.994 76.0684 357.175 76.0728 357.282 76.1856 cv
357.391 76.2983 357.386 76.478 357.274 76.5855 cv
355.448 78.3291 li
355.253 78.4077 li
cp
1 1 1 rgb
f
357.187 78.2759 mo
357.021 78.2222 li
354.978 76.7417 li
354.851 76.6504 354.821 76.4732 354.913 76.3467 cv
355.005 76.2192 355.185 76.1919 355.309 76.2832 cv
357.353 77.7632 li
357.48 77.855 357.509 78.0322 357.416 78.1592 cv
357.187 78.2759 li
cp
f
238.442 96.5179 mo
236.956 96.5179 235.788 96.504 234.868 96.4644 cv
234.868 90.561 li
242.177 90.5514 247.123 90.4808 250.466 90.4808 cv
257.065 90.4808 257.421 90.756 257.421 92.3208 cv
257.421 94.1401 257.777 96.4365 255.662 96.4365 cv
247.452 96.4365 242.025 96.5179 238.442 96.5179 cv
.909804 .690196 .568627 rgb
f
278.701 96.5515 mo
266.06 96.5515 266.129 96.1693 266.129 94.0102 cv
266.129 92.3511 266.382 90.562 268.555 90.562 cv
313.061 90.562 li
316.333 90.562 316.412 96.4365 313.061 96.4365 cv
296.383 96.4365 285.631 96.5515 278.701 96.5515 cv
f
330.379 96.5179 mo
323.785 96.5179 323.429 96.2426 323.429 94.6783 cv
323.429 92.8584 323.072 90.562 325.187 90.562 cv
333.393 90.562 338.819 90.4808 342.403 90.4808 cv
349.002 90.4808 349.359 90.756 349.359 92.3208 cv
349.359 94.1401 349.714 96.4365 347.6 96.4365 cv
339.389 96.4365 333.962 96.5179 330.379 96.5179 cv
f
313.061 104.751 mo
268.555 104.751 li
265.282 104.751 265.203 98.8764 268.555 98.8764 cv
313.061 98.8764 li
316.333 98.8764 316.412 104.751 313.061 104.751 cv
f
238.447 113.147 mo
236.959 113.147 235.789 113.133 234.868 113.094 cv
234.868 107.19 li
242.181 107.181 247.128 107.11 250.471 107.11 cv
257.064 107.11 257.421 107.385 257.421 108.95 cv
257.421 111.307 li
257.421 112.278 256.634 113.066 255.662 113.066 cv
247.456 113.066 242.03 113.147 238.447 113.147 cv
f
313.061 113.066 mo
268.555 113.066 li
265.282 113.066 265.203 107.191 268.555 107.191 cv
285.233 107.191 295.986 107.076 302.917 107.076 cv
315.557 107.076 315.487 107.459 315.487 109.618 cv
315.487 111.277 315.235 113.066 313.061 113.066 cv
f
330.384 113.147 mo
323.785 113.147 323.429 112.872 323.429 111.307 cv
323.429 109.488 323.072 107.191 325.187 107.191 cv
333.398 107.191 338.825 107.11 342.408 107.11 cv
349.002 107.11 349.359 107.385 349.359 108.95 cv
349.359 110.77 349.714 113.066 347.6 113.066 cv
339.393 113.066 333.967 113.147 330.384 113.147 cv
f
238.445 121.462 mo
236.958 121.462 235.789 121.448 234.868 121.408 cv
234.868 115.506 li
255.662 115.506 li
256.634 115.506 257.421 116.293 257.421 117.265 cv
257.421 119.622 li
257.421 120.593 256.634 121.38 255.662 121.38 cv
247.454 121.38 242.029 121.462 238.445 121.462 cv
f
330.382 121.462 mo
323.785 121.462 323.429 121.186 323.429 119.622 cv
323.429 117.802 323.072 115.506 325.187 115.506 cv
333.393 115.506 338.819 115.425 342.403 115.425 cv
349.002 115.425 349.359 115.7 349.359 117.265 cv
349.359 119.084 349.714 121.38 347.6 121.38 cv
339.392 121.38 333.966 121.462 330.382 121.462 cv
f
255.662 129.695 mo
234.868 129.695 li
234.868 123.82 li
255.662 123.82 li
256.634 123.82 257.421 124.608 257.421 125.579 cv
257.421 127.937 li
257.421 128.908 256.634 129.695 255.662 129.695 cv
f
313.061 129.695 mo
268.555 129.695 li
265.282 129.695 265.203 123.82 268.555 123.82 cv
313.061 123.82 li
315.852 123.82 315.545 127.323 315.493 127.323 cv
315.489 127.323 315.487 127.306 315.487 127.269 cv
315.487 128.609 314.401 129.695 313.061 129.695 cv
f
330.379 129.776 mo
325.408 129.776 323.982 129.62 323.581 128.872 cv
323.581 125.811 li
323.424 125.885 li
323.499 124.744 323.846 123.82 325.187 123.82 cv
333.393 123.82 338.819 123.739 342.403 123.739 cv
349.002 123.739 349.359 124.014 349.359 125.579 cv
349.359 127.398 349.714 129.695 347.6 129.695 cv
339.389 129.695 333.962 129.776 330.379 129.776 cv
f
257.421 134.832 mo
252.829 134.58 248.417 134.223 244.29 133.81 cv
241.058 133.487 237.906 133.122 234.868 132.731 cv
234.868 132.134 li
242.181 132.125 247.128 132.054 250.471 132.054 cv
257.064 132.054 257.421 132.329 257.421 133.894 cv
257.421 134.832 li
f
271.08 135.218 mo
269.4 135.218 267.729 135.199 266.073 135.164 cv
266.027 133.665 266.844 132.135 268.555 132.135 cv
304.403 132.135 li
293.738 134.397 282.202 135.218 271.08 135.218 cv
f
347.6 146.324 mo
328.695 146.324 li
329.096 144.368 329.49 142.413 329.88 140.45 cv
347.6 140.45 li
348.57 140.45 349.359 141.237 349.359 142.208 cv
349.359 144.565 li
349.359 145.537 348.57 146.324 347.6 146.324 cv
328.395 146.324 mo
325.187 146.324 li
324.471 146.324 323.856 145.896 323.581 145.283 cv
323.581 141.491 li
323.856 140.877 324.471 140.45 325.187 140.45 cv
329.742 140.45 li
329.402 141.931 328.947 143.921 328.395 146.324 cv
f
347.6 162.953 mo
325.187 162.953 li
325.171 162.953 325.155 162.953 325.139 162.952 cv
325.572 161.006 326.003 159.046 326.429 157.079 cv
347.6 157.079 li
348.57 157.079 349.359 157.866 349.359 158.837 cv
349.359 161.195 li
349.359 162.166 348.57 162.953 347.6 162.953 cv
324.54 162.83 mo
324.113 162.661 323.768 162.33 323.581 161.912 cv
323.581 158.12 li
323.856 157.506 324.471 157.079 325.187 157.079 cv
325.898 157.079 li
325.469 158.91 325.015 160.831 324.54 162.83 cv
f
316.302 196.274 mo
332.196 183.928 345.667 142.606 344.146 118.373 cv
342.624 94.1397 318.246 128.572 315.036 160.422 cv
311.827 192.272 316.302 196.274 316.302 196.274 cv
cp
.345098 .521569 .478431 rgb
f
305.702 244.189 mo
307.395 234.646 317.508 209.979 335.201 205.716 cv
356.335 200.624 344.744 218.656 332.896 229.152 cv
321.046 239.649 305.702 244.189 305.702 244.189 cv
.462745 .65098 .6 rgb
f
319.518 198.938 mo
334.781 195.509 357.706 182.354 365.798 164.012 cv
373.891 145.671 349.107 149.941 334.103 168.77 cv
319.1 187.598 319.518 198.938 319.518 198.938 cv
cp
f
303.454 226.933 mo
306.032 221.083 317.043 199.932 307.5 178.718 cv
300.207 162.507 292.343 178.686 295.757 195.514 cv
299.172 212.343 303.454 226.933 303.454 226.933 cv
.345098 .521569 .478431 rgb
f
297.511 251.087 mo
297.511 251.087 310.751 210.276 301.514 185.599 cv
301.306 185.046 302.144 184.743 302.345 185.288 cv
310.461 206.967 301.801 239.033 298.981 248.276 cv
310.772 229.181 332.404 127.513 330.315 138.242 cv
318.875 196.664 301.822 253.738 297.511 251.087 cv
.462745 .65098 .6 rgb
f
299.512 252.944 mo
298.194 252.108 320.156 223.635 330.129 217.974 cv
330.638 217.685 331.079 218.454 330.569 218.746 cv
320.045 224.717 299.512 252.944 299.512 252.944 cv
.345098 .521569 .478431 rgb
f
313.048 209.031 mo
311.379 208.149 335.834 174.192 355.925 163.986 cv
356.451 163.72 356.846 164.515 356.326 164.778 cv
339.237 173.459 318.399 199.938 313.648 208.849 cv
313.529 209.072 313.252 209.144 313.048 209.031 cv
cp
f
322.472 189.639 mo
325.118 187.111 332.139 173.244 333.335 169.578 cv
333.411 169.345 333.661 169.217 333.895 169.293 cv
335.216 169.768 325.868 187.621 323.085 190.281 cv
322.66 190.686 322.048 190.042 322.472 189.639 cv
cp
f
93.4953 145.206 mo
77.5998 132.859 64.13 91.5371 65.6516 67.3042 cv
67.173 43.0708 91.5505 77.5029 94.7599 109.353 cv
97.9699 141.204 93.4953 145.206 93.4953 145.206 cv
f
104.094 193.12 mo
102.403 183.578 92.2888 158.911 74.5959 154.647 cv
53.4611 149.555 65.0519 167.586 76.9011 178.083 cv
88.7502 188.581 104.094 193.12 104.094 193.12 cv
.462745 .65098 .6 rgb
f
90.279 147.87 mo
75.0153 144.44 52.091 131.285 43.9987 112.944 cv
35.9064 94.6025 60.6902 98.8721 75.6935 117.701 cv
90.697 136.53 90.279 147.87 90.279 147.87 cv
f
106.342 175.865 mo
103.764 170.014 92.754 148.864 102.297 127.649 cv
109.589 111.438 117.454 127.617 114.04 144.446 cv
110.625 161.274 106.342 175.865 106.342 175.865 cv
.345098 .521569 .478431 rgb
f
112.286 200.019 mo
112.286 200.019 99.0456 159.208 108.282 134.53 cv
108.491 133.978 107.653 133.674 107.452 134.219 cv
99.3361 155.898 107.996 187.964 110.816 197.208 cv
99.0246 178.112 77.3933 76.4444 79.4826 87.1733 cv
85.5563 118.194 102.11 189.655 111.733 199.942 cv
111.881 200.099 112.115 200.124 112.286 200.019 cv
.462745 .65098 .6 rgb
f
110.284 201.875 mo
111.603 201.039 89.6408 172.566 79.6676 166.905 cv
79.1593 166.617 78.7174 167.385 79.2287 167.677 cv
86.9332 172.05 103.162 191.415 109.672 201.736 cv
109.808 201.95 110.086 202 110.284 201.875 cv
.345098 .521569 .478431 rgb
f
96.9308 157.362 mo
85.7795 136.439 54.7409 110.212 53.2756 113.112 cv
53.1647 113.331 53.2521 113.598 53.4709 113.709 cv
70.5602 122.391 91.3986 148.869 96.1491 157.78 cv
96.4254 158.298 97.2077 157.88 96.9308 157.362 cv
f
87.3244 138.57 mo
84.6789 136.042 77.6584 122.175 76.4616 118.509 cv
76.278 117.946 75.4397 118.235 75.6179 118.784 cv
76.8644 122.606 83.9244 136.548 86.7121 139.212 cv
87.1364 139.618 87.7482 138.973 87.3244 138.57 cv
f
230.605 144.998 mo
174.903 159.649 141.158 159.481 87.3624 145.013 cv
82.2878 143.647 83.6926 147.335 83.6926 41.7427 cv
138.805 57.4926 174.544 58.7929 234.302 41.7427 cv
234.302 140.208 li
234.302 142.458 232.78 144.425 230.605 144.998 cv
1 1 1 rgb
f
84.2589 42.4932 mo
84.258 65.1787 84.1925 82.5103 84.1403 96.4668 cv
83.965 143.142 83.9923 143.589 87.0504 144.348 cv
87.1974 144.385 87.3507 144.422 87.5099 144.465 cv
141.653 159.027 175.052 159.023 230.461 144.45 cv
232.389 143.942 233.736 142.198 233.736 140.208 cv
233.736 42.4927 li
203.653 51.0293 180.028 54.7681 157.251 54.6094 cv
135.446 54.457 113.581 50.8306 84.2589 42.4932 cv
158.488 156.523 mo
136.36 156.523 114.392 152.869 87.2155 145.56 cv
87.0637 145.519 86.9176 145.482 86.7775 145.448 cv
82.8268 144.468 82.8268 144.468 83.007 96.4624 cv
83.0602 82.353 83.1261 64.7939 83.1261 41.7427 cv
83.1261 40.9912 li
83.8483 41.1977 li
141.394 57.6431 176.51 57.6431 234.147 41.1977 cv
234.868 40.9917 li
234.868 140.208 li
234.868 142.712 233.175 144.907 230.749 145.545 cv
202.926 152.864 180.627 156.523 158.488 156.523 cv
.933333 .894118 .85098 rgb
f
228.185 36.7476 mo
174.674 49.7783 141.033 50.8071 89.9352 36.9678 cv
86.7902 36.1157 83.6926 38.4844 83.6926 41.7427 cv
142.177 58.2671 175.411 58.0278 234.302 41.7427 cv
234.302 38.1123 231.136 36.0293 228.185 36.7476 cv
cp
.266667 .258824 .266667 rgb
f
84.279 41.3193 mo
141.543 57.4517 175.209 57.4507 233.719 41.3154 cv
233.616 40.0015 233.034 38.8721 232.056 38.103 cv
231.013 37.2837 229.617 36.9819 228.32 37.2979 cv
172.779 50.8223 139.116 50.875 89.7873 37.5147 cv
88.4582 37.1548 87.0705 37.4282 85.9777 38.2647 cv
84.9987 39.0142 84.3937 40.1104 84.279 41.3193 cv
cp
158.526 54.5581 mo
135.428 54.5591 112.494 50.4688 83.5387 42.2876 cv
83.1262 42.1714 li
83.1262 41.7427 li
83.1262 40.0122 83.9142 38.4165 85.2892 37.3648 cv
86.6642 36.3125 88.4123 35.9688 90.0832 36.4209 cv
139.199 49.7236 172.724 49.6694 228.051 36.1973 cv
229.683 35.8008 231.442 36.1797 232.756 37.2124 cv
234.118 38.2827 234.868 39.8916 234.868 41.7427 cv
234.868 42.1738 li
234.453 42.2886 li
204.876 50.4678 181.619 54.5571 158.526 54.5581 cv
cp
f
227.164 41.9204 mo
229.061 41.2197 229.806 41.1226 229.551 40.4326 cv
229.06 39.1011 228.935 38.3135 228.255 38.5645 cv
226.358 39.2651 225.612 39.3623 225.867 40.0523 cv
226.36 41.3843 226.485 42.1714 227.164 41.9204 cv
cp
.745098 .752941 .760784 rgb
f
227.08 41.6191 mo
226.94 41.5816 li
226.804 41.5034 226.757 41.3301 226.835 41.1948 cv
228.093 39.0073 li
228.171 38.8716 228.346 38.8252 228.48 38.9033 cv
228.615 38.9815 228.662 39.1548 228.585 39.29 cv
227.326 41.4775 li
227.274 41.5684 227.178 41.6191 227.08 41.6191 cv
cp
1 1 1 rgb
f
228.899 40.9478 mo
228.804 40.9312 li
226.426 40.0874 li
226.279 40.0352 226.201 39.8731 226.253 39.7261 cv
226.306 39.5786 226.47 39.5024 226.615 39.5532 cv
228.993 40.3975 li
229.141 40.4497 229.218 40.6113 229.166 40.7593 cv
229.124 40.875 229.016 40.9478 228.899 40.9478 cv
cp
f
105.681 90.1509 mo
107.491 90.1509 li
107.491 96.5811 li
107.491 99.3174 106.167 100.229 104.195 100.229 cv
103.695 100.229 103.062 100.141 102.68 99.9941 cv
102.901 98.5376 li
103.195 98.626 103.592 98.7144 104.019 98.7144 cv
105.049 98.7144 105.681 98.2437 105.681 96.522 cv
105.681 90.1509 li
cp
.266667 .258824 .266667 rgb
f
113.154 96.5659 mo
111.874 96.5366 110.653 96.8164 110.653 97.9048 cv
110.653 98.6108 111.109 98.9351 111.683 98.9351 cv
112.404 98.9351 112.934 98.4644 113.095 97.9492 cv
113.14 97.8164 113.154 97.6694 113.154 97.5518 cv
113.154 96.5659 li
cp
113.39 100.068 mo
113.272 99.2734 li
112.787 99.8325 112.036 100.229 111.109 100.229 cv
109.667 100.229 108.858 99.1851 108.858 98.0962 cv
108.858 96.2866 110.462 95.374 113.11 95.3887 cv
113.11 95.2715 li
113.11 94.8003 112.919 94.0205 111.654 94.0205 cv
110.947 94.0205 110.212 94.2412 109.726 94.5503 cv
109.373 93.3731 li
109.903 93.0493 110.83 92.7407 111.963 92.7407 cv
114.258 92.7407 114.92 94.1973 114.92 95.7568 cv
114.92 98.3462 li
114.92 98.9937 114.949 99.6265 115.023 100.068 cv
113.39 100.068 li
cp
f
117.831 92.9024 mo
118.994 96.5366 li
119.199 97.1694 119.347 97.7432 119.479 98.3316 cv
119.655 97.7432 119.818 97.1841 120.009 96.5366 cv
121.142 92.9024 li
123.055 92.9024 li
120.318 100.068 li
118.537 100.068 li
115.874 92.9024 li
117.831 92.9024 li
cp
f
127.864 96.5659 mo
126.584 96.5366 125.362 96.8164 125.362 97.9048 cv
125.362 98.6108 125.819 98.9351 126.393 98.9351 cv
127.113 98.9351 127.643 98.4644 127.805 97.9492 cv
127.849 97.8164 127.864 97.6694 127.864 97.5518 cv
127.864 96.5659 li
cp
128.099 100.068 mo
127.982 99.2734 li
127.496 99.8325 126.745 100.229 125.819 100.229 cv
124.377 100.229 123.568 99.1851 123.568 98.0962 cv
123.568 96.2866 125.171 95.374 127.82 95.3887 cv
127.82 95.2715 li
127.82 94.8003 127.629 94.0205 126.363 94.0205 cv
125.657 94.0205 124.921 94.2412 124.436 94.5503 cv
124.083 93.3731 li
124.612 93.0493 125.539 92.7407 126.672 92.7407 cv
128.967 92.7407 129.63 94.1973 129.63 95.7568 cv
129.63 98.3462 li
129.63 98.9937 129.659 99.6265 129.733 100.068 cv
128.099 100.068 li
cp
f
134.614 98.0962 mo
135.203 98.4346 136.086 98.729 137.012 98.729 cv
138.175 98.729 138.822 98.1846 138.822 97.3755 cv
138.822 96.625 138.322 96.1836 137.057 95.7275 cv
135.424 95.1387 134.379 94.2705 134.379 92.8438 cv
134.379 91.2251 135.733 89.9893 137.881 89.9893 cv
138.955 89.9893 139.749 90.2246 140.264 90.4893 cv
139.823 91.9463 li
139.47 91.7549 138.779 91.4751 137.851 91.4751 cv
136.704 91.4751 136.203 92.0928 136.203 92.667 cv
136.203 93.4321 136.777 93.7852 138.101 94.3003 cv
139.823 94.9478 140.662 95.8154 140.662 97.2427 cv
140.662 98.832 139.455 100.215 136.895 100.215 cv
135.85 100.215 134.761 99.9204 134.217 99.5972 cv
134.614 98.0962 li
cp
f
147.575 99.8472 mo
147.193 100.023 146.442 100.215 145.545 100.215 cv
143.308 100.215 141.851 98.7881 141.851 96.5659 cv
141.851 94.418 143.322 92.7407 145.839 92.7407 cv
146.501 92.7407 147.177 92.8877 147.59 93.0791 cv
147.266 94.4326 li
146.972 94.3003 146.545 94.1528 145.898 94.1528 cv
144.514 94.1528 143.691 95.1685 143.705 96.4775 cv
143.705 97.9492 144.661 98.7881 145.898 98.7881 cv
146.53 98.7881 146.972 98.6553 147.325 98.5083 cv
147.575 99.8472 li
cp
f
148.912 95.2124 mo
148.912 94.2412 148.897 93.5498 148.853 92.9024 cv
150.427 92.9024 li
150.486 94.2705 li
150.545 94.2705 li
150.898 93.2554 151.737 92.7407 152.502 92.7407 cv
152.678 92.7407 152.781 92.7554 152.929 92.7847 cv
152.929 94.4912 li
152.781 94.4619 152.62 94.4326 152.399 94.4326 cv
151.531 94.4326 150.942 94.9917 150.78 95.8013 cv
150.751 95.9629 150.721 96.1538 150.721 96.3599 cv
150.721 100.068 li
148.912 100.068 li
148.912 95.2124 li
cp
f
154.148 100.068 mo
154.148 92.9024 li
155.973 92.9024 li
155.973 100.068 li
154.148 100.068 li
cp
156.076 90.9014 mo
156.076 91.4458 155.678 91.8726 155.046 91.8726 cv
154.443 91.8726 154.045 91.4458 154.045 90.9014 cv
154.045 90.3423 154.457 89.9155 155.061 89.9155 cv
155.678 89.9155 156.061 90.3423 156.076 90.9014 cv
cp
f
159.723 97.0664 mo
159.723 97.2427 159.738 97.4048 159.782 97.5664 cv
159.959 98.3023 160.607 98.832 161.371 98.832 cv
162.519 98.832 163.196 97.8755 163.196 96.4629 cv
163.196 95.1978 162.578 94.168 161.416 94.168 cv
160.665 94.168 159.974 94.7119 159.797 95.5068 cv
159.753 95.6538 159.723 95.8154 159.723 95.9629 cv
159.723 97.0664 li
cp
157.914 95.2861 mo
157.914 94.3442 157.884 93.5791 157.855 92.9024 cv
159.444 92.9024 li
159.532 94.0059 li
160.091 93.1963 160.93 92.7407 162.019 92.7407 cv
163.667 92.7407 165.035 94.1528 165.035 96.3897 cv
165.035 98.979 163.402 100.229 161.769 100.229 cv
160.871 100.229 160.121 99.8472 159.753 99.2734 cv
159.723 102.981 li
157.914 102.981 li
157.914 95.2861 li
cp
f
168.593 90.8574 mo
168.593 92.9024 li
170.315 92.9024 li
170.315 94.2559 li
168.593 94.2559 li
168.593 97.4194 li
168.593 98.2871 168.829 98.7437 169.52 98.7437 cv
169.829 98.7437 170.065 98.6997 170.227 98.6553 cv
170.256 100.039 li
169.991 100.141 169.52 100.215 168.946 100.215 cv
168.284 100.215 167.725 99.9941 167.387 99.6265 cv
167.005 99.2144 166.828 98.5669 166.828 97.6255 cv
166.828 94.2559 li
165.798 94.2559 li
165.798 92.9024 li
166.828 92.9024 li
166.828 91.2837 li
168.593 90.8574 li
cp
f
91.7262 121.011 mo
95.4714 121.011 97.2341 120.634 97.2341 122.293 cv
97.2341 126.038 97.6115 127.801 95.9528 127.801 cv
92.2077 127.801 90.445 128.178 90.445 126.52 cv
90.445 122.774 90.0676 121.011 91.7262 121.011 cv
cp
.317647 .262745 .258824 rgb
f
91.7262 106.081 mo
95.4714 106.081 97.2341 105.704 97.2341 107.362 cv
97.2341 111.108 97.6115 112.871 95.9528 112.871 cv
92.2077 112.871 90.445 113.248 90.445 111.589 cv
90.445 107.844 90.0676 106.081 91.7262 106.081 cv
cp
f
91.7262 90.1821 mo
95.4714 90.1821 97.2341 89.8047 97.2341 91.4634 cv
97.2341 95.2085 97.6115 96.9712 95.9528 96.9712 cv
92.2077 96.9712 90.445 97.3486 90.445 95.6899 cv
90.445 91.9443 90.0676 90.1821 91.7262 90.1821 cv
cp
f
91.7262 77.1543 mo
95.4714 77.1543 97.2341 76.7769 97.2341 78.4356 cv
97.2341 82.1812 97.6115 83.9434 95.9528 83.9434 cv
92.2077 83.9434 90.445 84.3208 90.445 82.6621 cv
90.445 78.4356 li
90.445 77.728 91.0187 77.1543 91.7262 77.1543 cv
cp
f
91.7262 61.915 mo
95.4714 61.915 97.2341 61.5376 97.2341 63.1963 cv
97.2341 66.9419 97.6115 68.7041 95.9528 68.7041 cv
92.2077 68.7041 90.445 69.0816 90.445 67.4229 cv
90.445 63.6777 90.0676 61.915 91.7262 61.915 cv
cp
f
115.305 68.7979 mo
104.823 68.7979 104.77 68.4914 104.77 66.769 cv
104.77 64.4844 104.354 61.915 106.705 61.915 cv
120.629 61.915 129.612 61.8213 135.408 61.8213 cv
145.893 61.8213 145.949 62.1279 145.949 63.8501 cv
145.949 66.1353 146.365 68.7041 144.014 68.7041 cv
130.088 68.7041 121.101 68.7979 115.305 68.7979 cv
.454902 .411765 .407843 rgb
f
157.248 68.792 mo
150.438 68.792 149.953 68.4904 149.953 66.769 cv
149.953 64.4844 149.536 61.915 151.888 61.915 cv
160.161 61.915 165.678 61.8272 169.353 61.8272 cv
176.166 61.8272 176.652 62.1288 176.652 63.8501 cv
176.652 66.1353 177.069 68.7041 174.717 68.7041 cv
166.441 68.7041 160.923 68.792 157.248 68.792 cv
f
189.139 68.7885 mo
181.954 68.7885 181.538 68.4899 181.538 66.769 cv
181.538 64.4844 181.121 61.915 183.473 61.915 cv
192.07 61.915 197.802 61.8307 201.622 61.8307 cv
208.811 61.8307 209.228 62.1293 209.228 63.8501 cv
209.228 66.1353 209.644 68.7041 207.292 68.7041 cv
198.692 68.7041 192.958 68.7885 189.139 68.7885 cv
f
115.305 84.0372 mo
104.824 84.0372 104.77 83.7307 104.77 82.0083 cv
104.77 79.0894 li
104.77 78.0205 105.637 77.1544 106.705 77.1544 cv
120.631 77.1544 129.618 77.0605 135.414 77.0605 cv
145.896 77.0605 145.949 77.367 145.949 79.0894 cv
145.949 81.3745 146.365 83.9434 144.014 83.9434 cv
130.088 83.9434 121.102 84.0372 115.305 84.0372 cv
f
157.252 84.0312 mo
150.439 84.0312 149.953 83.7297 149.953 82.0083 cv
149.953 79.7231 149.536 77.1544 151.888 77.1544 cv
160.161 77.1544 165.679 77.0665 169.354 77.0665 cv
176.167 77.0665 176.652 77.368 176.652 79.0894 cv
176.652 81.3745 177.069 83.9434 174.717 83.9434 cv
166.444 83.9434 160.928 84.0312 157.252 84.0312 cv
f
189.144 84.0277 mo
181.955 84.0277 181.538 83.7292 181.538 82.0083 cv
181.538 79.7231 181.121 77.1544 183.473 77.1544 cv
192.07 77.1544 197.803 77.07 201.623 77.07 cv
208.812 77.07 209.228 77.3685 209.228 79.0894 cv
209.228 81.3745 209.644 83.9434 207.292 83.9434 cv
198.695 83.9434 192.963 84.0277 189.144 84.0277 cv
f
115.31 112.964 mo
104.826 112.964 104.77 112.658 104.77 110.936 cv
104.77 108.65 104.354 106.081 106.705 106.081 cv
120.629 106.081 129.612 105.987 135.408 105.987 cv
145.893 105.987 145.949 106.294 145.949 108.016 cv
145.949 110.301 146.365 112.871 144.014 112.871 cv
130.091 112.871 121.107 112.964 115.31 112.964 cv
f
157.251 112.958 mo
150.438 112.958 149.953 112.657 149.953 110.936 cv
149.953 108.65 149.536 106.081 151.888 106.081 cv
160.161 106.081 165.678 105.993 169.353 105.993 cv
176.166 105.993 176.652 106.295 176.652 108.016 cv
176.652 110.301 177.069 112.871 174.717 112.871 cv
166.444 112.871 160.927 112.958 157.251 112.958 cv
f
189.143 112.955 mo
181.954 112.955 181.538 112.656 181.538 110.936 cv
181.538 108.016 li
181.538 106.948 182.404 106.081 183.473 106.081 cv
192.07 106.081 197.802 105.997 201.622 105.997 cv
208.811 105.997 209.228 106.295 209.228 108.016 cv
209.228 110.301 209.644 112.871 207.292 112.871 cv
198.695 112.871 192.962 112.955 189.143 112.955 cv
f
104.77 124.826 mo
104.77 122.947 li
104.77 121.878 105.637 121.011 106.705 121.011 cv
120.626 121.011 129.61 120.918 135.407 120.918 cv
145.45 120.918 145.925 121.199 145.948 122.735 cv
130.903 123.832 117.517 124.506 104.77 124.826 cv
f
157.251 127.889 mo
156.637 127.889 156.075 127.886 155.559 127.88 cv
155.679 126.136 155.804 124.365 155.934 122.557 cv
155.956 122.26 155.717 122.009 155.424 122.009 cv
155.41 122.009 155.396 122.009 155.382 122.01 cv
153.57 122.156 151.787 122.296 150.022 122.431 cv
150.248 121.613 150.998 121.011 151.888 121.011 cv
160.159 121.011 165.676 120.923 169.352 120.923 cv
176.167 120.923 176.652 121.225 176.652 122.947 cv
176.652 125.231 177.069 127.801 174.717 127.801 cv
166.444 127.801 160.927 127.889 157.251 127.889 cv
f
189.143 127.885 mo
181.954 127.885 181.538 127.587 181.538 125.866 cv
181.538 123.581 181.121 121.011 183.473 121.011 cv
192.069 121.011 197.801 120.927 201.621 120.927 cv
208.811 120.927 209.228 121.225 209.228 122.947 cv
209.228 125.231 209.644 127.801 207.292 127.801 cv
206.793 127.801 206.305 127.801 205.825 127.802 cv
201.087 126.798 198.31 126.099 198.236 126.08 cv
197.684 125.94 li
197.684 126.509 li
197.684 126.952 197.684 127.394 197.684 127.834 cv
194.103 127.858 191.313 127.885 189.143 127.885 cv
f
16.6525 218.881 mo
3.72181 219.448 19.4269 197.557 10.6345 122.572 cv
10.5973 122.257 10.858 121.981 11.1755 122.001 cv
66.3556 125.534 98.9318 126.563 155.382 122.01 cv
155.694 121.985 155.957 122.246 155.934 122.557 cv
153.501 156.323 152.832 178.452 155.49 213.105 cv
156.011 219.892 152.635 218.912 125.115 217.932 cv
104.812 217.209 71.3678 216.486 16.6525 218.881 cv
1 1 1 rgb
f
11.2048 122.571 mo
15.7643 161.5 13.7346 186.061 12.5217 200.74 cv
11.7409 210.188 11.3112 215.392 13.1926 217.347 cv
13.8967 218.08 14.9909 218.386 16.6281 218.315 cv
79.6169 215.558 114.637 216.939 133.452 217.682 cv
146.957 218.215 152.546 218.436 154.258 216.658 cv
154.882 216.01 155.07 215.026 154.925 213.148 cv
152.258 178.377 152.941 156.23 155.364 122.58 cv
100.489 127.003 67.9089 126.2 11.2048 122.571 cv
cp
16.1794 219.459 mo
14.4577 219.459 13.2414 219.033 12.3762 218.133 cv
10.1398 215.808 10.5847 210.423 11.3928 200.647 cv
12.6027 186.002 14.6276 161.491 10.072 122.639 cv
10.0344 122.32 10.1398 122.004 10.3615 121.771 cv
10.5827 121.538 10.8952 121.417 11.2121 121.436 cv
67.9177 125.067 100.476 125.87 155.337 121.445 cv
155.651 121.417 155.958 121.533 156.182 121.755 cv
156.406 121.978 156.522 122.285 156.499 122.598 cv
154.076 156.227 153.392 178.341 156.055 213.061 cv
156.179 214.68 156.146 216.332 155.074 217.445 cv
153.008 219.588 147.671 219.376 133.407 218.814 cv
114.609 218.072 79.6188 216.693 16.6774 219.447 cv
16.507 219.455 16.3405 219.459 16.1794 219.459 cv
cp
.933333 .894118 .85098 rgb
f
150.317 116.614 mo
30.84 123.398 10.5627 109.554 10.5627 121.962 cv
67.1598 125.393 98.6877 126.733 155.977 121.962 cv
155.977 118.887 153.39 116.439 150.317 116.614 cv
cp
.266667 .258824 .266667 rgb
f
11.1432 121.43 mo
65.9089 124.747 97.4333 126.243 155.383 121.443 cv
155.263 120.312 154.75 119.274 153.91 118.48 cv
152.942 117.566 151.681 117.103 150.349 117.18 cv
89.7297 120.622 53.9714 118.72 34.7614 117.7 cv
21.2145 116.979 14.4142 116.618 12.1764 118.741 cv
11.5392 119.345 11.2126 120.187 11.1432 121.43 cv
cp
88.0651 125.64 mo
63.7956 125.64 40.6877 124.356 10.5285 122.528 cv
9.99627 122.496 li
9.99627 121.962 li
9.99627 120.109 10.4411 118.824 11.3967 117.918 cv
13.9889 115.461 20.0871 115.785 34.8215 116.568 cv
54.0099 117.588 89.7267 119.487 150.285 116.048 cv
151.926 115.955 153.491 116.526 154.688 117.657 cv
155.884 118.787 156.544 120.316 156.544 121.962 cv
156.544 122.484 li
156.024 122.527 li
129.382 124.746 108.319 125.64 88.0651 125.64 cv
cp
f
148.508 121.342 mo
150.526 121.205 151.268 121.321 151.218 120.587 cv
151.121 119.171 151.223 118.38 150.501 118.43 cv
148.483 118.567 147.74 118.45 147.791 119.185 cv
147.902 120.813 li
147.923 121.127 148.195 121.363 148.508 121.342 cv
cp
.745098 .752941 .760784 rgb
f
148.592 121.041 mo
148.387 120.954 li
148.279 120.84 148.283 120.661 148.396 120.553 cv
150.22 118.809 li
150.334 118.701 150.513 118.705 150.621 118.818 cv
150.729 118.931 150.725 119.11 150.612 119.219 cv
148.788 120.962 li
148.592 121.041 li
cp
1 1 1 rgb
f
150.526 120.909 mo
150.36 120.855 li
148.316 119.375 li
148.189 119.284 148.161 119.106 148.253 118.979 cv
148.344 118.853 148.521 118.824 148.649 118.917 cv
150.693 120.396 li
150.819 120.488 150.847 120.665 150.756 120.792 cv
150.526 120.909 li
cp
f
29.9543 167.628 mo
30.2487 167.707 30.6413 167.726 31.1315 167.726 cv
32.9372 167.726 34.0363 166.843 34.0363 165.292 cv
34.0363 163.821 33.0158 163.036 31.3478 163.036 cv
30.6804 163.036 30.2097 163.095 29.9543 163.153 cv
29.9543 167.628 li
cp
27.5602 161.466 mo
28.424 161.309 29.6208 161.191 31.2497 161.191 cv
33.0158 161.191 34.3107 161.564 35.1545 162.271 cv
35.9396 162.918 36.4499 163.958 36.4499 165.194 cv
36.4499 166.451 36.0573 167.49 35.3117 168.197 cv
34.3503 169.158 32.839 169.61 31.1315 169.61 cv
30.6804 169.61 30.2682 169.59 29.9543 169.531 cv
29.9543 174.516 li
27.5602 174.516 li
27.5602 161.466 li
cp
.839216 .447059 .227451 rgb
f
40.0622 164.959 mo
41.7892 170.081 li
41.9855 170.669 42.1818 171.396 42.319 171.945 cv
42.3781 171.945 li
42.5348 171.396 42.7116 170.689 42.8884 170.061 cv
44.3796 164.959 li
46.9699 164.959 li
44.5759 171.474 li
43.2609 175.045 42.3781 176.635 41.2399 177.616 cv
40.2975 178.46 39.3166 178.774 38.7082 178.853 cv
38.1589 176.812 li
38.571 176.713 39.0812 176.498 39.572 176.145 cv
40.0231 175.85 40.5534 175.281 40.8864 174.633 cv
40.9846 174.457 41.0436 174.319 41.0436 174.202 cv
41.0436 174.104 41.0241 173.966 40.9059 173.73 cv
37.4133 164.959 li
40.0622 164.959 li
cp
f
51.132 162.231 mo
51.132 164.959 li
53.4279 164.959 li
53.4279 166.764 li
51.132 166.764 li
51.132 170.983 li
51.132 172.141 51.446 172.75 52.3683 172.75 cv
52.7805 172.75 53.0944 172.691 53.3102 172.632 cv
53.3493 174.477 li
52.9963 174.614 52.3683 174.712 51.6032 174.712 cv
50.7199 174.712 49.9743 174.417 49.5226 173.927 cv
49.0124 173.377 48.777 172.514 48.777 171.258 cv
48.777 166.764 li
47.4035 166.764 li
47.4035 164.959 li
48.777 164.959 li
48.777 162.8 li
51.132 162.231 li
cp
f
55.2541 160.583 mo
57.6877 160.583 li
57.6877 166.273 li
58.0212 165.822 58.4138 165.45 58.924 165.175 cv
59.3952 164.9 59.964 164.743 60.5724 164.743 cv
62.2014 164.743 63.9084 165.822 63.9084 168.884 cv
63.9084 174.516 li
61.4948 174.516 li
61.4948 169.158 li
61.4948 167.765 60.9846 166.725 59.6501 166.725 cv
58.7082 166.725 58.0407 167.353 57.7858 168.079 cv
57.7072 168.275 57.6877 168.53 57.6877 168.805 cv
57.6877 174.516 li
55.2541 174.516 li
55.2541 160.583 li
cp
f
68.3649 169.747 mo
68.3649 171.592 69.2673 172.985 70.7389 172.985 cv
72.113 172.985 73.0744 171.631 73.0744 169.708 cv
73.0744 168.216 72.4074 166.509 70.759 166.509 cv
69.0519 166.509 68.3649 168.158 68.3649 169.747 cv
cp
75.5666 169.649 mo
75.5666 173.162 73.0939 174.731 70.6608 174.731 cv
67.9528 174.731 65.8727 172.867 65.8727 169.806 cv
65.8727 166.666 67.9333 164.743 70.8176 164.743 cv
73.6633 164.743 75.5666 166.745 75.5666 169.649 cv
cp
f
77.5505 167.804 mo
77.5505 166.706 77.5309 165.783 77.4719 164.959 cv
79.5915 164.959 li
79.7092 166.392 li
79.7678 166.392 li
80.1799 165.646 81.2199 164.743 82.8097 164.743 cv
84.4777 164.743 86.2043 165.822 86.2043 168.844 cv
86.2043 174.516 li
83.7907 174.516 li
83.7907 169.119 li
83.7907 167.746 83.2804 166.706 81.966 166.706 cv
81.0041 166.706 80.3371 167.393 80.0817 168.118 cv
80.0036 168.334 79.9836 168.628 79.9836 168.903 cv
79.9836 174.516 li
77.5505 174.516 li
77.5505 167.804 li
cp
f
26.19 145.396 mo
19.0651 145.396 18.6975 145.105 18.6975 143.437 cv
18.6975 141.498 18.3181 139.051 20.572 139.051 cv
29.263 139.051 35.0272 138.967 38.8468 138.967 cv
45.9677 138.967 46.3337 139.258 46.3337 140.925 cv
46.3337 142.864 46.7131 145.312 44.4592 145.312 cv
35.7714 145.312 30.0096 145.396 26.19 145.396 cv
.886274 .615686 .458824 rgb
f
60.0262 145.396 mo
52.9013 145.396 52.5339 145.105 52.5339 143.437 cv
52.5339 141.498 52.1545 139.051 54.4079 139.051 cv
63.099 139.051 68.8632 138.967 72.6828 138.967 cv
79.8039 138.967 80.1701 139.258 80.1701 140.925 cv
80.1701 142.864 80.549 145.312 78.2956 145.312 cv
69.6076 145.312 63.8458 145.396 60.0262 145.396 cv
f
93.8623 145.396 mo
86.7375 145.396 86.3698 145.105 86.3698 143.437 cv
86.3698 141.498 85.9904 139.051 88.2443 139.051 cv
96.9354 139.051 102.7 138.967 106.519 138.967 cv
113.64 138.967 114.006 139.258 114.006 140.925 cv
114.006 143.437 li
114.006 144.473 113.167 145.312 112.132 145.312 cv
103.444 145.312 97.6819 145.396 93.8623 145.396 cv
f
127.699 145.396 mo
120.574 145.396 120.206 145.105 120.206 143.437 cv
120.206 141.498 119.827 139.051 122.08 139.051 cv
130.771 139.051 136.536 138.967 140.355 138.967 cv
147.476 138.967 147.842 139.258 147.842 140.925 cv
147.842 142.864 148.222 145.312 145.968 145.312 cv
137.28 145.312 131.518 145.396 127.699 145.396 cv
f
26.1846 156.009 mo
19.0637 156.009 18.6975 155.718 18.6975 154.051 cv
18.6975 152.111 18.3181 149.664 20.572 149.664 cv
29.2645 149.664 35.028 149.58 38.8475 149.58 cv
45.9666 149.58 46.3337 149.871 46.3337 151.538 cv
46.3337 153.478 46.7131 155.925 44.4592 155.925 cv
35.7683 155.925 30.0042 156.009 26.1846 156.009 cv
f
60.0208 156.009 mo
52.8999 156.009 52.5339 155.718 52.5339 154.051 cv
52.5339 152.111 52.1545 149.664 54.4079 149.664 cv
63.1005 149.664 68.864 149.58 72.6836 149.58 cv
79.8028 149.58 80.1701 149.871 80.1701 151.538 cv
80.1701 153.478 80.549 155.925 78.2956 155.925 cv
69.6046 155.925 63.8404 156.009 60.0208 156.009 cv
f
93.857 156.009 mo
86.736 156.009 86.3698 155.718 86.3698 154.051 cv
86.3698 152.111 85.9904 149.664 88.2443 149.664 cv
112.132 149.664 li
113.167 149.664 114.006 150.503 114.006 151.538 cv
114.006 154.051 li
114.006 155.086 113.167 155.925 112.132 155.925 cv
103.441 155.925 97.6765 156.009 93.857 156.009 cv
f
127.693 156.009 mo
120.572 156.009 120.206 155.718 120.206 154.051 cv
120.206 152.111 119.827 149.664 122.08 149.664 cv
130.773 149.664 136.536 149.58 140.356 149.58 cv
147.475 149.58 147.842 149.871 147.842 151.538 cv
147.842 153.478 148.222 155.925 145.968 155.925 cv
137.277 155.925 131.513 156.009 127.693 156.009 cv
f
127.693 171.929 mo
120.573 171.929 120.206 171.638 120.206 169.971 cv
120.206 168.031 119.827 165.584 122.08 165.584 cv
130.771 165.584 136.536 165.5 140.355 165.5 cv
147.476 165.5 147.842 165.791 147.842 167.458 cv
147.842 169.397 148.222 171.845 145.968 171.845 cv
137.277 171.845 131.513 171.929 127.693 171.929 cv
f
26.1914 187.849 mo
19.0646 187.849 18.6975 187.558 18.6975 185.89 cv
18.6975 183.951 18.3181 181.503 20.572 181.503 cv
29.2585 181.503 35.0204 181.42 38.84 181.42 cv
45.9668 181.42 46.3337 181.711 46.3337 183.378 cv
46.3337 185.317 46.7131 187.765 44.4592 187.765 cv
35.7729 187.765 30.011 187.849 26.1914 187.849 cv
f
60.0276 187.849 mo
52.9008 187.849 52.5339 187.558 52.5339 185.89 cv
52.5339 183.951 52.1545 181.503 54.4079 181.503 cv
63.0944 181.503 68.8564 181.42 72.6761 181.42 cv
79.803 181.42 80.1701 181.711 80.1701 183.378 cv
80.1701 185.89 li
80.1701 186.925 79.3307 187.765 78.2956 187.765 cv
69.6091 187.765 63.8472 187.849 60.0276 187.849 cv
f
93.8637 187.849 mo
86.737 187.849 86.3698 187.558 86.3698 185.89 cv
86.3698 183.951 85.9904 181.503 88.2443 181.503 cv
96.9308 181.503 102.693 181.42 106.512 181.42 cv
113.639 181.42 114.006 181.711 114.006 183.378 cv
114.006 185.89 li
114.006 186.925 113.167 187.765 112.132 187.765 cv
103.445 187.765 97.6833 187.849 93.8637 187.849 cv
f
127.7 187.849 mo
120.573 187.849 120.206 187.558 120.206 185.89 cv
120.206 183.951 119.827 181.503 122.08 181.503 cv
130.767 181.503 136.529 181.42 140.348 181.42 cv
147.475 181.42 147.842 181.711 147.842 183.378 cv
147.842 185.317 148.222 187.765 145.968 187.765 cv
137.281 187.765 131.52 187.849 127.7 187.849 cv
f
26.1914 198.462 mo
19.0646 198.462 18.6975 198.171 18.6975 196.503 cv
18.6975 194.564 18.3181 192.117 20.572 192.117 cv
29.2585 192.117 35.0212 192.033 38.8408 192.033 cv
45.9675 192.033 46.3337 192.324 46.3337 193.992 cv
46.3337 195.93 46.7131 198.378 44.4592 198.378 cv
35.7729 198.378 30.011 198.462 26.1914 198.462 cv
f
60.0276 198.462 mo
52.9008 198.462 52.5339 198.171 52.5339 196.503 cv
52.5339 194.564 52.1545 192.117 54.4079 192.117 cv
63.0944 192.117 68.8572 192.033 72.6768 192.033 cv
79.8037 192.033 80.1701 192.324 80.1701 193.992 cv
80.1701 195.93 80.549 198.378 78.2956 198.378 cv
69.6091 198.378 63.8472 198.462 60.0276 198.462 cv
f
93.8637 198.462 mo
86.737 198.462 86.3698 198.171 86.3698 196.503 cv
86.3698 194.564 85.9904 192.117 88.2443 192.117 cv
96.9308 192.117 102.694 192.033 106.513 192.033 cv
113.64 192.033 114.006 192.324 114.006 193.992 cv
114.006 195.93 114.385 198.378 112.132 198.378 cv
103.445 198.378 97.6833 198.462 93.8637 198.462 cv
f
127.7 198.462 mo
120.573 198.462 120.206 198.171 120.206 196.503 cv
120.206 194.564 119.827 192.117 122.08 192.117 cv
130.767 192.117 136.53 192.033 140.349 192.033 cv
147.476 192.033 147.842 192.324 147.842 193.992 cv
147.842 195.93 148.222 198.378 145.968 198.378 cv
137.281 198.378 131.52 198.462 127.7 198.462 cv
f
26.1914 209.075 mo
19.0646 209.075 18.6975 208.784 18.6975 207.117 cv
18.6975 205.177 18.3181 202.73 20.572 202.73 cv
29.26 202.73 35.0233 202.646 38.8429 202.646 cv
45.9677 202.646 46.3337 202.937 46.3337 204.604 cv
46.3337 206.543 46.7131 208.992 44.4592 208.992 cv
35.7729 208.992 30.011 209.075 26.1914 209.075 cv
f
60.0276 209.075 mo
52.9008 209.075 52.5339 208.784 52.5339 207.117 cv
52.5339 205.177 52.1545 202.73 54.4079 202.73 cv
63.0959 202.73 68.8593 202.646 72.6789 202.646 cv
79.8039 202.646 80.1701 202.937 80.1701 204.604 cv
80.1701 207.117 li
80.1701 208.152 79.3307 208.992 78.2956 208.992 cv
69.6091 208.992 63.8472 209.075 60.0276 209.075 cv
f
93.8637 209.075 mo
86.737 209.075 86.3698 208.784 86.3698 207.117 cv
86.3698 205.177 85.9904 202.73 88.2443 202.73 cv
96.9323 202.73 102.696 202.646 106.515 202.646 cv
113.64 202.646 114.006 202.937 114.006 204.604 cv
114.006 206.543 114.385 208.992 112.132 208.992 cv
103.445 208.992 97.6833 209.075 93.8637 209.075 cv
f
127.7 209.075 mo
120.573 209.075 120.206 208.784 120.206 207.117 cv
120.206 205.177 119.827 202.73 122.08 202.73 cv
130.768 202.73 136.532 202.646 140.351 202.646 cv
147.476 202.646 147.842 202.937 147.842 204.604 cv
147.842 206.543 148.222 208.992 145.968 208.992 cv
137.281 208.992 131.52 209.075 127.7 209.075 cv
f
201.22 252.414 mo
196.801 251.187 198.127 256.857 198.127 126.509 cv
198.127 126.509 279.408 147.149 323.139 126.509 cv
323.139 248.983 li
323.139 258.333 272.254 272.124 201.22 252.414 cv
1 1 1 rgb
f
201.339 251.987 mo
263.251 269.166 309.338 260.799 320.252 252.501 cv
321.851 251.285 322.696 250.069 322.696 248.982 cv
322.696 127.204 li
300.039 137.604 267.554 137.028 244.19 134.69 cv
220.999 132.37 202.002 127.91 198.57 127.075 cv
198.569 157.171 198.496 180.337 198.443 197.28 cv
198.278 250.27 198.321 251.291 200.82 251.859 cv
200.985 251.896 201.156 251.936 201.339 251.987 cv
270.526 262.874 mo
251.262 262.874 227.617 260.198 201.102 252.839 cv
200.935 252.793 200.776 252.757 200.624 252.723 cv
197.386 251.986 197.386 251.986 197.557 197.277 cv
197.611 180.229 197.684 156.88 197.684 126.509 cv
197.684 125.94 li
198.236 126.08 li
198.439 126.132 218.829 131.264 244.29 133.81 cv
267.758 136.157 300.454 136.726 322.949 126.109 cv
323.581 125.811 li
323.581 248.982 li
323.581 250.374 322.642 251.796 320.787 253.206 cv
314.455 258.02 296.462 262.874 270.526 262.874 cv
.933333 .894118 .85098 rgb
f
317.251 122.62 mo
280.501 137.882 221.172 125.457 203.351 121.151 cv
201.463 120.696 198.127 121.33 198.127 126.509 cv
198.127 126.509 281.496 147.149 323.139 126.509 cv
323.139 123.477 320.052 121.456 317.251 122.62 cv
cp
.266667 .258824 .266667 rgb
f
198.574 126.162 mo
204.439 127.56 282.93 145.699 322.687 126.238 cv
322.608 125.067 322.01 124.034 321.022 123.374 cv
319.957 122.664 318.611 122.534 317.421 123.028 cv
304.201 128.519 288.04 130.432 271.946 130.432 cv
243.097 130.433 214.448 124.288 203.246 121.582 cv
202.826 121.481 201.363 121.225 200.143 122.186 cv
199.159 122.96 198.632 124.297 198.574 126.162 cv
cp
271.987 136.102 mo
262.458 136.102 253.177 135.502 244.973 134.69 cv
219.192 132.136 198.229 126.991 198.021 126.939 cv
197.684 126.856 li
197.684 126.509 li
197.684 124.177 198.327 122.488 199.595 121.49 cv
201.129 120.282 202.938 120.597 203.454 120.721 cv
220.839 124.92 280.412 137.439 317.081 122.211 cv
318.545 121.603 320.202 121.762 321.514 122.637 cv
322.809 123.502 323.581 124.949 323.581 126.509 cv
323.581 126.784 li
323.335 126.906 li
309.17 133.927 290.132 136.102 271.987 136.102 cv
cp
f
317.225 127.06 mo
319.114 126.339 319.859 126.234 319.597 125.547 cv
319.091 124.221 318.958 123.435 318.281 123.692 cv
316.391 124.413 315.648 124.518 315.909 125.206 cv
316.415 126.532 316.548 127.318 317.225 127.06 cv
cp
.745098 .752941 .760784 rgb
f
317.135 126.76 mo
316.996 126.724 li
316.86 126.647 316.811 126.474 316.888 126.337 cv
318.124 124.137 li
318.2 124 318.372 123.952 318.51 124.029 cv
318.646 124.105 318.695 124.278 318.617 124.415 cv
317.382 126.615 li
317.329 126.708 317.234 126.76 317.135 126.76 cv
cp
1 1 1 rgb
f
318.946 126.069 mo
318.855 126.054 li
316.468 125.235 li
316.32 125.184 316.24 125.023 316.291 124.875 cv
316.343 124.727 316.503 124.649 316.652 124.699 cv
319.038 125.518 li
319.187 125.568 319.266 125.729 319.214 125.877 cv
319.174 125.995 319.065 126.069 318.946 126.069 cv
cp
f
268.784 173.037 mo
268.358 173.258 267.416 173.479 266.224 173.479 cv
263.075 173.479 261.163 171.507 261.163 168.491 cv
261.163 165.224 263.428 163.253 266.459 163.253 cv
267.651 163.253 268.505 163.503 268.872 163.694 cv
268.476 165.136 li
268.004 164.93 267.358 164.753 266.532 164.753 cv
264.518 164.753 263.061 166.019 263.061 168.402 cv
263.061 170.58 264.341 171.978 266.519 171.978 cv
267.254 171.978 268.019 171.831 268.489 171.61 cv
268.784 173.037 li
cp
.266667 .258824 .266667 rgb
f
274.271 165.504 mo
274.271 168.829 li
277.463 168.829 li
277.463 169.977 li
274.271 169.977 li
274.271 173.332 li
273.064 173.332 li
273.064 169.977 li
269.87 169.977 li
269.87 168.829 li
273.064 168.829 li
273.064 165.504 li
274.271 165.504 li
cp
f
283.036 165.504 mo
283.036 168.829 li
286.23 168.829 li
286.23 169.977 li
283.036 169.977 li
283.036 173.332 li
281.83 173.332 li
281.83 169.977 li
278.637 169.977 li
278.637 168.829 li
281.83 168.829 li
281.83 165.504 li
283.036 165.504 li
cp
f
267.852 200.191 mo
268.147 200.269 268.538 200.29 269.029 200.29 cv
270.834 200.29 271.934 199.406 271.934 197.856 cv
271.934 196.384 270.913 195.599 269.245 195.599 cv
268.577 195.599 268.107 195.658 267.852 195.717 cv
267.852 200.191 li
cp
265.457 194.029 mo
266.32 193.873 267.518 193.754 269.147 193.754 cv
270.913 193.754 272.208 194.127 273.052 194.834 cv
273.836 195.481 274.347 196.521 274.347 197.757 cv
274.347 199.013 273.954 200.053 273.208 200.76 cv
272.247 201.721 270.736 202.173 269.029 202.173 cv
268.577 202.173 268.165 202.153 267.852 202.094 cv
267.852 207.079 li
265.457 207.079 li
265.457 194.029 li
cp
.839216 .447059 .227451 rgb
f
278.843 193.852 mo
278.843 199.151 li
284.436 199.151 li
284.436 193.852 li
286.849 193.852 li
286.849 207.079 li
284.436 207.079 li
284.436 201.251 li
278.843 201.251 li
278.843 207.079 li
276.429 207.079 li
276.429 193.852 li
278.843 193.852 li
cp
f
292.013 200.191 mo
292.308 200.269 292.699 200.29 293.191 200.29 cv
294.995 200.29 296.095 199.406 296.095 197.856 cv
296.095 196.384 295.074 195.599 293.406 195.599 cv
292.739 195.599 292.268 195.658 292.013 195.717 cv
292.013 200.191 li
cp
289.618 194.029 mo
290.483 193.873 291.679 193.754 293.308 193.754 cv
295.074 193.754 296.369 194.127 297.213 194.834 cv
297.998 195.481 298.508 196.521 298.508 197.757 cv
298.508 199.013 298.115 200.053 297.369 200.76 cv
296.408 201.721 294.898 202.173 293.191 202.173 cv
292.739 202.173 292.326 202.153 292.013 202.094 cv
292.013 207.079 li
289.618 207.079 li
289.618 194.029 li
cp
f
293.372 239.303 mo
292.945 239.524 292.004 239.745 290.813 239.745 cv
287.664 239.745 285.75 237.773 285.75 234.757 cv
285.75 231.491 288.017 229.519 291.048 229.519 cv
292.239 229.519 293.093 229.769 293.46 229.96 cv
293.064 231.402 li
292.592 231.197 291.945 231.02 291.121 231.02 cv
289.106 231.02 287.649 232.286 287.649 234.668 cv
287.649 236.846 288.929 238.244 291.107 238.244 cv
291.842 238.244 292.608 238.097 293.078 237.876 cv
293.372 239.303 li
cp
.266667 .258824 .266667 rgb
f
298.344 235.713 mo
298.594 233.845 li
297.166 233.845 li
296.916 235.713 li
298.344 235.713 li
cp
295.238 239.598 mo
295.621 236.862 li
294.415 236.862 li
294.415 235.713 li
295.798 235.713 li
296.063 233.845 li
294.797 233.845 li
294.797 232.711 li
296.225 232.711 li
296.607 230.034 li
297.71 230.034 li
297.343 232.711 li
298.77 232.711 li
299.153 230.034 li
300.256 230.034 li
299.888 232.711 li
301.08 232.711 li
301.08 233.845 li
299.712 233.845 li
299.462 235.713 li
300.697 235.713 li
300.697 236.846 li
299.271 236.846 li
298.903 239.598 li
297.77 239.598 li
298.153 236.846 li
296.739 236.846 li
296.357 239.598 li
295.238 239.598 li
cp
f
250.744 148.531 mo
228.924 148.531 li
227.979 148.531 227.212 147.764 227.212 146.819 cv
227.212 144.524 li
227.212 143.578 227.979 142.811 228.924 142.811 cv
250.744 142.811 li
251.69 142.811 252.456 143.578 252.456 144.524 cv
252.456 146.819 li
252.456 147.764 251.69 148.531 250.744 148.531 cv
.694118 .8 .878431 rgb
f
262.759 148.607 mo
256.239 148.607 255.906 148.341 255.906 146.819 cv
255.906 145.088 255.555 142.811 257.618 142.811 cv
265.545 142.811 270.807 142.736 274.296 142.736 cv
280.818 142.736 281.151 143.001 281.151 144.524 cv
281.151 146.254 281.502 148.531 279.439 148.531 cv
271.51 148.531 266.248 148.607 262.759 148.607 cv
.870588 .556863 .380392 rgb
f
291.454 148.607 mo
284.934 148.607 284.602 148.341 284.602 146.819 cv
284.602 145.088 284.249 142.811 286.314 142.811 cv
294.241 142.811 299.502 142.736 302.991 142.736 cv
309.513 142.736 309.845 143.001 309.845 144.524 cv
309.845 146.254 310.197 148.531 308.133 148.531 cv
300.205 148.531 294.943 148.607 291.454 148.607 cv
.694118 .8 .878431 rgb
f
250.744 160.511 mo
228.924 160.511 li
227.979 160.511 227.212 159.745 227.212 158.799 cv
227.212 156.504 li
227.212 155.559 227.979 154.792 228.924 154.792 cv
250.744 154.792 li
251.69 154.792 252.456 155.559 252.456 156.504 cv
252.456 158.799 li
252.456 159.745 251.69 160.511 250.744 160.511 cv
f
262.761 160.587 mo
256.239 160.587 255.906 160.322 255.906 158.799 cv
255.906 157.069 255.555 154.792 257.618 154.792 cv
265.547 154.792 270.808 154.716 274.297 154.716 cv
280.818 154.716 281.151 154.981 281.151 156.504 cv
281.151 158.234 281.502 160.511 279.439 160.511 cv
271.512 160.511 266.25 160.587 262.761 160.587 cv
f
250.744 172.491 mo
228.924 172.491 li
227.979 172.491 227.212 171.725 227.212 170.779 cv
227.212 168.484 li
227.212 167.539 227.979 166.772 228.924 166.772 cv
250.744 166.772 li
251.69 166.772 252.456 167.539 252.456 168.484 cv
252.456 170.779 li
252.456 171.725 251.69 172.491 250.744 172.491 cv
f
234.062 184.547 mo
227.545 184.547 227.212 184.282 227.212 182.759 cv
227.212 181.029 226.861 178.752 228.924 178.752 cv
236.852 178.752 242.114 178.676 245.603 178.676 cv
252.124 178.676 252.456 178.942 252.456 180.464 cv
252.456 182.759 li
252.456 183.706 251.69 184.471 250.744 184.471 cv
242.813 184.471 237.551 184.547 234.062 184.547 cv
f
279.439 184.471 mo
257.618 184.471 li
256.673 184.471 255.906 183.706 255.906 182.759 cv
255.906 180.464 li
255.906 179.519 256.673 178.752 257.618 178.752 cv
279.439 178.752 li
280.384 178.752 281.151 179.519 281.151 180.464 cv
281.151 182.759 li
281.151 183.706 280.384 184.471 279.439 184.471 cv
f
291.451 184.547 mo
284.934 184.547 284.602 184.282 284.602 182.759 cv
284.602 181.029 284.249 178.752 286.314 178.752 cv
294.242 178.752 299.504 178.676 302.992 178.676 cv
309.513 178.676 309.845 178.942 309.845 180.464 cv
309.845 182.195 310.197 184.471 308.133 184.471 cv
300.202 184.471 294.94 184.547 291.451 184.547 cv
f
234.061 196.528 mo
227.544 196.528 227.212 196.262 227.212 194.74 cv
227.212 193.009 226.861 190.733 228.924 190.733 cv
250.744 190.733 li
251.69 190.733 252.456 191.5 252.456 192.445 cv
252.456 194.74 li
252.456 195.685 251.69 196.452 250.744 196.452 cv
242.813 196.452 237.55 196.528 234.061 196.528 cv
.454902 .411765 .407843 rgb
f
234.069 208.508 mo
227.545 208.508 227.212 208.243 227.212 206.72 cv
227.212 204.99 226.861 202.713 228.924 202.713 cv
236.855 202.713 242.118 202.637 245.607 202.637 cv
252.124 202.637 252.456 202.903 252.456 204.425 cv
252.456 206.72 li
252.456 207.666 251.69 208.432 250.744 208.432 cv
242.819 208.432 237.558 208.508 234.069 208.508 cv
f
234.069 220.489 mo
227.545 220.489 227.212 220.223 227.212 218.701 cv
227.212 216.97 226.861 214.693 228.924 214.693 cv
236.848 214.693 242.107 214.617 245.596 214.617 cv
252.122 214.617 252.456 214.882 252.456 216.406 cv
252.456 218.136 252.808 220.413 250.744 220.413 cv
242.819 220.413 237.558 220.489 234.069 220.489 cv
.694118 .8 .878431 rgb
f
262.763 220.489 mo
256.239 220.489 255.906 220.223 255.906 218.701 cv
255.906 216.97 255.555 214.693 257.618 214.693 cv
265.542 214.693 270.802 214.617 274.291 214.617 cv
280.816 214.617 281.151 214.882 281.151 216.406 cv
281.151 218.136 281.502 220.413 279.439 220.413 cv
271.513 220.413 266.253 220.489 262.763 220.489 cv
f
291.458 220.489 mo
284.934 220.489 284.602 220.223 284.602 218.701 cv
284.602 216.97 284.249 214.693 286.314 214.693 cv
294.238 214.693 299.497 214.617 302.986 214.617 cv
309.511 214.617 309.845 214.882 309.845 216.406 cv
309.845 218.136 310.197 220.413 308.133 220.413 cv
300.207 220.413 294.947 220.489 291.458 220.489 cv
f
234.072 232.469 mo
227.546 232.469 227.212 232.204 227.212 230.68 cv
227.212 228.951 226.861 226.673 228.924 226.673 cv
250.744 226.673 li
251.69 226.673 252.456 227.44 252.456 228.385 cv
252.456 230.68 li
252.456 231.627 251.69 232.393 250.744 232.393 cv
242.82 232.393 237.561 232.469 234.072 232.469 cv
f
279.439 232.393 mo
257.618 232.393 li
256.673 232.393 255.906 231.627 255.906 230.68 cv
255.906 228.385 li
255.906 227.44 256.673 226.673 257.618 226.673 cv
265.544 226.673 270.804 226.597 274.294 226.597 cv
280.818 226.597 281.151 226.863 281.151 228.385 cv
281.151 230.68 li
281.151 231.627 280.384 232.393 279.439 232.393 cv
.870588 .556863 .380392 rgb
f
234.061 244.449 mo
227.544 244.449 227.212 244.183 227.212 242.661 cv
227.212 240.93 226.861 238.654 228.924 238.654 cv
236.85 238.654 242.11 238.578 245.599 238.578 cv
252.123 238.578 252.456 238.843 252.456 240.366 cv
252.456 242.096 252.808 244.373 250.744 244.373 cv
242.813 244.373 237.55 244.449 234.061 244.449 cv
.694118 .8 .878431 rgb
f
262.756 244.449 mo
256.239 244.449 255.906 244.183 255.906 242.661 cv
255.906 240.93 255.555 238.654 257.618 238.654 cv
265.544 238.654 270.804 238.578 274.294 238.578 cv
280.818 238.578 281.151 238.843 281.151 240.366 cv
281.151 242.096 281.502 244.373 279.439 244.373 cv
271.508 244.373 266.245 244.449 262.756 244.449 cv
f
296.397 173.063 mo
294.661 173.063 293.828 172.885 293.828 171.745 cv
293.828 167.519 li
293.828 166.811 294.402 166.237 295.11 166.237 cv
299.336 166.237 li
300.044 166.237 300.617 166.811 300.617 167.519 cv
300.617 171.264 300.995 173.026 299.336 173.026 cv
298.165 173.026 297.187 173.063 296.397 173.063 cv
.454902 .411765 .407843 rgb
f
305.625 173.063 mo
303.888 173.063 303.056 172.885 303.056 171.745 cv
303.056 167.519 li
303.056 166.811 303.63 166.237 304.337 166.237 cv
308.564 166.237 li
309.272 166.237 309.845 166.811 309.845 167.519 cv
309.845 171.264 310.223 173.026 308.564 173.026 cv
307.392 173.026 306.415 173.063 305.625 173.063 cv
f
209.961 232.965 mo
208.222 232.965 207.389 232.787 207.389 231.646 cv
207.389 227.901 207.012 226.138 208.671 226.138 cv
209.841 226.138 210.819 226.101 211.608 226.101 cv
213.346 226.101 214.179 226.279 214.179 227.419 cv
214.179 231.166 214.556 232.928 212.898 232.928 cv
211.727 232.928 210.75 232.965 209.961 232.965 cv
f
219.188 232.965 mo
217.449 232.965 216.616 232.787 216.616 231.646 cv
216.616 227.419 li
216.616 226.712 217.191 226.138 217.898 226.138 cv
219.068 226.138 220.045 226.101 220.835 226.101 cv
222.573 226.101 223.405 226.279 223.405 227.419 cv
223.405 231.166 223.783 232.928 222.124 232.928 cv
220.954 232.928 219.978 232.965 219.188 232.965 cv
f
209.96 209.004 mo
208.222 209.004 207.389 208.826 207.389 207.686 cv
207.389 203.941 207.012 202.178 208.671 202.178 cv
209.843 202.178 210.821 202.141 211.612 202.141 cv
213.347 202.141 214.179 202.32 214.179 203.46 cv
214.179 207.205 214.556 208.967 212.898 208.967 cv
211.727 208.967 210.75 209.004 209.96 209.004 cv
f
219.187 209.004 mo
217.449 209.004 216.616 208.826 216.616 207.686 cv
216.616 203.941 216.239 202.178 217.898 202.178 cv
219.07 202.178 220.048 202.141 220.839 202.141 cv
222.574 202.141 223.405 202.32 223.405 203.46 cv
223.405 207.205 223.783 208.967 222.124 208.967 cv
220.954 208.967 219.977 209.004 219.187 209.004 cv
f
209.956 185.043 mo
208.221 185.043 207.389 184.865 207.389 183.725 cv
207.389 179.98 207.012 178.217 208.671 178.217 cv
209.842 178.217 210.82 178.18 211.61 178.18 cv
213.346 178.18 214.179 178.359 214.179 179.499 cv
214.179 183.245 214.556 185.006 212.898 185.006 cv
211.725 185.006 210.747 185.043 209.956 185.043 cv
f
219.184 185.043 mo
217.448 185.043 216.616 184.865 216.616 183.725 cv
216.616 179.98 216.239 178.217 217.898 178.217 cv
219.069 178.217 220.047 178.18 220.837 178.18 cv
222.573 178.18 223.405 178.359 223.405 179.499 cv
223.405 183.245 223.783 185.006 222.124 185.006 cv
220.952 185.006 219.974 185.043 219.184 185.043 cv
f
212.898 161.046 mo
208.671 161.046 li
207.963 161.046 207.389 160.473 207.389 159.765 cv
207.389 155.538 li
207.389 154.831 207.963 154.257 208.671 154.257 cv
212.898 154.257 li
213.605 154.257 214.179 154.831 214.179 155.538 cv
214.179 159.765 li
214.179 160.473 213.605 161.046 212.898 161.046 cv
f
222.124 161.046 mo
217.898 161.046 li
217.191 161.046 216.616 160.473 216.616 159.765 cv
216.616 155.538 li
216.616 154.831 217.191 154.257 217.898 154.257 cv
222.124 154.257 li
222.832 154.257 223.405 154.831 223.405 155.538 cv
223.405 159.765 li
223.405 160.473 222.832 161.046 222.124 161.046 cv
f
310.441 239.079 mo
307.367 239.079 306.45 238.848 306.45 237.376 cv
306.45 234.513 306.026 232.242 308.106 232.242 cv
310.529 232.242 312.385 232.193 313.79 232.193 cv
316.864 232.193 317.78 232.424 317.78 233.897 cv
317.78 236.759 318.205 239.031 316.125 239.031 cv
313.702 239.031 311.846 239.079 310.441 239.079 cv
f
166.455 258.907 mo
144.256 257.481 127.881 258.172 116.264 258.862 cv
98.2873 259.931 91.7063 260.999 92.5748 254.225 cv
93.0338 250.642 93.488 245.84 93.488 240.862 cv
93.488 233.331 99.885 227.344 107.403 227.787 cv
128.294 229.017 144.037 228.379 155.397 227.74 cv
173.988 226.696 180.842 225.652 179.321 232.795 cv
178.1 238.529 177.175 244.049 177.217 248.83 cv
177.269 254.66 172.273 259.281 166.455 258.907 cv
1 1 1 rgb
f
106.609 228.33 mo
103.395 228.33 100.36 229.535 97.9924 231.767 cv
95.4533 234.162 94.0548 237.391 94.0548 240.862 cv
94.0548 246.044 93.5554 251.029 93.1369 254.297 cv
92.9391 255.84 93.1515 256.883 93.8054 257.582 cv
95.6837 259.585 101.717 259.205 111.711 258.576 cv
123.457 257.835 141.209 256.718 166.491 258.341 cv
169.142 258.515 171.769 257.561 173.701 255.733 cv
175.626 253.912 176.674 251.461 176.651 248.834 cv
176.605 243.539 177.758 237.417 178.767 232.678 cv
179.122 231.01 178.991 229.888 178.353 229.147 cv
176.558 227.058 170.256 227.432 159.815 228.05 cv
148.391 228.727 131.128 229.752 107.37 228.352 cv
107.115 228.337 106.861 228.33 106.609 228.33 cv
100.776 260.221 mo
96.7463 260.221 94.2956 259.761 92.9787 258.356 cv
92.0759 257.393 91.7687 256.057 92.0129 254.154 cv
92.4274 250.917 92.9215 245.985 92.9215 240.862 cv
92.9215 237.076 94.4465 233.553 97.215 230.943 cv
99.9582 228.356 103.684 227.004 107.436 227.221 cv
131.128 228.615 148.351 227.594 159.747 226.919 cv
171.268 226.236 177.051 225.893 179.212 228.409 cv
180.099 229.44 180.31 230.872 179.875 232.914 cv
178.878 237.598 177.738 243.638 177.784 248.825 cv
177.809 251.77 176.636 254.516 174.479 256.557 cv
172.32 258.6 169.376 259.66 166.419 259.472 cv
141.207 257.852 123.5 258.969 111.782 259.707 cv
107.228 259.994 103.611 260.221 100.776 260.221 cv
.933333 .894118 .85098 rgb
f
143.079 247.02 mo
142.652 247.241 141.711 247.461 140.519 247.461 cv
137.37 247.461 135.457 245.49 135.457 242.474 cv
135.457 239.208 137.723 237.235 140.754 237.235 cv
141.945 237.235 142.799 237.486 143.167 237.677 cv
142.769 239.119 li
142.299 238.913 141.651 238.737 140.827 238.737 cv
138.812 238.737 137.355 240.001 137.355 242.385 cv
137.355 244.563 138.635 245.96 140.813 245.96 cv
141.549 245.96 142.313 245.813 142.784 245.593 cv
143.079 247.02 li
cp
.266667 .258824 .266667 rgb
f
148.049 243.43 mo
148.3 241.561 li
146.872 241.561 li
146.622 243.43 li
148.049 243.43 li
cp
144.945 247.314 mo
145.328 244.578 li
144.121 244.578 li
144.121 243.43 li
145.504 243.43 li
145.769 241.561 li
144.503 241.561 li
144.503 240.428 li
145.931 240.428 li
146.313 237.751 li
147.417 237.751 li
147.049 240.428 li
148.476 240.428 li
148.859 237.751 li
149.963 237.751 li
149.594 240.428 li
150.786 240.428 li
150.786 241.561 li
149.418 241.561 li
149.168 243.43 li
150.404 243.43 li
150.404 244.563 li
148.976 244.563 li
148.609 247.314 li
147.475 247.314 li
147.858 244.563 li
146.446 244.563 li
146.063 247.314 li
144.945 247.314 li
cp
f
113.036 241.319 mo
106.512 241.319 106.179 241.053 106.179 239.531 cv
106.179 237.8 105.828 235.523 107.891 235.523 cv
115.817 235.523 121.078 235.447 124.567 235.447 cv
131.091 235.447 131.424 235.712 131.424 237.235 cv
131.424 238.965 131.775 241.243 129.711 241.243 cv
121.786 241.243 116.525 241.319 113.036 241.319 cv
.870588 .556863 .380392 rgb
f
113.036 250.466 mo
106.512 250.466 106.179 250.201 106.179 248.678 cv
106.179 246.948 105.828 244.67 107.891 244.67 cv
115.815 244.67 121.075 244.595 124.564 244.595 cv
131.089 244.595 131.424 244.86 131.424 246.383 cv
131.424 248.113 131.775 250.39 129.711 250.39 cv
121.786 250.39 116.525 250.466 113.036 250.466 cv
.694118 .8 .878431 rgb
f
160.714 245.663 mo
157.64 245.663 156.723 245.432 156.723 243.959 cv
156.723 241.097 156.298 238.826 158.379 238.826 cv
160.802 238.826 162.658 238.777 164.063 238.777 cv
167.137 238.777 168.053 239.008 168.053 240.481 cv
168.053 243.343 168.479 245.615 166.398 245.615 cv
163.974 245.615 162.119 245.663 160.714 245.663 cv
.454902 .411765 .407843 rgb
f
101.192 241.276 mo
99.4115 241.276 98.6901 241.113 98.6901 240.066 cv
98.6901 237.154 98.3601 235.523 99.8664 235.523 cv
101.143 235.523 102.17 235.489 102.978 235.489 cv
104.758 235.489 105.48 235.653 105.48 236.7 cv
105.48 239.612 105.809 241.243 104.303 241.243 cv
103.027 241.243 102 241.276 101.192 241.276 cv
f
101.192 250.424 mo
99.4114 250.424 98.6901 250.26 98.6901 249.213 cv
98.6901 246.301 98.3601 244.67 99.8664 244.67 cv
101.143 244.67 102.17 244.637 102.978 244.637 cv
104.758 244.637 105.48 244.8 105.48 245.847 cv
105.48 248.759 105.809 250.39 104.303 250.39 cv
103.027 250.39 102 250.424 101.192 250.424 cv
f
198.818 359.538 mo
171.476 359.538 144.137 355.956 144.137 348.79 cv
144.137 341.626 171.475 338.043 198.811 338.043 cv
226.153 338.043 253.493 341.626 253.493 348.79 cv
253.493 355.955 226.154 359.538 198.818 359.538 cv
.878431 .87451 .917647 rgb
f
191.044 110.334 mo
191.122 116.714 193.236 121.446 181.5 126.968 cv
188.486 136.579 195.365 140.13 195.365 140.13 cv
195.365 140.13 210.083 133.504 215.14 129.121 cv
208.918 124.594 204.397 124.05 204.512 117.981 cv
204.54 116.523 204.472 110.567 204.433 110.452 cv
191.044 110.334 li
cp
1 .658824 .529412 rgb
f
202.424 112.568 mo
205.756 111.655 211.526 102.315 210.129 90.0181 cv
209.161 81.4951 191.383 74.8008 188.816 89.9375 cv
187.617 98.6035 180.653 98.7612 186.889 101.37 cv
186.889 101.37 185.426 109.13 191.734 111.466 cv
189.688 110.636 197.011 114.051 202.424 112.568 cv
cp
f
172.07 337.623 mo
174.212 339.272 177.51 338.902 180.531 337.16 cv
183.611 322.321 li
172.283 322.591 li
172.07 337.623 li
cp
.988235 .65098 .521569 rgb
f
227.337 337.623 mo
225.195 339.272 221.897 338.902 218.875 337.16 cv
215.796 322.321 li
227.123 322.591 li
227.337 337.623 li
cp
f
219.337 189.101 mo
229.654 229.873 231.301 331.774 229.188 332.278 cv
227.848 332.598 216.909 334.54 216.435 332.362 cv
205.496 282.241 197.594 233.779 197.594 233.779 cv
193.093 283.74 185.128 332.436 182.148 332.844 cv
179.46 333.211 170.022 332.204 169.876 330.129 cv
169.097 319.071 167.49 211.989 174.353 188.607 cv
219.337 189.101 li
cp
.231373 .192157 .290196 rgb
f
197.514 231.522 mo
197.874 233.734 li
197.953 234.218 205.9 282.761 216.711 332.3 cv
216.738 332.427 216.83 332.538 216.992 332.639 cv
218.862 333.814 227.272 332.427 229.052 332.019 cv
229.904 330.441 230.088 306.018 228.592 274.771 cv
227.537 252.755 224.906 212.449 219.115 189.382 cv
174.565 188.892 li
167.863 212.376 169.3 317.92 170.158 330.109 cv
170.171 330.278 170.29 330.455 170.514 330.637 cv
172.319 332.103 179.695 332.894 182.11 332.564 cv
182.886 332.458 185.215 325.869 189.021 301.849 cv
192.197 281.8 195.22 256.98 197.312 233.753 cv
197.514 231.522 li
cp
219.953 333.664 mo
218.529 333.664 217.324 333.517 216.691 333.119 cv
216.398 332.935 216.219 332.701 216.157 332.421 cv
206.643 288.825 199.347 246.001 197.676 236.003 cv
195.592 258.601 192.659 282.509 189.58 301.939 cv
187.351 316.008 184.258 332.841 182.186 333.125 cv
179.908 333.437 172.198 332.736 170.157 331.077 cv
169.806 330.792 169.617 330.48 169.594 330.149 cv
168.732 317.913 167.295 211.651 174.081 188.527 cv
174.141 188.322 li
174.356 188.324 li
219.558 188.821 li
219.612 189.032 li
225.436 212.05 228.084 252.452 229.145 274.485 cv
230.613 304.991 230.551 330.637 229.518 332.344 cv
229.448 332.458 229.36 332.528 229.254 332.553 cv
228.427 332.751 223.507 333.664 219.953 333.664 cv
cp
.380392 .462745 .564706 rgb
f
209.152 196.205 mo
209.364 196.205 209.281 188.019 209.281 188.212 cv
209.281 187.987 207.753 188.082 207.953 188.082 cv
207.74 188.082 207.823 196.266 207.823 196.074 cv
207.823 196.299 209.353 196.205 209.152 196.205 cv
cp
.231373 .192157 .290196 rgb
f
182.852 195.641 mo
183.065 195.641 182.983 187.457 182.983 187.649 cv
182.983 187.423 181.453 187.518 181.654 187.518 cv
181.441 187.518 181.524 195.704 181.524 195.511 cv
181.524 195.736 183.053 195.641 182.852 195.641 cv
cp
f
205.183 120.353 mo
200.194 123.154 193.933 122.949 189.924 120.929 cv
180.709 123.737 171.598 125.265 171.792 134.353 cv
172.195 153.236 170.886 187.646 174.353 188.607 cv
190.083 192.966 218.671 191.607 221.08 188.607 cv
224.347 184.541 223.07 158.151 221.871 141.19 cv
221.206 131.773 214.915 123.215 205.183 120.353 cv
cp
1 1 .972549 rgb
f
189.899 121.233 mo
188.933 121.526 187.969 121.806 187.018 122.082 cv
178.909 124.433 171.907 126.463 172.075 134.347 cv
172.182 139.32 172.17 145.282 172.156 151.595 cv
172.123 167.673 172.082 187.683 174.428 188.334 cv
190.468 192.78 218.672 191.154 220.86 188.429 cv
223.269 185.43 223.528 168.661 221.589 141.21 cv
220.902 131.487 214.481 123.433 205.216 120.658 cv
199.867 123.607 193.568 123.034 189.899 121.233 cv
cp
200.2 191.682 mo
191.322 191.682 181.434 190.864 174.277 188.879 cv
171.707 188.167 171.545 173.654 171.59 151.594 cv
171.603 145.285 171.615 139.325 171.509 134.359 cv
171.332 126.04 178.874 123.853 186.86 121.538 cv
187.845 121.252 188.842 120.962 189.841 120.658 cv
189.95 120.625 li
190.051 120.676 li
193.6 122.463 199.804 123.048 205.043 120.105 cv
205.148 120.047 li
205.262 120.081 li
214.67 122.847 221.458 131.323 222.154 141.17 cv
223.532 160.691 224.504 184.797 221.301 188.785 cv
219.905 190.522 210.769 191.682 200.2 191.682 cv
cp
.937255 .898039 .854902 rgb
f
211.78 116.876 mo
210.121 116.876 207.783 116.541 204.532 115.865 cv
204.379 115.834 204.28 115.683 204.313 115.53 cv
204.344 115.376 204.496 115.279 204.648 115.311 cv
210.558 116.539 213.381 116.635 214.4 115.646 cv
215.213 114.856 214.923 113.232 214.523 110.986 cv
214.092 108.577 213.503 105.278 214.092 101.437 cv
216.019 88.8633 209.992 83.9756 206.229 82.1812 cv
200.802 79.5933 194.199 80.4644 191.922 82.9707 cv
191.817 83.0864 191.637 83.0947 191.522 82.9902 cv
191.405 82.8848 191.397 82.7056 191.503 82.5899 cv
193.915 79.937 200.83 78.979 206.472 81.6694 cv
210.378 83.5317 216.634 88.5869 214.653 101.523 cv
214.078 105.271 214.633 108.385 215.08 110.886 cv
215.512 113.305 215.823 115.052 214.794 116.052 cv
214.231 116.601 213.284 116.876 211.78 116.876 cv
cp
.188235 .196078 .243137 rgb
f
197.828 112.573 mo
197.684 112.533 li
193.586 110.104 193.263 104.959 193.05 101.554 cv
192.98 100.428 192.919 99.4556 192.735 98.9033 cv
192.079 96.9365 190.273 95.6558 188.526 94.4175 cv
187.232 93.4995 186.009 92.6328 185.415 91.5557 cv
184.647 90.1646 184.493 87.5664 185.718 85.4907 cv
186.525 84.125 188.219 82.4971 191.712 82.4971 cv
191.869 82.4971 191.995 82.6235 191.995 82.7803 cv
191.995 82.937 191.869 83.0635 191.712 83.0635 cv
188.487 83.0635 186.938 84.5405 186.207 85.7788 cv
185.088 87.6733 185.219 90.0283 185.91 91.2817 cv
186.443 92.2456 187.614 93.0762 188.854 93.9551 cv
190.591 95.1865 192.558 96.5816 193.272 98.7241 cv
193.48 99.3467 193.54 100.305 193.616 101.519 cv
193.821 104.804 194.133 109.77 197.973 112.045 cv
198.108 112.125 198.153 112.299 198.071 112.434 cv
198.02 112.523 197.925 112.573 197.828 112.573 cv
cp
f
193.404 81.3618 mo
201.085 78.6387 210.699 83.2666 212.438 89.2817 cv
213.776 93.9107 215.396 111.979 209.52 108.268 cv
203.15 104.244 199.519 93.4844 195.334 87.6172 cv
194.604 86.5933 188.186 83.2124 193.404 81.3618 cv
cp
f
200.498 86.0225 mo
203.556 88.9019 203.014 90.4512 203.841 93.2183 cv
205.795 99.7564 213.825 102.25 214.276 112.743 cv
214.408 115.847 212.889 116.549 210.006 115.901 cv
198.368 113.286 194.059 114.072 194.271 105.691 cv
194.558 94.3086 191.279 96.1519 187.735 92.6108 cv
181.945 86.8276 190.943 77.022 200.498 86.0225 cv
cp
f
191.712 92.2979 mo
191.538 92.2383 li
188.449 89.8433 188.301 87.8208 188.721 86.5454 cv
189.192 85.1191 190.597 84.1367 191.613 84.1133 cv
191.779 84.1113 191.9 84.2339 191.904 84.3901 cv
191.907 84.5469 191.783 84.6763 191.627 84.6802 cv
190.914 84.6958 189.67 85.481 189.26 86.7227 cv
188.897 87.8247 189.057 89.5982 191.886 91.7905 cv
192.009 91.8862 192.032 92.0645 191.936 92.188 cv
191.712 92.2979 li
cp
.207843 .231373 .290196 rgb
f
208.099 85.8843 mo
207.904 85.8071 li
202.741 80.936 197.938 81.793 194.329 83.083 cv
194.181 83.1362 194.02 83.0586 193.967 82.9116 cv
193.915 82.7642 193.991 82.6021 194.139 82.5498 cv
197.606 81.3106 202.847 80.2559 208.293 85.395 cv
208.406 85.502 208.412 85.6816 208.305 85.7954 cv
208.099 85.8843 li
cp
f
195.207 89.79 mo
195.041 89.7852 194.919 89.6543 194.924 89.4981 cv
194.99 87.3516 194.119 85.169 192.593 83.6597 cv
192.482 83.5498 192.481 83.3701 192.591 83.2588 cv
192.7 83.1475 192.88 83.1465 192.991 83.2568 cv
194.628 84.8745 195.562 87.2149 195.49 89.5156 cv
195.486 89.669 195.36 89.79 195.207 89.79 cv
cp
f
202.542 86.7656 mo
202.377 86.7134 li
199.634 84.7607 197.921 84.5147 195.328 85.7031 cv
195.188 85.7671 195.019 85.7061 194.953 85.5635 cv
194.889 85.4214 194.951 85.2534 195.093 85.188 cv
197.874 83.9116 199.796 84.1807 202.706 86.252 cv
202.833 86.3428 202.863 86.5195 202.773 86.647 cv
202.542 86.7656 li
cp
f
202.911 105.512 mo
202.819 105.496 li
202.671 105.445 202.593 105.284 202.644 105.136 cv
204.413 100.004 204.429 95.8682 202.693 92.8423 cv
200.755 89.4668 197.34 88.7524 197.196 88.7236 cv
197.043 88.6934 196.944 88.5444 196.974 88.3906 cv
197.004 88.2368 197.155 88.1367 197.307 88.1685 cv
197.461 88.1992 201.119 88.9639 203.184 92.5606 cv
205.005 95.7344 205.004 100.027 203.179 105.321 cv
203.139 105.438 203.029 105.512 202.911 105.512 cv
cp
f
211 105.185 mo
210.779 105.078 li
207.383 100.793 208.479 97.0747 209.359 94.0874 cv
209.95 92.0796 210.461 90.3452 209.472 88.9356 cv
209.382 88.8076 209.413 88.6309 209.541 88.541 cv
209.668 88.4512 209.845 88.4819 209.936 88.6104 cv
211.082 90.2432 210.535 92.0986 209.903 94.2476 cv
209.015 97.2583 208.01 100.671 211.222 104.726 cv
211.32 104.848 211.299 105.026 211.176 105.124 cv
211 105.185 li
cp
f
205.853 111.867 mo
205.775 111.855 li
201.411 110.592 li
196.891 109.284 197.189 107.291 197.534 104.984 cv
197.866 102.77 198.279 100.013 194.724 96.6074 cv
194.612 96.499 194.608 96.3198 194.715 96.207 cv
194.824 96.0942 195.003 96.0899 195.115 96.1978 cv
198.884 99.8071 198.446 102.724 198.095 105.068 cv
197.751 107.362 197.524 108.877 201.568 110.048 cv
205.932 111.311 li
206.082 111.355 206.168 111.512 206.125 111.662 cv
206.089 111.786 205.976 111.867 205.853 111.867 cv
cp
f
210.939 115.425 mo
210.409 115.425 209.838 115.37 209.261 115.298 cv
209.107 115.278 208.996 115.137 209.016 114.982 cv
209.035 114.826 209.179 114.718 209.332 114.736 cv
210.662 114.903 212.254 115.002 212.743 114.279 cv
213.092 113.765 212.883 112.784 212.142 111.442 cv
212.066 111.305 212.115 111.133 212.252 111.057 cv
212.39 110.982 212.562 111.031 212.637 111.168 cv
213.514 112.753 213.701 113.875 213.213 114.597 cv
212.783 115.23 211.938 115.425 210.939 115.425 cv
cp
f
208.587 109.677 mo
208.436 109.677 208.31 109.558 208.304 109.405 cv
208.297 109.249 208.418 109.117 208.575 109.11 cv
210.051 109.049 211.456 108.167 212.155 106.865 cv
212.23 106.727 212.403 106.676 212.538 106.749 cv
212.677 106.823 212.729 106.995 212.654 107.132 cv
211.863 108.608 210.271 109.607 208.599 109.676 cv
208.587 109.677 li
cp
f
186.147 215.525 mo
186.651 217.182 187.983 218.457 189.662 218.882 cv
216.97 225.802 244.133 221.976 235.972 210.968 cv
226.167 197.743 230.15 173.659 227.909 159.202 cv
222.644 125.231 205.267 119.395 205.267 119.395 cv
198.667 129.662 187.03 121.84 187.03 121.84 cv
182.644 123.188 171.462 126.928 171.462 126.928 cv
166.1 147.338 182.272 202.777 186.147 215.525 cv
cp
.380392 .462745 .564706 rgb
f
186.418 215.442 mo
186.89 216.997 188.16 218.209 189.732 218.608 cv
210.48 223.866 232.334 223.023 236.501 216.807 cv
237.587 215.186 237.332 213.279 235.744 211.136 cv
228.961 201.987 228.724 187.66 228.515 175.019 cv
228.419 169.229 228.329 163.76 227.629 159.245 cv
222.762 127.842 207.33 120.544 205.378 119.742 cv
203.562 122.479 201.213 124.162 198.395 124.745 cv
193.059 125.848 187.842 122.698 186.986 122.15 cv
182.847 123.428 173.014 126.708 171.697 127.148 cv
166.432 147.764 183.029 204.295 186.418 215.442 cv
cp
216.127 222.6 mo
208.112 222.6 198.739 221.475 189.592 219.157 cv
187.83 218.71 186.405 217.35 185.876 215.607 cv
182.472 204.408 165.766 147.496 171.188 126.856 cv
171.226 126.708 li
171.372 126.66 li
171.484 126.622 182.608 122.903 186.946 121.569 cv
187.076 121.53 li
187.187 121.605 li
187.244 121.643 192.81 125.325 198.283 124.189 cv
201.011 123.625 203.28 121.96 205.029 119.242 cv
205.148 119.056 li
205.357 119.126 li
205.532 119.185 222.958 125.408 228.189 159.158 cv
228.895 163.712 228.986 169.2 229.081 175.01 cv
229.289 187.565 229.524 201.795 236.199 210.799 cv
237.945 213.155 238.205 215.282 236.971 217.123 cv
234.557 220.725 226.473 222.6 216.127 222.6 cv
cp
.231373 .192157 .290196 rgb
f
223.554 222.27 mo
223.341 222.174 li
213.586 211.111 213.89 199.078 214.241 185.146 cv
214.66 168.521 215.182 147.832 198.208 121.591 cv
198.124 121.459 198.161 121.284 198.292 121.199 cv
198.423 121.115 198.599 121.151 198.685 121.283 cv
215.753 147.671 215.229 168.458 214.808 185.161 cv
214.459 198.973 214.158 210.903 223.766 221.799 cv
223.869 221.917 223.859 222.096 223.741 222.199 cv
223.554 222.27 li
cp
f
229.427 221.255 mo
229.201 221.144 li
222.663 212.528 221.519 206.16 220.762 201.946 cv
219.974 197.557 219.614 195.554 214.393 195.136 cv
214.237 195.125 214.12 194.988 214.133 194.832 cv
214.146 194.675 214.285 194.562 214.438 194.572 cv
220.095 195.024 220.529 197.447 221.32 201.846 cv
222.068 206.006 223.196 212.293 229.653 220.801 cv
229.747 220.926 229.723 221.104 229.598 221.199 cv
229.427 221.255 li
cp
f
203.48 114.662 mo
204.151 114.249 205.003 114.362 205.341 115.074 cv
207.15 118.876 208.565 121.695 202.646 124.063 cv
190.879 128.771 192.704 127.046 187.03 121.84 cv
188.742 121.294 192.042 121.69 203.48 114.662 cv
cp
.219608 .231373 .309804 rgb
f
187.601 121.985 mo
188.421 122.759 189.068 123.44 189.647 124.052 cv
192.636 127.205 193.022 127.608 202.54 123.8 cv
204.711 122.932 205.984 121.955 206.43 120.814 cv
207.029 119.281 206.154 117.442 205.141 115.313 cv
205.086 115.195 li
204.978 114.969 204.799 114.813 204.568 114.745 cv
204.279 114.66 203.928 114.719 203.628 114.903 cv
194.147 120.729 190.254 121.473 188.163 121.874 cv
187.956 121.913 187.77 121.949 187.601 121.985 cv
cp
193.7 127.087 mo
191.873 127.087 190.868 126.163 189.236 124.441 cv
188.576 123.746 187.828 122.957 186.838 122.049 cv
186.478 121.718 li
186.944 121.57 li
187.26 121.47 187.611 121.402 188.057 121.317 cv
190.112 120.923 193.939 120.191 203.331 114.421 cv
203.773 114.149 204.281 114.071 204.729 114.202 cv
205.112 114.315 205.421 114.582 205.597 114.952 cv
205.653 115.069 li
206.723 117.317 207.647 119.259 206.958 121.02 cv
206.444 122.333 205.108 123.383 202.75 124.327 cv
198.053 126.206 195.485 127.087 193.7 127.087 cv
cp
.258824 .266667 .34902 rgb
f
94.0129 159.884 mo
90.5949 161.347 96.55 164.317 105.325 160.063 cv
103.834 159.269 102.827 159.649 101.318 159.835 cv
98.5119 160.18 95.1926 159.379 94.0129 159.884 cv
cp
.937255 .47451 .341176 rgb
f
85.4889 169.851 mo
85.0705 170.091 84.4001 169.832 84.2341 169.378 cv
83.696 167.911 91.6989 164.367 99.6476 164.37 cv
95.3332 166.352 89.4455 167.585 85.4889 169.851 cv
cp
.952941 .623529 .517647 rgb
f
110.205 157.978 mo
120.987 160.71 li
116.688 170.413 li
109.304 164.652 li
107.872 163.563 109.198 163.776 85.9836 167.277 cv
84.5729 167.49 84.1364 166.502 85.3635 165.917 cv
87.5436 164.876 91.0163 163.739 93.4074 164.084 cv
91.8093 163.77 87.5134 164.672 87.6027 163.453 cv
87.7004 162.123 94.7311 162.286 96.9762 161.706 cv
99.6252 161.02 106.3 156.181 110.205 157.978 cv
cp
1 .658824 .529412 rgb
f
144.996 167.766 mo
115.182 157.271 li
113.397 156.643 110.703 164.577 110.126 167.192 cv
109.446 170.267 147.125 191.642 154.387 190.055 cv
162.852 188.206 173.22 165.094 177.701 157.182 cv
180.781 151.741 181.472 123.846 171.462 126.928 cv
168.67 127.788 151.869 158.991 147.737 166.704 cv
147.21 167.687 146.048 168.136 144.996 167.766 cv
cp
.380392 .462745 .564706 rgb
f
114.976 157.519 mo
114.893 157.519 114.803 157.547 114.703 157.603 cv
113.097 158.496 110.933 164.852 110.403 167.253 cv
110.395 167.284 110.361 167.577 111.206 168.424 cv
116.444 173.674 147.852 191.197 154.327 189.778 cv
161.133 188.292 169.495 172.215 174.492 162.61 cv
175.646 160.392 176.643 158.476 177.454 157.042 cv
179.896 152.73 180.667 134.312 176.136 128.675 cv
174.9 127.139 173.356 126.641 171.545 127.199 cv
169.803 127.735 160.996 142.553 147.987 166.838 cv
147.391 167.95 146.093 168.453 144.902 168.033 cv
115.088 157.538 li
114.976 157.519 li
cp
153.503 190.421 mo
145.131 190.422 116.001 174.032 110.805 168.824 cv
110.062 168.08 109.758 167.542 109.849 167.131 cv
110.368 164.783 112.562 158.145 114.428 157.107 cv
114.721 156.944 115.007 156.909 115.276 157.003 cv
145.09 167.498 li
146.016 167.824 147.025 167.434 147.487 166.57 cv
155.288 152.01 168.764 127.462 171.378 126.657 cv
173.432 126.026 175.182 126.584 176.578 128.32 cv
181.331 134.233 180.509 152.797 177.948 157.321 cv
177.141 158.746 176.146 160.658 174.994 162.872 cv
169.626 173.192 161.513 188.789 154.448 190.332 cv
154.172 190.392 153.855 190.421 153.503 190.421 cv
cp
.231373 .192157 .290196 rgb
f
216.124 346.584 mo
215.832 351.673 222.868 352.173 228.536 351.102 cv
231.021 350.633 232.567 348.153 231.869 345.722 cv
230.521 341.024 228.081 334.956 224.511 334.569 cv
215.386 333.58 216.554 339.111 216.124 346.584 cv
cp
.317647 .262745 .258824 rgb
f
222.535 334.71 mo
220.657 334.71 219.324 335.097 218.41 335.891 cv
216.695 337.383 216.607 340.23 216.494 343.833 cv
216.466 344.717 216.438 345.642 216.382 346.599 cv
216.31 347.862 216.715 348.889 217.586 349.655 cv
219.833 351.629 224.692 351.566 228.488 350.848 cv
229.608 350.637 230.59 349.963 231.184 349 cv
231.78 348.03 231.937 346.892 231.621 345.793 cv
230.493 341.864 228.065 335.213 224.484 334.826 cv
223.777 334.75 223.129 334.71 222.535 334.71 cv
cp
223.83 351.819 mo
221.216 351.819 218.723 351.341 217.245 350.043 cv
216.248 349.167 215.784 347.999 215.866 346.569 cv
215.921 345.618 215.949 344.697 215.978 343.818 cv
216.094 340.087 216.186 337.142 218.071 335.501 cv
219.391 334.355 221.446 333.978 224.538 334.312 cv
228.227 334.711 230.695 340.699 232.117 345.651 cv
232.474 346.89 232.298 348.176 231.624 349.271 cv
230.954 350.358 229.846 351.118 228.585 351.356 cv
227.093 351.638 225.439 351.819 223.83 351.819 cv
cp
.27451 .235294 .227451 rgb
f
182.692 346.591 mo
182.979 351.681 175.942 352.174 170.275 351.097 cv
167.791 350.625 166.247 348.144 166.947 345.714 cv
168.301 341.018 170.746 334.951 174.317 334.568 cv
183.443 333.588 182.27 339.119 182.692 346.591 cv
cp
.317647 .262745 .258824 rgb
f
176.279 334.711 mo
175.689 334.711 175.046 334.75 174.345 334.825 cv
170.762 335.209 168.328 341.858 167.196 345.786 cv
166.88 346.884 167.033 348.022 167.63 348.993 cv
168.222 349.957 169.204 350.631 170.323 350.843 cv
174.12 351.565 178.978 351.633 181.227 349.662 cv
182.099 348.897 182.505 347.869 182.434 346.606 cv
182.38 345.65 182.351 344.724 182.325 343.84 cv
182.216 340.237 182.13 337.39 180.416 335.896 cv
179.501 335.099 178.163 334.711 176.279 334.711 cv
cp
175.003 351.819 mo
173.387 351.819 171.725 351.636 170.227 351.351 cv
168.965 351.112 167.858 350.351 167.19 349.263 cv
166.516 348.167 166.342 346.882 166.699 345.643 cv
168.126 340.692 170.601 334.707 174.289 334.311 cv
177.383 333.978 179.438 334.359 180.755 335.507 cv
182.639 337.149 182.729 340.095 182.841 343.825 cv
182.868 344.705 182.896 345.625 182.949 346.578 cv
183.03 348.006 182.566 349.175 181.568 350.049 cv
180.093 351.342 177.609 351.819 175.003 351.819 cv
cp
.27451 .235294 .227451 rgb
f
196.425 193.878 mo
195.763 190.474 li
195.623 189.758 180.942 192.198 181.206 193.459 cv
181.748 196.052 li
181.887 196.722 196.671 195.145 196.425 193.878 cv
cp
.219608 .231373 .309804 rgb
f
182.002 195.884 mo
183.555 196.38 195.455 194.709 196.138 193.888 cv
195.507 190.643 li
193.924 190.208 182.112 192.551 181.491 193.44 cv
182.002 195.884 li
cp
182.922 196.499 mo
181.551 196.499 181.508 196.291 181.47 196.111 cv
180.928 193.516 li
180.901 193.387 180.918 193.19 181.152 192.983 cv
182.568 191.728 194.372 189.661 195.757 190.13 cv
195.969 190.203 196.026 190.342 196.041 190.42 cv
196.703 193.825 li
196.796 194.303 196.286 194.738 193.495 195.301 cv
191.518 195.701 188.667 196.09 186.056 196.32 cv
184.587 196.449 183.594 196.499 182.922 196.499 cv
cp
.258824 .266667 .34902 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 25.0.0
%%For: (Tom) ()
%%Title: (Set of programmers_02-02.eps)
%%CreationDate: 4/24/2021 8:01 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9=Qe+!81^97&L&h"Gd$'r4k2tk\*Q*i\2M1Ln-c-i2T&'o0DB1B0YB2=_uJbne_g12C3RT2-gBf%WP<c4.Bq9nq>q;::u
%j&i9L6e>4pgI>r*f)GL&bfn9.O^DmAQ8'E7L:5m^fTqH_oo-_sNXo^2Y.=>g7QK3OqPF$s[@Ho*[InR6>cfTUepi"Be=Ljn^Nc`%
%I\BU;O]j8[fir]5FiV/IaqsuXEjb,];cZ@4TRK0;T@VpLGQE7?\:(V\"OOD\YJ];Vh)+,dm5;:EJC:(#%nHVA^/hF`omF=BBc`bH
%mTAK!a*tu@5JYI.;[iZL_2kQ)s2o*klCuU(e-\Cjk>V/5L"&Bl+Z4SgJrU]HdGuD>NB&.)pp8'2s&$,R:\^?UoTUNq3BZ*45.G96
%BdprQT=K?"[<-q\3>s/@nAHt\$=;O9(,F.^11k9`S+oeG>L4A"5YWh@ZjD\GFp<&GT4FFI_>a2As'n(^de@d2<Ut.;>!L=4#Q->7
%(ojH)n55t==&2Kb3Y75`bS;\]/*Hg3$nZdQX5FRg(&[96g#BrN?Mel,c>oV0*!"(hHeE<OGJ0V4ar?P8*)uja8bn;LC6S9..6XGI
%Qe<g")Bd"fDPXd2rR_ScFjMG>;na++K's!%DBj'05mS"$q<NEBRCStNQ=3A\gofd\Oa,SBjbU\8eJUmQcOKl;_Zf,eFh\WLTCIj4
%4[m`*bhb't]iiL[Q]&q=)Lbro&MJ_-(WtA#fB<V@#-V]>,VB50fIt,Eq%CF:TE";:hjfVB63D\lY*L#lS^LO6TE!0<k/s$>lHIT*
%b>mJ9/p2./'u%nik"#eW-WMf-mssk8RuE];bkH?*i*#_Oi`CAj^'=W2o/p\7(lRS]!kMP2mMF"\ji*s"5ArXe``<(nr:f.>'K$5)
%hPGeo;dWfRO/o,,AhFT.ld/kf2TJ%pHM1r0Ip)*<^OfPXW_FN#&fr*M5X[2?kh"_co?MK^:rm!F]uj&5Rp)jNC,`,UEk)aq^<Q+T
%2sP>R'0b*_;]s-*<PATZ-?\+bfDVY?Ej:5F<9j7uWusB:H/&L_>.mf-O1,Tp[umC"0+26W0-CU0R0n4e6aiGu*/(-n-1&>d4T^'j
%OTOm?Gc"7tr/':IVqUeH5Mi5CNjD-AG(%;Y$N#tD$1((lX5K=b[IEkKC\1r_EWPKAgcp^`j[-[^N/"Au%_ZU?T.TiY5APDVLJ8MI
%6#*;cFqG0c[@CE=eEZ->1,GFQ]!g6O]_Dt3b/NWU2_P*;N!mofY.:NmF(!Krlg#P)V1.JuQLSt/+'h)q'Y8abcN3-flX$h/Hu%;T
%o)^79Fcp!7loBJL:&K6`[LIDUN\8^Wpc5_jhqmegmXr8AT3&'nmq6:s8o!eO@\Eqo`U$=5OK85ncH":@,G.E6a/]^MYgNrU%gW.l
%W_p[EWa>i5GWrNW%.M\fe.DX0Gsu'sX#I&F*?'A#$4YC?Vj;L6QAPQDs&fpu_AIm=*fggPd9Rj8J=B`bG&#_q9&\rQ+`uu!r2m"!
%XT??<fb6.nUR=L0eC<RsOXi;H#MH]_*P_?aN":o6g=[<_Wn$_!Z!i%1)lZa2Qs(#[>HH;o?,q0NTC`crE.GWV`OZRq==TAi7JTh/
%Bc=7mUQ3>BCH1q[^uMr[W+Q!FiId0kTs<SZ&REoh(SN3W*>.`^Q)LlmqEg<7NFJ#iX37,9N*K0$YO5Ys(+M9""WLd8Eaoi]5%`!+
%TlCq<r-78bYA\_KB1s6F-:)!K7-EIb_3'5fMS]m_+asqhA638/k)'3U9%N](WD(u1AYELFr*mA6Yeeh2biX+`_nSgG,ba"a$K\Fj
%*r,A]rGoVq%thFOkLbWMjbtIN94GFWQ:k\t,aOpY=DiA9SA]G>/=4:q8M$4HEkaJt].>d"O`I1*\\=URRZAfO[Ah\t)ufRom1fI-
%_+qYT?67D#f;R6j?>6OJB\`?LTMOYu?X;4[H5AWu2&.$d2&N[fjE`lt_eVq`]T,@^[lZVP*.IV4o`LB85GdHTWVc_gABc=Mi.",c
%kJ'5$n1:l-TJ>;rVmirbR\R[Xhqkqb=O*8u]D]ZUG<YZfF8j)UGR'4'm?5S0*00(*6LQdk!X^CE7*O*TQ6/&VdoD#[Ojs%`O_[q"
%]W?UQp%lIDpg%Y)m`()"W(EcB<B'r[PY6J)T+oT?aL1[9)\?7-QYLZH*s>)g?drX?o6i0^fTjVLQ\IEs/9d%2Orj(la'Ui,N=).c
%"XgPT@hu<=CB(F8)s/(*jNh&76G?3-nEu,>]2MAM\"0fZb$roj@V1Q8LYc3!!`^,E\p#(O8GU%J@oDs!q>*h5YE(q3ma1#STi:+B
%>RSXIYt24a=0I$?oriLIIc#f=@JgtY;SO(:`!l=bmU05i^\``F)_Y:lE?EK%/Fn.oPKC<f4./RTPDRr81^]O:H^U%&53'+k,=pdQ
%f;/'Wrsk+1,R(o+@[g9GbN0\VG6>.pn7V'>XsP=]b2ol<g2@D2p<(q.%9DHQ3P40MDn`[u)o;?.M(iF`ioF>dAh5ZCM=F2s=22aj
%ioA11Xk3&u9SW?]`GrVsim>^]dD`k/O6@T\mboOT#uU+&b_21Rg`nM^j43Rn1r0IQY)+](0`8Z'UbmXmGlIQf"@(LV]Mcj)*;]mh
%I+ip)A,*ul9:'-&_1)^/mqDJAqX;A+T:K#Xn/fST=J?<JW7*r346H\TO%A74of3'G[Ej>IIal4Dr`s0+NI7j+n?P5aQ*BFOrmE6n
%+'kN6@NRFghHiou'2#:d,E$si)W>'l'4BaQkMCk/\.MCp'+j4>4ns<tqAD"0Vk]4bpZQ_bnaG8jk@LuZ@\ZTU>RcBZ_[#4:Iq'0X
%0:0lB9f"qpWqnRF%?FTCiAe(L^@0PGH_"^2?#!jLr8M"C&P;IpZ?Y>.+1iLc^,Pt]e#:#9,'?=uk4HlDq>Pl]Mk]EN]^p!rX7if:
%V=;D"fuY*LB[RXON=i![s148J<uW1ug!McJX]d@VL@YnLRrS99jkl/>`(n=.6`tVRTfI1=TqZG9HU(md?gM9cru3j[?Oe_I'9]U<
%*g$a8BLWP7:Jf`M&Y/Aeb*J#lmBcOu-cu]+R1QcuFKP"E-]4,S7%"2>^+VQF7Y&Qj./,.6m0"[`n+TSAqg.;]#g,[aHVrkRPO(_0
%p7fLq]8(`17c?T0q7S30qm%#L"Ge=0cm\X_$m4RVHVm86lh>QU$Mt5)U5XVL'4Tm_]dS)E0?P<>Dtdh.Ad!o`LoMi'1j=A5Aho?3
%+/1[qA'bI=P1"BcAaqnA`'flaQkW!u:UR"0T3C&h]j*1kNFkiBT.fRjMX"tKBtr&]p+qIoA0NN#Z/h5!jHe4#SDip9U%gg0:5pC$
%T9PlB4XI$*["@r3jD5A4/k3;=Q.WL_Y5O5`ZP'm9fX9,][Gf(SZ"o2%9DgZ(NF+8]b[`#3m5LE?9k6NKXX.""n^\>RG0d6nii>e2
%<?#Tn_!nrS-@$]KS^8ID,Sq][f9iMamo1Mn;58tGUZ)$2W6pEK;SV4<oo2.-J`KHas!hC@HjAmY>6_u?a696Ee\gfloe<)o7iaPX
%hs&Qt[0dZ[)]H'?;ECo*@h^K5<k+H)-N(!Bi4g$%%0*KG&#m0[Eh]`MBiVoMm\lIDM6q8sFH9%ioi%07N<#/6Wlm8^Y#.F6\jg_D
%pdCVT)$qdVE>IUF?0.JBYnM!WqDb'2l8=CfT%*6'?s'sA.G#]p4(r_NI+QTZBT2V/m6TXQ.NS%"a-t.s+:O)Ape?stG\t65V`!m>
%*^IY=-HhG*QdUO3[EW2>BXaO59U)JlGYp9:MaMFM++_"^=lh`)E27khP;,(DeU7=mkgr>_NnpC#E^H\Lhe]$NF/*4dl?JAOFjB5%
%7Hq4E3P;UpqA\U>hUgcN@K'WKE*2UY?;,_ekiAOHZMp>ps0ffp=oTKHX(;/f5jg71*S'?L0?r.Z!mJ';dELIhRd\&VP%;i3(Qh;?
%Hq3T`%84lTbr8es/WVR`5#uK_2;]H5?m70i&h#&WdbP:q$<W/nIUC<.=l1K.\eEK>:VT^Ss&ch7qL3,^k%K5J9M5;q]^e3m0)5+)
%Wh3KE=1qMPUi6r9-"0ac7Wf!3mb*l6'Bq(D"i-fbs4/)P'r5q0c?]0!I'M'p_+&'^N5E;TH0ZDpYRdT,DEl*'n,*5q/q8#oW;5c@
%&g@2mp11Q&3(E`/b>W3M&Ve<0\_"+L,`_c5d:ZE?[>r.OIK!Wk84q8maVg'FS&n2?h1\#.[79fr_UJK@BD;i/na:_L5U6iOdZ,S%
%UEjE8Ul:J$;3E^2]dY1o+;-+JR6RFi;3E\,;FX7#-qP:&.APdm1?p)B/9K"h9MAuaUqZi8EX\<TK%^.kAVPM?<NGmt#Q^sIM<'N<
%5-Qc;+3'&&'W93*.hJEJP><5#E\2_="pFg!Qk+,L>Pmbua,f<qIl`5SLFrFP4(A3@g@S6OPSBTX/4!KpN,2)McPN#e_5[$_-o=fB
%f+5QBa'&,=RB\hrZ,0jGA7>[$r:(sE,:Je='U_K=a5?'2rUC3b^/SPK-HQ'^KkY'2IPNo1'pqJ1LLbF!.PUh,.8-Zo-.S?.mkDDp
%eX&<k1D@)/RoEb+B@W?3F8?R93"L++IsB.VpWi$\%HT$G?.Jj6d])Np7O*/ATh9N;pHYn1U_BFVr0</laZ+;(H'@SCE;8*jk7:+H
%PMg%,2&V&G:KWj&=#i(&25WrR8eQH12FopDnT*_58U]A>6CU@j1PsKXKQfFQKOuMBg4UqO&tr$CK]_'B#]0](,S=2mU"q*^S4%$^
%KJnPjD;s0oH;><7ba]OhMk=KJil:HMi8Yg+[G`hHqALS>]q(7In791LaH(_OT2W&8#Zr:_9(EgC-BBmD/jN=.#b*.UMXFN!U._]P
%DcQaS%DS.p1mo]pMLJKTU81i9:g'g'fBToHQA`F8*bU3lgFbN*,:<)(+*\3D?Nt[07P+Bb3-<L3%8D<DR[s5H[GU;qLIYl1;Wl_q
%m6r+d3MN[&TQ+!)Z?<@T?d=_j[!)4iCj"S1E3)MjBf,KB7bgUqiW6:CHQP?)7o0FZm;7eQe`usVp?!W-kQ@k`q3Y?H?l;r.Zq"s#
%T/<R7N<4(nn'//qYJMpjf^9?qVFfm5^YC-Q"bjNHM?AORL+d\B';$]Oj!iBi*:5f2CNmVFm`S8*pR7oHY`Gg?;^Z__%5!EtReWh2
%XcGLUqjhu2M3iN#=c\J9`I'#P=7'M7S@L!d?aT^9nRViJ9Z4B+;(s9Kp6%gb8Mp0CY;m#@e9W=V\`(q._RUq^9>\4bS4g`0;2')/
%B+C,E/d^^(E%VI[P&TiuRIJUo\XnW%I.seB`#ZB`@\C">_Zt'N=c(O1JTA5Ppijsm,kWl=]08\^_2rW'q"bhkDmm5_ms<TeenB$u
%%>Ll`s4PHCVH8Il3@?Gs?+qk7g"VdV!0o'@2IHKp4GqXq*(hkAg;8mM<\<S]\N,t-11SULp,3C<Wir[VO%dL*F_jNXa-1oC+0]Ys
%C%_B*@+J\Q_r2+Z.@pE?Mar!<:]/U6n%X7Td8.na++?L!m&QHkD<0s\mG35slZ[eh7p^u*s$c+g#<U0nN`!Ltnn.O5DR2rgglIq%
%'PV:LFR7;iERsHn$Qmp\J[2aLCYhO(Mt9=rF/-Ta1-E(YOIE1,W`NNXmn\"ZT6oSRoq$\)*-S/!8\DUPS*T'l9T65LS@Lkd*.NaU
%dlZ;?_HX+*.J9i;WFNh=9%2q;Q#b"8-U\l%ib@fO2^%l7A&-YJHeIq!q8AnKMXE_:s"<\7rbF+^-o">Wh2*EpDjFqX<oCF8l!J#j
%n'FU5-\(!9"o$!n'/Og02CI@)g1;s90f-h-6Z9(K!=iU?pJ)4Z-s]O5A.g4XYF;ZP'`Cm.j%:Z=;,3.Hot^S%"??OC8LDO+:QQeg
%-^boD0fP+X9E+_A3!)8hF(;LKC1'u+gbh'jS/LuF1F`5=Sp8$;R_agpSN^>^SlJ#CRaZD7mc"02b7`Xc.^R5s#YA<rOg0]RkX4K1
%Rf(Y&;[=80H,4J!I(E])3imJWEcBX-XqAsuP;%%m4ns<tC*9bo/mT[56Fj\ZXiL<V-Mg]1H['An%_6sYNJr4X6jNJZ"Qh[!4FaTR
%`8Z3D0sN]cOH^HI(r;s*(mKJ9[b,"l*:Z)#,P@T(0P$r:%?_`TJ"]%#"i\#*=3-EO(eg)Sbsl[BlJ6N[-W7YChIXMflS#H\;o9t]
%A,ZAj]Eeu/2l/sO)PufJ?Y[I`&[I@ddSbph%3oK>M4!rO1R8laiM::,@WiedJF!%)b-,^EX7p3(A)o@Kmgo^7=IrL*;XJ5c<Q$98
%IeA2lE-+T5-78%%&A(Fn1fCZAUcsrtD(s?VTg%;WrJ5sUV@c*p$\_G]Zec\3pXJ[#%]&]:3Hnd%7UW@tp]X3Hm+tuuADWY'O@I*N
%M7<\&'J)g.6#%>%R#Q'($.@&_%b!$g9=aOI,_DEi]%A[&%\XC_$+22?C]8IjV#Kr2s7Ru8Rj3AD/2Z;R"/6nVdTlUr:T[V9[@>[;
%=7WNmC?hI\!sEuLQkI0:H\Ffc>/Vnrkt/Ej=G":,fpala0?pCME^5.CHoPV$Xi'oFK2*Y]QhrkTO^abKs5>%P2Kb%/poaC/[9>f7
%deYgtS(FM-NtQk.[@(5NPtNR'lRn"L5):&Tegb@aG<]oN7'8AF7!*.oh"hK(O"&Ie9?Jh1YpA'dDZA@/h94Xbr`DCuXa.=%2V(m9
%I-Z!+Lsq^-5ufg\[OXV,ErF)*Q9d?KoW)XR8YbXrIJ`W.s(SH6nEDI=IK4.^H`7OJZrHH8q!eW>KR\(<Ial+Hkjb26Y#%-PF4ALb
%d\0aE\&E-bi0SIIB[Ih*H:&YUh@Bt9d%aZa*dMrdf#smp,@Bnm6N#dSM$3Bq(s5.n2:1jBghG$jr9fm]Emh_?(QV$4_Dg:tM>.04
%ou303EIqg]s7N]-*/sYI\7i+[Yr/o,fI"Tr0t)qD9oSJLNNM.d`\oQ[M6Td6D.7>%DJW%2-,qht[Y_70M6T3oQ5R[_gU'j^`mRS:
%47L)Fgd6P2:"phAmW+$n_lu#IKb'^.L<3>34mZqad:.sWr_5?Qf-\RRRu,ZjXEJ'\'<?Q5"RE8aZn7Ih2ES1sM9SfD)Y_q;NX;Ta
%NNJa&fHnNq0t&<LO:C$m9lPCrZV?2pA&Hl';hW0!A*Ak8TL5el>\72pSTr/<C96+L(i.$4&n@ILlblndcrb'!dr_nCVJ\D-O>UWb
%L+q2]iG+n^2)Q0`)m8:)4>GD#CTJo$Zi0rDY>M6J;N:?h^/ugP``e1jPTWGFKN+YXA8KO38uYrOGBK-4E$Qu?LC^i:20(<kS"'&$
%1XgC/K5%ip\#TVQ-4=@J$M;BcU-7(sV4=j/](]7m6a,G"lb:1%n.Lk'_%1"R=gitJK30k[e4Ho]_f0EPf!u;]n:k,[8sO0UbnFOB
%reCW9s7"A7%^YPY2g8"57a%EZ,,.T5$'V$0gYDX(TH*n(%fUhRP\HTaiG^BC8r3@P44eZW[@#INP$U!@`JsF^'0dQ</7+VMpo=@l
%*g(,fG3V@'HD@!I'`CpX_lEm!AhKAN!"(T4NLa;TJ9(,_^4f'aIbufL%b\3,D!1C?1Db,i]kSSr8b>,Y1NUt0(sC,lf7PV6ON/S5
%CAa=4?Y[dAHdcPD[T'j=3n@>X*^,t&k^*"P*"hj*3b%d%ZVN-YNEX##*$LpDY8p#Q\`Vj%K?AK+pHB3J3_>kjGm"EUm.Uh0T$4di
%drDnS2<XkqPhP_I'$<O$HgCDgq?m`UK'[pD]cSMP*rD$hBek`rf5/-uU,[tN(pRKhO?jO7Xc8qr[6d'H9]7R6\Lc?@]%Zh\l3Gl;
%FmhX8KY@_tIpG`P48hl3ZY+-+R>XMS2)F$>-t2A]pP)$+kAS8=^N'E4(CiA[)L&=BEDq`)r"aA-)`MZ&);B3)iGnbh\"V>R8HM^K
%9sZXA0`ok!_?Bh)92RBu$4$L20'+5IGjXe:Dk=tBa,/kMf0L5O\sJ%7jmJ+U3[\tiUDUSs;[eoY#c%Y#^K0k&g^tI_1Za=mg<g=r
%dk\LC=gi*+[]-7F4ti\_bYa["2Mj;kL<`#jiJ]k$AoTW`k.9i5`!$iUO&k'=j2a345PBiT%c'(!lY#N&)lp.'>0I8d.o2C%jZ;N#
%C-2=5Cui)DbVaLuFEM9I#rcI!)DfEkgW$i:\'WUV/sJ$&_NA2>'P]o?mnofs1>B/Ver3WC>FEYC_:LE8IWhg%($Lj%V7S_-c24bQ
%Gj3a;b$!(8^UgaKUS!0o41*fqB>"A$l*8fSM\?MWYj5t]Uo(1SN*dQ+b&q]l=#oHQ7:M6]>8<3<;$u/fV61/5<rA+f9mNR]533OM
%?7iHo@7*,!go+2PI]\p1gihu@]3h[>o;XAJ)f*T#bDgfk?h.,Q>.^lD,,$otH8Qi$icdUk03;'pHQHJ]-=d-_`Jc8K\#VSpNC"f0
%qk!U`PZ%96OCKX``?G.[nS+87]:.&OOKI77[iX5./r_S<LpcW'CUT>.Up=Q*I/TP7qU[-#D.on4JgC#ihu-M7TP(Bj\:IJ03H+\,
%C%L4S\OmTj=)0Z!RpZ%WqrC3%s#33^#T;Tu[R<KYm@+:c6N(P3fDk7T>%S=j/PCf^FpQb?Q/H*7jUb:hVtSk5B_:4kJFX!T,INr_
%!tKVCX]78_HJ.s`f+%3&:E>`ONCr\d96^$tU#:cMYOpYO*U!H<Y8>:0ZSiIU'#L^#0?[ZZ#J;UPX0"d4;\cJ;R+CiI7NoA!TFK6>
%0X@[&\Qn`qMI,\Y)$Y0n,esm0ZWnfKC#TqfXP-A()AiRq_!Rpu)te7:Lib*jK?4SjF@8%+;jZlG"\T$*Ik"eU"55rGoI4A)j@A36
%lW>LDi`5N?g!hlm&J-H4Jn:C^fm*iSV-<VTD:nEP;6MhA+\kH&e<(:%Bddf]0^ROl3I;,p!3\&2_UEQWd;7==WC".e<:5S%SmT+o
%Kj`69=-^/VP.F9A,blrlfY)bF'P/_68!f=_LDsG6JSOWf$4U/b/QYfa5t';;MU:pAb8ems79b<B\USmjpODh_qT-G.o;]:YM_dJ;
%@G3S'WTK,kr`i/8B\f6cgk!2oU35^1i5%s!o3H'G?sBjNo]kj=3As%'H_h^<6h_2bQl3DJFW!2?+3,mgj7]m=@-#]a6<m<\OJ7(<
%jOZ6]&^<W/n.sRU2[\X]A^S-`;65;.`TEe1PhkhE+O-^ILZLidgH9,VHfh-h<@Y]W(1FjQr_X;dB<Up'*\8#4L&#\cFB.b("!O00
%;D@G/i\6N#I6Knt),.L\RbbikP8c1^@%]cnDZ!I/lmt\YK7I!rQMPU]QVo^047^lOV9j2*MbJ^V+/pb%J<X-Q+%8I\kTr(MRFGr1
%?4;>8`,i1"s"$*,'lY?q?poEOLhIXbV:W4#/70%9V%fEl3!C=X0.6kG;D=6MMm@d]&(=l7jeW<UGjZqS.)94%#%=TK=Hj@$]Mel?
%a^:C/Q\h;FIpbGY0^A4/1n]4JeL985%\CmlG<q!CB<1ic,37R)ZAg=DoC^4"UNfr4nqA,#\5uMR<Fjg@0:$#4r7H#L''*K%>cJkh
%$2^,3`;!(A-_i?f'%4ErXnQC%'P1@9fl!f"dR]Z6XB+Btoq!aq#+C<87+W4ZEjsKChSYE@c^Ir&Qe.+?O9%]j-M4NG7VUa/AO54B
%mASPEHZ>nC<jc08%fRkXDcOAklVbq7(m^NRZ?rB<XCp;S4\Kr+:BqiLiZE7ZGb8uP@<Q/E?Fa$q'QU)W1WAW*7%-EnAd<&9cO4;i
%qi2VJQA9h4r9`Yg]rNGFI'YasB"q!b"8NKi3KT[,<Se7\Xgnsh0U">N$9::m[aqIdK&9"1*06%?9!+mUl+>#P`2'd_**VF:0=Eb6
%+RSq^J=K+nF#R=ONbo-L3U`W1D<.cu`WqU3\.Kr_CTecWKqUtC.(>Q7mPm-[Bcs4((i;-7/RNhs?14[5)Z7F=)k2Z[0OsKKJTDnI
%cRYi.=DfMF&Dn9$Ct"?UP+%$n$/Jbq)`21tR^7=\-*PbP#%?[R(ij0#p^A5)'99cprZ2J%%qK%4;0PZn07;#N)'.H>#Vg5NVY/Yr
%fBmYn*;2_$T#m9;V-&>)1%6r:;n-BseL!Z=N3P@=EsT*Q];/M,VQBp%$G@"Oq:GC4Xd)Z*N*^ars48p>@'9ED^%mX..(WS1*;dfJ
%^EmU&]#1qYn(*m=AMk?,g'UcG;W>fp[=#cHe`6=n*QQq8DWGK+r(K/BhJB]WYLY>Sn")\k2jOq[\gq"A9_IZ(n^ZLgY.h36:05cL
%oW7TRkf*,/Mn5D8gACZ;F7?>PZSfA.>P[a&s3g0-0,s0JUPDe4o\?JrGcbKDDBA]lr=?J2o,#q93t+;8W8cEm<Vt6f!C"`?J\S(P
%mBmc0[M[EY%5onIS:15l%j)iVUp$7pZ9,8ZlO&&Ge")ceq"6m/5'`c+`iiPA]'?rU/+?tb$=EdCeN*PR"eXqLin"k-B)?"KoeCi>
%KWV,3[V'LPFnkTR+!9BFcdtpXn1+sugrLHef&4FiUL1L]rTZ?>HAZ&G2nqKP2MWA:prbPHps!B8^'\[](n5(PUBXrg=.c)`B>(c(
%2k--]g=4];NQ,^&hgPJp?X$\r>Wqm`S(ZM#Hc1KlF.Y?D+"Voo\9dpjB&e#$s%HB:HKt!GikWFrFS^`1m-&eDj2$L^mE6A/qX;2P
%b(JsebBfGg[S@Uq^#tmL`O2P3ij4>h-h'+p6]=JMSmFu(5.Z.qJBG&+W^*->.AZXR"Te.5JA2.b+27^_nCr?;G\S+!FDq8qll8Fr
%[Rk/`hAeb(oT/ke[_;D&rR'n-meQ5'k0gV&,FZe\J,?m_na,u6k%sk\U[>IMesEf!jkSl4hqmJH'T%]RH[t[ADcTDjS%\d/=tF#>
%[[q=&**CeXm+H^al-&1Bc+REVinO(+]s,&Z[;Y:?)VP/i>Io7U3kb$a?F;)E9!=O^Nuu+bXllm/GSIqGIXIH4;!GO(q>P,EmD\Yq
%fA!.R<ssagr4l's`j<.[;gWeoH)WrEXM0-BI0KQH]!/X,^A5"<PM:?gY?NNi.-PFMF6:oZQYKUuC,NW@(2hr(W$kS_?:!J\jjiB\
%qIX/QP@&11ZKgGdMtMjlX3P0dC?'(!UV="A\+ctlZ'(m^OYHg%St9SQl05$\0g1eKq)+`"3&a*IX6]$Bo2g&Sl',`2r1d%dl1t:e
%hpRROh+&aWK"KAtC@Bq*r&25G=*CtNXRjEJ_Md.G[=^[qU6)9cdo3TFQIF<D2tk]2pqgTg`We#dI<o:q(-GjQ[aT<D$QmggS&aX_
%UXq#aoYR)s[IiLccY)L]O.0M*RENSFo[7m]Bj*#.^.GZ"mAKXAqLc033472sm#tLblgaW1[*:5'C$3I,Sp%T%Qg*V\o]Pj=QEE,:
%5FjsHe'FW!3_2J"H[;63;.9pt[H0mtl1GS9([92tl@\`[iO9WfQSXnfl(*ILFSbZ>@l:scc!7(=T.eEd%qi#8oUF%SI/8)#cUa[C
%DbnhpNNZ:F\)kZ"l1YuiDm5^lDbocmk;S*Ukq=FHj7MHdd;_5A[dkPhQ$]s/^+"F%o^/aR10n.6pFTZ7aD@chA^A,fl]:kbWUu5&
%R$t1Zm7kj.:!ZSZh7PnA>$-9W9eFq.^.`6fhTD).p575APkfIteWdE?E,KE%\b'n,fgG5Me;NV(Dc>s\8&nP4T3iO94.g[';nF,Y
%*_[U8p5GuG_OK!'C&RC/lCA,4qRB^rR^tIR?VF`@U$JbE*Bo`QKbkH$/"`[gLX$BQ;h'%,9hud2+&(!!cYo]Do9\XhMoXDlBr8Xd
%VTi7l@G3/V[HT&G<j&<,*.<6"]s7V&@/Aui[PbaFIf"6`nDbHtqW-tk`T_Tqo+.``\Ws..n'J+1qq&m-l*($X=6O8-FL6KQ?(5-5
%IP>p6r9D,9a6V=f(-ZZo4O@,8Isk_%:Q#b=Nu-[p4F:@*5?QfN%j/I6<u2tF/Y&:@NZQfD4ugk>Da4$,FE[Gp>Fti`i+h`Rc%Fb(
%[DmhkI606K?>2NUDJ!M<mdJFP1`h+9@JaAF`i?3pbWORNI5\F/>oh7-hn6LffmE[>Icf;.]U3t'<I[+%\T%F_-MKB9c$[5"E]@".
%aqeX=3R=(@Gaj%9S!bj/Ads*%ATmm2I@,GF?_)geB"+nKf<]gBDbIDaZ]Ca(^43J;3U:C)A+nV85KoEOc82ed`VK+\ZaKDDLPu/[
%gP<f%Vp*&D2_,slY.ZG,%sJMDEt8dG5(!:u4?lnmppkCNp[H=O\+$W3]6!MHIf&+b>/Q-ASu1[+=74g'bI*Z!SpkhIF.6AaDs-i0
%7a@QhNb@N=Ie9pe\Q>'P\\aeIc.1EP:X)+/o<\$]lO/L>p?q@Tq<+AcRJH5g)n#LZb\_7smAopOq(Lk%lhUIb'C9?1>JW$9c"qc3
%Ga+Wp0`B)h[.3P2o9[JaUR1fZs3[=hZM3Qgg&M!6ZJ^.YFIW=&iDI:9nR5jTrqb(FGKL^0.kdeQ(H0!@<t"nd2[TrUHZ,qmhGe?(
%iTm)!=f>+:g!J"(\Vo^[a*_Z8s7);lnqY8T[B9AeK5>E$n[hSPqW$oYIIhIKo(IHNWcW9n\2a(r@F8Cf>[:Ujs)u-O\o:YU4>T4e
%MdJZ>mk*C.Nc#UOfC-,k_V0dYN&>rbaLo$^?oOM*B637(ZeZu>1>_?GQ^P^k;IO;)Q2Y<.n`]1WaiR8H9C%S(T9g%Rlh]',doW0.
%5TJ%FDhjr<[CNiu-^oKFIB,Li]e/VOrGYq%]A>O!0&Pli<e?@bbg+urFMlc1r"=@&4Fb7l4Dg.MQ>Oo"fm9'O?65^.R;_n$cC[:*
%i6TQ8"o`iHo/lsF;.c<\r*u4GgRWelcYjeiFN^'OU9C%n:A$u$m?R[mIIKT'\pNf];s+B(FCQlPf,'CD:[D6Ee[pMaj6`THFi/_'
%TOu^G#;pS]p/0Xfcg<0&H[U=^4C("82m\FoRec@@,MRP:B^N@lYV.Z3XgP!8lf@:)_R_;B's)?A]35$Y8&MXgq:lb2E8.!l^U;CZ
%nQS(V/O-OV3LjpZ%aLUm04.bMfB[4,oD[Fc^6='Fii>.hn:J:-IspO`c(7qj2k)a%gb8X/d!Y#uj5if,GAie6\#.S]^7K6r^[l@n
%bP@@")pljPK@bhJMQsn/[Bd(-YdSSXnS*1nGQ-md9&7tAT4i;pk*$VI?h7&'DmDH#4Qkc&PAaOk^H>eLrbh]!ZU_S%Vu,=Fp?BQL
%K@`mLY>"oJj6bIKB2:H=5<[bNrFkBI`VVe4JS16qAbPrZiqi'6BD^4TcOVM;LX3Z9`uE@*(!h<5FKiIN@b'$O^,V^R8\`=]D_%mQ
%c_#)VFmh\HFYid[HM.44r+boj6gnXSiKN$"C[RZ]EU@m;X0-kWgR_`P<3ltZc$F"%OhSQPGFtuZfB]WkY:d<12BKMJj>Q@WrS#8l
%K1on;e+q8R7chhMn`J9dZi&sSo4WUEoOE2i1]OEKDX69Wf@nfudZ(lHn)'^S>oqL2gZdhqVq^@.o6G[qINQ2Tr\Thpg]"W8?[\oa
%YLd-!**-ub^:i3Ip9OIlE4tl<jRojMebT$E4/X1+lT8J0mHUbJ#2aq'bb&3dFaS6$l.+%Hs6TF6_2$b1VscjB]nZ=6"ll#Sn'3rD
%GIpX(31d2+4asp;B_UZU_q2SIQ9O&MQ=!kR4#tRW]ru3%l2:e_qIY6-gAJ1)DGKZh(S?*136:H'XW2/)f(d(:WQ*tNDk"3H&,D2D
%ICSnHA)m'Qrji"TrTU?P`n;h;]fC&pAtYVP<t!UWdG30DG4]&>C*0!,9@&ZVqkpWXQi,Ocj6`\<bN$nRo9GO3eAm7VkN)H&PJcLm
%K9PWte`H%jm+M$qg5";'Vsf[R]K**cXPBD8T:`Eq]piY]B32F/?dIoeNXb47I.d@$o_cBY1Nd$;HFEY#HMQgkgOk3jQ+,ASHeETN
%?QRkg2Em[<^AIPR47CX)rp'IQc0k2t-]aV;mu*\,]-#[*mEp^@qXs"^\^-Vg50cC;VE_60jPPIbGZf=c.K(\O$f-26fjDJkFSb-E
%pJ^m`@"1'sC\mWgqYet-]`%'d,'/(AH*K0Gm#15bRtWNe`_PR;HAUI,q>?qXocEI)Ie95H3'6lk^Gn@L)EW^m/m"&C%kl7LB8;i(
%8!c_KB>8m"h.2R^lpJ5ZHH433O0?=\hIO$/Y'BYKhD\bTVLSC5rL.(q?TG^G?[g1)*Lsl]>hr`"d'%Spmp$qScX'l6f#m4rrCq"f
%k&@;EG#PoQ<qF>Oq3ClIe)_,9df(j[VI-ICm*=5CNsiq1Q0Y!=\*e&UGC-d'C>[UV<kQ;5br8DV?%_slWOKiZ`>;=1MoF"ilW*3.
%SGTOtq2g"UAXBd%ji;PA?@MQF5;1o!5'p2dg;.mmnG)!9V7_n="l4QI^-"3dSaUf%e[1q<X"Q6#cDh\Am-WO)ba&'Tc_B@49k:k%
%]3+r7`cp.uH7G1p-BHh*(hA^KiHDi'7(/Q-PcK)nh2Ca7BPI:MI$r+(;OH&l$X9YJ1?-)YV%TZB3kUZB))()XE3V"3[_!bamBt;-
%=FKqE"g=*"l%'N@n's&^oqGOPdPb=.B!RZ@XlBn^>#,2"lG[eh0=9QKgX93*XI$N%nDG/#*G1X[S@ips%UU_&C*P@<HY_`SGan4r
%\-9!=Z]J97UcfV'E`QDq)L@3TU&0QPjQfeh?b%Ues-(\INHKa4V4-7WQ]8tNdcJM(q/7KWps,?aV,-t'^@+3lp`oLL=K.(i1T.pr
%04ZSJgcC[7Y$0!O.Ge71Mou$'ajfAedN>uO[+nAgkdA)M$f6^Je?hC[V/+go"YBfsV!N/hVV,E*fThjVrk.VF<Dgq[rPl&7;AIoV
%FW%<b[V]-i!*>;W$9d-9!PS%:=+ijPH78j,2B+5)FA)AWCQ#\O$")H9@`CnMbo3-2@8VB503ef[&-'#'>&"LYTq8G(]%]P;@%'+j
%/(4`XL$hU=EVp_45M1`K!,l>4UlY4D6uP;eW`"\L9A?LF4d.BqW`S:aT"b.b.q&,Bd8lu*W#%h'rQ6=_hK=`>Dnh;?9rfj?q\Vc8
%X"fHQ?eO;e<hIdBda$CYWe+(O3R+BQJ#5-(q<tS8A".+j*`Fb+@*-1WE![kYJILCL#.j@%&V4c+/)HCboq"hk:$aS/!mB#(\aHMn
%BYJAsS6tZpbnFa$>..>m\po`6(,uc"Q4;WOIctoUD[jCP@[dH4Xcp-L@n-h`P*9B?KDOF64a<6r=5E#jMO7]0F$Y.Jf>>*rSV^ZS
%2^Yre(l=2PpAD8j>Sd8/$@YP>[M(*tb*Hf$)%3qPPgC\+D$aPOcOb_s*i?*k\?'g_TJ2.Y0_E:;i*guO8!gW=iX6R%;9BB_K*3`,
%O-`4lE[B?$eY:Xd*SG?-8'up?pY9Vd'JtYbLhc)TK#<6_V6W7kG-nrKg=]`?Qtoi_4Ms4jYNT`#nO!Q-:#Tpc(D/T8HIo!aLPNg:
%<nqDA?YVH3fl#c^muo91HskR,eUt9uSW+s)l"uoFa3g$Mk5BRi$s;>"D4iN&M\^=@`^stj</uUiW=dqV\Jf[kj,J"3m99J2d=E^/
%/eksq%2GFC`7f(B!^UY%>7djL\&[g75&RXrbB,Od04dWi#s<n,mS\ck")QK<SVD[BR90.;MV>-%-#W0h&iA^#$ctjg@p(2A+34*4
%.%:4S[r#3[*2[mW?7@82!k&6m*JY2U^#CCBj4M=O+R\lF3X"%)G2$gGD6_W+ktGp,>`53_lu#Y;!HpQ!(*BDe5N"N?6eqt#9!`Zq
%fsr_ZFrnUu%%8c$)iuZD9Xc(m'5aRdF9E2"\>-Bc\W-TF9\jidnOaaaTN$,O.d/gD,luD8rhG\mUtod[<[<m*-1Pp.9el(3W.JL$
%7-O(#5Q@4JegZtaG"ZA;J=#X12Os2OJ@Q;p0;,^L5OAN@T8(o6#C:s/*iZ1$gE6InY7^^4;'W$6q-/`d\dlI)E)MUKAn6#88/2/=
%gDQJ"&^7Z-N/7dU"@T^m!9k@gP7Z#^QHI'sVNZQsd$*rTG?N'Gm#5MfH>6<$h2L@o<F+G&\0a!DUh;MgF6HcP!/c3g2Dio?Ga94$
%%a,$;Bu2RkPRF\&*<RJ/cBoNZkY[=N\=qXWeK"A?[8W(n,@MpL3-8ptR\%CE2l;4[j,TUKF\Y;I*$([pDi<E#1(K7F5X62'3Th8Y
%\*6IWF5TUoT,?0cdAr0QdfD7:_5LTPk[YenD8:_e4Cac*RHoGHU'#ZV>mgiF=KfW;!//`c(Ts=f)X-Xm!6/4EOD,Jlf*'S>%4bp-
%#"U4R>/hm]fab4k7`0b/0J8I@71blG_dQLu6H2\DA*Fu,%_TcdTV[>W9/Yq%0c6VcQidb'D%e8?b%R6_`R?a=W'T#DH(tHN)09UZ
%)J+P@4/2fk!<u)F2_MAd*/b(1_f7KJ4FA,Z^]Yo#2r+nT!C7L0":8Z[&2Y4d6c=*u>7@',G/gd)@)Nr@k(49K9[A55+:!&IOTE56
%/"rM$ln]1Z7m(Y*J/sjo%S5e!p2'd]9U&XE"=+b)"^hafe5/+6(HB:naE;_T1'0mFa/V4O,7kET,L"H+Iu-Q`'gT#(*<?ujI3X*+
%Ae:?Iiuf.3Zf)S>[]<t!kU_7+L8?:X_@T"a[`1#QjWM/mGf0UhG!S\nbN=@:lC^Ep=pmZ>Kr/[=6jAkZScJQd,&<X*3fPA9?FUq?
%RDu4BJk^jX,0&7OQkQ"ne((7+!gU8%@Ku`6"s?'6'LA4aa?m2E(+9L9`A/_Y6#;6uR2JgX>Nc^(Ni*/YS$#^MAr&r;,@6"7)EKg2
%IK:mZN2XSJjj5N>`3BD-f9,^.AtnoW_B=@l&0hB6jqc+(DPD9*DW,kc1Hc,eg+Fd&BMQQiD.44K6C6>n(20j"8.1^aLuNB\9E[+,
%Y)RaXgbULNC`$h9Ng&*#Zj#\[7QV(qjqZUM\[E`-DcqT18IfFD'G1F`\PtPg->Wt*kdm46Jd2]B)*MkL3*o;`@`lJaTQ.kNK$Lr%
%$E#s>FHe]qAI%?0A>i7>[nu)bDp'o(OF"fUVKgkr1bBn(Hk8=@*7?i](X)l^A!"P.D%1@jNItSTWNW+;[a7b:U3;)j@Cd2PYf95g
%3DeER;[U;15hf!a!JTfm[M51j*6d@bAtVPCF`W)+8.@*0Qq01L7A-CuS7A7MTE0\#/.KYFE5Xf[4%%R$!bgctVNLfXB`\2fBdR+B
%4P2^tl\YAO!=[iR3X>gLDkUTJBZInhP!&tTkY1]q_1Gf<j<2.E%HN+25X'>B<gBdU.tu843rS5kVgWe(n7cOq_UQefmS8J*R[[*d
%4XXl/6[KBJ*mQU4/C=kM%]3ZsF`:16C_Q%?PHW(oZZ$h)a:t:P)$WdB+HS":$rmqY$3^MH7L/S-4J:1b0RJFad?PiI0\h7-FJ,1:
%i,s=6<$GP1$H(6Yg'/?K$SOb$O4o.OBBU[;GpkSt%!2uu)!sIG-rOmN<@5j9Qm%7<fG"nD(f#D45SYQ4"d/uJ:_M/^id#_kZY5md
%`7dPINGRS_>oeZ/"+>3S0T["O7>W?X@%tObhfX=5NWKQbau.9nTQL?VKYc]=B;-ra&3NUEn"8k"m[*+$Jni3\R>YK54EE4cO't^L
%E>b>iNmIKPTfA#K%)M7tMgck)5ei:"]OiVcg(\)o+P*<+8I>P4Q<LDtYN`4p)8o9CB,7cT-;Y)Iocet7?q[GpR?$42@<3,E"0F0.
%HK9U2p7E:EP0D(H_=bjG)SFS=$-b0O-V$rK6j^%9&l7792$csG+K/sX@Br.\7m@KC3Udt^3)!9/@j<((p0p!c_?:=\-0^:OY+\pU
%Esh+;?=j<OS2;Xm!;8J7qnf\VMkbhbdKN#d>_EY8bjXJNUE9If%8/O"5ho9)BI6D?HZm[8&dHQ[\e6KrXfZ1YdQK)#G0WWjMHH%o
%#@Wo#H@f3!BI:<)nA0d^N/:q?a8b,k:#P=l]'GTT9&qdfd]q0ti?7:pOm8+93]_^p!=OQW]-YZ,OOUB$EQs_H2Y!1V#8bX^^]o%!
%@5tcQ>_XlYrrMHFfJnkS0VI;MS8="S1fojc[4o0Wp4,N(Mk9-U#"B8KnA`88&_D[<Kqe_T8/Ida[glj)`*$d#(r`qlA?K@nnnC`6
%Va(Y]1r,T#Kihet6:8e$(#4$_=,n$:'bZ?2\&QC#GukJI8"Ya5%Lebui%B!Y>u^AbCh=!7d)>8R^`YgPJc8acZI%X?9AYBlhlNJ$
%%,5tPPbVrfEC&)!TKl#m8.-Ee)m[L"g3P(W22E?MCZJ;)9gFW4VLgJ'\ZVTscD3>LRF#Ym+j;bKF"kTk"@"jRk&HUon?+%#*=D/+
%JUooljGTkgM4tp`T_0Z)'f'?P]GJ["E4j_&JWfDU6+R+%.W%aC2(`*m%>JX*)Ns#\>_$+mBg^N!90<]Zj?h-818[SF?O9"l5SsbH
%D'h]rcs8p?R#/AH'hgAV^b"<,k/#X(i+\SRBL:Z7UJ_Y_"*,g<!Xf8IR'`i]0NKN82S<9s5T#>FZPJFZiDQn@,)%M_-t7@rm(:J"
%jl;YE84gd.?^!hDJ-V-0*DAglPH81L7S3m4L*Hqa(/=!!Z<.oV=st?n1'B%"fAJu61bOFaO>2>()LA8G%k4V8%0"X3a2j?5DS(o\
%D$+u5.8?*GpgpE&[Ucn#4uYi/0m(6d5R?)"bHJG:2WHqIe_p-Q9:9%;BltXopAoV;4<PoY*"Xq(^aM2D+2Da1]H7?c(8+#T!jLi"
%6s==Z@@X2\p](Ln)JU3Y5Q[]%#+ejL@tNFh:A7m*@PKLZ%ChM&QplRUL6*S:2t&M[L0t9U%8FnO#eOk56JN\12,\;25,P:jfZqn8
%8@JRQ'DW5p.3jr&!)0^\pp_r%NIX'C\uqP9Jt[fX"r?%G*AbLOP/]Qb$]5cQ@.81c//DAM*jC9+<TqLY.'&*>m937Eq1.SS"ZJ^S
%A;\4/3>4(ceJE=[A$4#j"9ij"k:VBq_S?b%'cAuiPX.6qkhWTSR4Y1i?$'T/7VE3Ic'H$Fe.m]KL*q>rCgeH;f9F:lDA\&ni@JF%
%[`"@<Yag]k,R*7Z)'ocVPZnYG/cqO'dF`L%!l5WI.H62S42E\(O:nHFHPrUi,'t_YJ8N4J2Q%Z:Cf<)d_c0N2:<X2ZZ1'27\;F7F
%V(jDOkimnbL0MLS@%&>]iJZj>gaG-d[\+MV'rE+6m96B[X_"!5J8)M5&GX4"Mh:!nO&!ueVO5nB8sB'Fi1b0?%*ZR]ZS)#iM9[]>
%6jViTiYgD]>&>EK3gTn]Ye^-E%,O`#["6&V.m5Q11:Vjc0.0K-`<-d+l4m&$\=OkZA@oePUQOhM,\7+)ejT7>1X9e^`gL>j#hNNn
%*X9d6#FIU#'Pe]@5o5(U9/3ls_2lSH('plO(hX%;7*_1c.W2U:_4Zk#@%/TcWS!HG>egb@YhVO(i_gCck"*Wl-7n*a)X'2lJoNCh
%Uo56MQ,9A+2CodU8q]RQ,YJE+L>J@u;U#c6K6ZS\bXPMG4:\7BOb7\n1kJGE47Hcdq03S@h5kr2(GT@PM2a2(E!QRd\)40X+]Dn<
%_cdtZ@q_&#(>=aW5Ue3KQ,!O/>UI.%QocSi<_*i:QTYCBRC"`(?it2'$CK+L;p+rpa"bpP'K%c4aJ6/N>cF<LAd:L]j\UPS_f_f:
%Cg1-oR#VA>qTZ/n+(nX4?)"+_aL?cJ8jS$$=Z1tAbR#=$-4#B0Q5gT/+'df9U8tRM;0<mf?>pL:91l`gCS>&JU"9NCN.G73MXT*S
%QGPm'-1O^S;H+?mNkdDPE$PiCQ5N*%N^OLrEPOYDZR&Vq`DAIc&rD14W?^s7!7Luq[5BZN1V$IM4G)N\o&T)!o3ch(j0m4oj$pPq
%jiGO]*lfO-+A].Bg&m9!K&\9b"V\B\81DafNj'k'?W))./gh!nB'9;n40BOEPMo.3/W0k._g+'*R`PC7N$$]T&+k$^S8[$8I^<tq
%9QXIq09,/f`9#jG<]r8p?(;NmSC9'R)E2Mg!+>dD6GPWr-H7JW@!L?`W=Hh9#qZDAUi)+3K/#4V9NT"4dkKqi0Sh?lh?62A5d#hj
%:`Y3d"G+'=JasejN_Qc/\9X*0Z)\!658PLH1#mor8SC\,/\30j`F0ag[>\?*0[-^EP=.2Y`B4_fbubK5X+ARjb4RM+*+m+9RgG"0
%+&e5]"^obN!F\]X&o%c4U?c2k5Qp5Z`p&;VY*`WaJskP$)RP*n;H=ZuJ/1uSEQsT/5m\Uq&CY;2\\lf;>O`SeA@Cmt+rSuAgge])
%1(H%%,GO+81^MQt&<]9o<ELN).Q!5UNpD9tYbiO>AnZa8?!a?E]GGcaQtetg\VB@KZDbVS=]E4g/92bDG%SdVBuPEade5F=!uN8\
%&,Vc7@[A!WR\kkK9hc!1M?r3N%qa^P8qk,'J."+_i7Q!/!),*$-+V%g.bfi]MM*kQM?Gjg9CN-S>G@-]LH68FSR)M4&=3#EiVk9l
%#%lN(SHf^'2GH@9=Ii>Da)-]VR0\QHGd'RIJSiVhM*+Ejqq*ef=?JM?"L+d!-YaRE._)h-ZJq(2NI.EWVg/=N#$#=<K8Irg8i/5;
%d=c-g5m@uA\(;Z'<AJ&@O459P2^qT\`)):7qC!hlO:nsTM\X"2.Ddp2p4h50=jFD70]7fHR,R'<N24tMV:?Ec^cA[iZskj7d<\RM
%MM5)fVT_`mBU&<>'N>gE#c[q9"]^tZ,*GB9;iJ<8j:jJ2VOUIZ<L=u/$5`sN##(*&:(]gp\.<8qH;4<iR'L&!i"KM@>R$lXe!j'7
%!*8KNMp%ADO..oO!0]LhVTa$62oB.&bV:i=kep.t!6`B`Wrs36I1*,Opq1(,BMVmgjuFPjY%b8q2`];5qrT(Gj5qr1]pVCn]%t&?
%#-,&1Hr)XW*/gP?+WjZX<VW5="$S-%)U_L1<0[uOVFF8poqQWC)i#jf=2D6tlc(b=6DtXn!Qj*>pZl0bSXr.7,\X1ccC?="OWkMI
%^]g]gNn?<.J7Aop#$#m,^'O-5[Uc[6"e-BbL$oG##&]Kdr_:`MBG,3IN"&@q@TjcPS$Y5&?I?m!*sG+9C=;?SnBF!7ii2P`d\E5%
%?)=\O^_D-JjImAC^V"sTBBrmg]&54p^Jp9V3k/M_3f`$in[ad(/)CH3.I1^3:=n'8K6)sDF1<$pIG=Ag60Ygp<q2e)e\-9#a(<a.
%c^U@F@0mnJ!A?oF?4O-4_sG"aM&>R?C<<Y#H+A<t[_/[FII3B%7Bb(K-h3SfLT15SIJ*1>O79$A`_DG:8pRMpnYY:(.Co;YdZ",3
%!Viklp.OJtJ)qj@=,.XN(7t#1m\E\)hYtTOVh,03BRn0]BXaK2mN:>2f]f)2onm2>K\/qd`iVAqdOXDdIPkHV44Y`<>M;,Pol:Ah
%!$PtEUS&oFnY;0nZ>a6n',am5C"50nI4=:r6Q(e?e44FR_Ah:8/!B<-$p=UBDN9BTge^dnoPlf?SY&d!fo#$E*e6,(K;B,XFg-JF
%6s^Oe<?s(pVb<F*<A6BjL@)o!XGCJNK;DIOENl17Ok8[Z);R0p3%UTu<1o3Yhe(ZW$INS,HpH]b$I/lqY?8hFeVS:L31aBm<Pl7m
%'nYK6<<uX\,EBBZ9qB=5\.PMsdt=.0EGn:0Itaj^B'O[lee&tjZ;RqN#uEb_'/^3s+A>#P@PaPVP?l3lWF26M->834kX[.i2cFUu
%V0:,K,nu5fLiXq#Ao[6lVGJ.??j\.L-k@hM<-f2(\/bu"O),bu9Qrmn-\A%`b/6OqfG8f['f2eIYnbHu1t<RS+N/T&5:/Wo)$Ko8
%adP(E!&nV,!*0ho6!S3Y:)o!-liV6(^pp#cjisgJkZFDq;cVTnk@ej@%:Ij+!YQ=\Kp:aF%?1-\?uee4.NBSXUr*eI8l$U)RVDWq
%Jg!63bQ+sp(`Ggse6bF30U)]-P7n?Zc0dH1.;itGlpmXibj:O#:Kq$J';tWuTd`rLMV2(IMV2(IJN6bX$I#q>.)kPR-n'fl*I3Bs
%X1fa!mZj@XQt#hjY[[B-E/:XE;b30S\k]3gf6'2L^fY(B'@WS@rd//OXjO8W_TO9UTp9[$[mo,s;+gn,MHU(c)KPmP'5Nj?%,ub!
%-dWR8E',,54"X;;Q71a)4DJjkY&!TQe08>kW'pcWUR(Cp-0>L1M."/]R\H)JJYo@l_DUU-U.I.8J)Aae@EB/=dGuWO9<s579O7C?
%lEUZI[MCh!;=6/Np7oQ;AE(JEARo/CVdoE\l:\P39("H^K9D?"Z\sZK'nTH>o]Ei'f[+f?N_5PIN(2KXkC?-3HZV>>iFS4fFVKa7
%0uqY1h1,L\j9>`pFV<;O7W7i+YXfUiWl5?bnNaP1lih>5$\bjQ(VoEsNe[sOY).hN]RU"7j97rt.s#sfNrkM4C@VE-"IcuR&Cm_S
%La((XrI%FkNFa7"mLe^>G67WIbD?mo3!"N('As;)H5SO8d52n#qN2F&RCLTMLs2pZ67CtVg:JC`<@;dfBV[S4!&!^,ABj_ZNa\@i
%\e"n,BB2-A-Qj==/"Qi(!BlKkW9Hp>Q:f.sV59?F%7dBCEJ%C_"Xt+`!`g[F'c]n`8k0KHUG9_I'OdY0Th92\H:*q7NI"K1aqUk+
%eL=H$#KT@T75S_Tl@_p,G;]bt9VTWSRS9Fr,O*Sr"i\rM_a]-.o]Gd<!aoqiX??J9^%KO62]]K]e3isGbXPPk7b;`5et?G'"K^O6
%-\<q@b'WA=9c9-Ne&#5<Y[K_/?\/s7@lnpg)_3S2=EI20``NnH.SjNq92T:h`urWg]2fnsrYTF[l/HfBV9+rU'pWA^4:4kQNNb=%
%DTM43N^fqq1b9#&jgsD6@4=,0h-e_CSnZbt\RW$]Qp1g+#1ND'r7iJ#qi9eUrDnQe/Z"o\M!-I4W1o=RNYsW$V-oe2(^"\6^]J><
%A;;JS*oNG.WgBbB/7TbIPd'^,eRd.-N0,]*VGWJ'(`lM<9&F\D%s[S/Ph.h[TW/JC&#MCR2HJfO-ZuY2.E0iQ*QOiuH-F6B<nIoJ
%e2r!71tig?Vc*1+hRJY^2p+E8hRWR0^_CFk6]YqL$9\<H[4k0I3>UX&\(\]V^nT$YGGtun(-HQ?"tP/N*T9=n8HW6Z>S_%.geH^a
%1.pJ.=YA5?jM5%^R0=Z`=/.8,=Fj*QG"+hl=g-B$3*_\$BGop)7-f*ClrV,IBPYHR9V#d7.di7LbRGdHO%HaA\I0Bb<!<;<P[XYL
%&j^,,Pn)R`mFYBTd/dqjC>CpQXNZn=]WKY[34r#emu%`O)',r(J8kehho&hWVumE79X4kIUtIZ)k'bE<#:4f=aCT>=2hj4'%]V_(
%pc=9lT$S3o\$8Cb',H-k^nKjYbHQd+Y9@r`:/>@KCsm>(E\%2Ym;/fTLF1gd5V?&P_e(6=P*MSO#)*jOhHSs[VE/</d6;N-.P_&A
%9FEEa$nj0R,DJ`Ho[(J%>p1D-c,;MaiYHE2!JR;n]O:,ZMZ-`B;j9h\Y["=Sd5..ZK[B8+)O.7&iXAp-XRg^)j>D`5(rLfJ4\-<[
%Ia09`b$pDsR6g5-+=+j.8jt1B2VjDq0*U%'Ebnjs)XE7^$aCBZQ-fbqM3>6]&CC?J`eb.n@?Nb,W3jKI)bZ$,dF=<k478QG"N\!'
%b9sMHV(O)>"0D[nQYdZ$J4cncFKWX-fKOI1N01B4[LopHD,eiS4pbQ:@Sn"[]_0=B>3NIS'U6s&\1"_=-)%jmVoS:A&4=cW\g*DC
%Y,TN`AVMgAP!'SP#Lb,?@u=g3n,Z6GN(k=$mHVIlFN$@91B`u7_])hDRN!a%O-cRKd@a-),Zr[.4CdGKD/=gWArs6S@m6P7coQn"
%A!WKGJrX1k(T-lZNTlHj%e8JAAl;'9]H5%P&pqJE1?fu20d52T4uS^['mi%4BTk']/=:57l6Sd]K`EuI&ibnqr(muN*Nu,TUlT,L
%o1\OrE,5WR#=fHuMXR6"(V'&l(l`%RnTDFFL#tZ/.jtX&P]3W9a\VuLbbh7>G*#0'0Q'fHg1IDk9UWI4-\\ft+RjB0&ubK)D:0'Z
%N^a<=Sh%(!N[8HmEBB_&a@jIMAeGk$"G;FB)?m*6Pc"bI'Pn@]/CeUM$jerYRTLMmmcVB#icLrcN>:]WAg<T]LJP(j`7[Fr;[V+!
%`^fPk-'NYo/\jEc[&p)BE.[*jc,Q96To`j?^Enh]nR<u'4?*^02T:Ya/l(l2#Wh6)-W5Nq0:.S7`:YPqaNY\ff^i[4oJ^'.B1+i9
%5fHtAbG)Q^GhI=oM[@^]\T"J^(6Oj%Zgat\hu^HtclJFEBJ[:e$/IUM0IWX2iB],Sj8b`nEV9k+@#<&O(fjfE:Dn(2Zu#<G22:4?
%l,F^S"bLLIO@Os0F1MC2M$+3>o-W:]#d\n\@8)Hc@F]g^$MC-7VDE2q+o(]bTpQ2C4A3S=)-b*>.'^@Kg)X-BLGo5dmd-\fM6ImQ
%Al+@O@`>H_=KRs#=QuP%@?=Ou6Dn8-iDQ\/$B;WA9;(cE>eG<?mJm>X\&`R:0KCBK=jYI0&68n279jCQ3%>7N\TCajQg6[Zc@g$=
%3%2U)k6V>=poq$'MtoJTnUaIkZQh#PM7u+dMGI5f?*"3=PQ-@ri8>n*hsk^U)Jsb_QD=>5mC5HE.Musj*6"\A0EohG0Z69tp&Qdu
%/QP:X((SB>VT<\D=Buj)'VrJe(A99u7m^4lBmde^78%+*,A:=eLWTD&(17Ro]WZpi@kmL*J\C#Mb"2Ib3os7U/9*>/8QV3e^Q,rk
%MS*5:'s`Ep"s$c8W30n?27,6/]$jB$>:W8MoP/[7!#I48Q?jX.;p5/NI#CV^f]3/ZK/?FJ^nmMU2$uA]hKA%D]n=BrhD/PM/d*':
%9p(RDYs4rUP]`]s<jtoIJMh[&(aZ_c*Snbn&4\?9irth@L-&V[6-9R>0R3dVJp.]det_KM)[^Q*+>C5@*5u[@g?9aLMhlmu;F;q>
%biuQ,-6Q%8%[mOb*%R(M7fHqsm,C`49Pe(R)ed3=-`GBQh$$A!$*8H5(RXKX$?J;=.hLlB$qr3XcGa<LOBFVbQ-3'Q-:XZXOK92Q
%JV,i.ah9DL=jA_"B((=K@0TH[PYbp>RoidKDA6P>O+U`R]0pM,VJ"[O+KK9$-LrcNJ=;jT7Z]4_L@2lGO.mBH6)CAuHotFY)/ja^
%88p=>fsC5*0J87cJ7kP`fjf+IO,uMBPN.B2TI$DNcn$n/Bb^/r1p3AKn3R_FY'[u10W*A3";A4[BNV,3EK+iPE*RBo(-S^.\Tq>1
%cI"rQ?!@^-5]hu+\CiiPma;hK)I<+$#.Dblm:=U<0VNa1[t&F>MqT:8BO[j.:H:VTdg!N,@%b"'g)ef?1<&t]%q&7(-8#sbL_B>d
%eCDoRL+uq-`a')23Wb[Wp>(mUG>c(^;e"(7%iaN.(tV+C_^$X9[V1e:E//fT]L1MLbM312hX1G`&f8N#gr0/*B[Sl*Mo9D31#g[H
%EY2(@ZJ\/+)D:579i"8egl>rRp9DsI`[cod=dVMCM9"B'/6SXOM&&G?7WYQ&L:862\q%DL+,J>VMn+Q_6$3bF\@*p66toas#taO2
%4f*7ff+k?B#drl6@Y,NZSEM.f&0NYY"JRuo$%s[_M+b@i@KZhLgf=ZAl&+ccQFLR)5&1a,XH@O<B8`8aAoTQ%YCI<&`M"8<Ge/[e
%7W-V-m$R%qns1Sd3:Nkh+Um;Vie=RLb%PZ<&=&d+o40nIaUasY_S@j(B7sPni\%;D/7c\9JKdI'=iSgs\>2+n>2BIVMoc[TCWh&r
%1bao@&&^/,H."7&gPh6!ijRQQ&Qk+^I6o,;#2PaL6NGLMr[1"r;Bhd8JbMsOFD&'0Ddu0J&;8eU^a<:<G;RBC$'Z-$LBbUbgQZ/5
%h;mc@TF?\D#B8M;9r<K$VTYAu(3&etZs@kW&E^IKDJQCl"VN%5H-nSdYE@Qd+d-;$M.JT"@$6grTb*h+CSNRej,l!+FL`3n=;UiJ
%0`T:$(5E2c"suT#,o*7)\[YC"#(trh8XJZcXV_?Ma#f(tiXjs(9T+mt>s]gB;G/mPrIj3-#pYEF+iG<W%!LBEE;^S*OOAJ^ddXkd
%pS/+,D7Z3=_i&'d1,AD5@M$s\Y_X4Z1H:[C,G@MGk`i`tP.Xb.:8<O$ct8-_g/p3=WMN8l0\>%n'Qoib*4uk47<bmR/gX6]&pUZB
%biqSA[u]2Cqk:'UK;-;](_4$R6rkhhc1:pL1)"hiisM`cLXo^?VA(I5dm+)g'c1a#Yq0.>5jT>sUl9nTD)[qRo\2?2\CANW2F04*
%-&#<&,EE6L)(=.EE?dL"1T-r@DMASX_K>tQ9_#20!-;G.ca.H!)\'\&;dPQB;mS'uaPj-+DWSa>&b"4Z&uKAt+J5LRVsureU-1m,
%<*W@=JU"DloIP1qfocO3P(Y:)Jn$Q*&f+f[,]5$LWL.s$EmbicR)rDH++]Q[L)nuqc-Y6r%B_-S"kME>\rI2?a9BC[CE[uEDHo#5
%,6H-@SF-R$TpWV5.3P#TVqQ["0QaH87@:)u8/T_Yc'X7W$pALLGm;)i$i-rHGoI3;Z_Tdf\5/J_CDh6U*K%EL'_R13CNKjcaocOE
%'9(?&(-]CSR-@KL_"i%^4*de>n_0^/)@;1C_$HI%9=,:c*(8c5D*oedND!h<`=DO'4mS+W4;uCbUi9MI*s^h>;ZnAUXhtU>AO-fq
%<n)eFOOnn8%%<Oh5+9RkCSpi-1/R#@]+7u$Cm20n+Iij)M0"7q\m?"FG_9P#mRj2)9jN@<R)ZA)N$T!UMPho9"&eDFh82O'dW9,N
%9uE&B9Q?u7aC,BtEfC2<?+_,IS7]@ef+]pM+,jTLFgI0--dZ=Kgm1F#DV[]329J6WRjW.1D8L\9cqj,!Er^%/W,D%@Z%c-]^4($g
%';1<P^'h^Z1Mt8E,7Na*!TR5-NWg5rU:98?a\_PE"j@7">gm0QE<A@;l1^Xpmj2V(Y0KC_6'#kAR*/3j"_L*NIP<0^&MT.^8/sHZ
%bg0BQgL-`9E%PbFR4p`'U[X>?aY?Kj@hd^^3:Pk;>))"K0$Tfd3V$K[(>eV;?oPT;fs]*?il0$P54IrVqS3uB0%]e?RYF0V)b.b^
%`t#N+0MSEp"cVaJ8-B\Fj@W9W(h!P(dMTM=B[p5+2p0PO-=7GejZ!LUEpD*^WH4)ebVYi\K:<Pdlq2F\(d3\(b^dU>Y"Lq=)OHm%
%7S$:EBH+mQ#+?,FZ43uC&,NaT9qplc_([#ZPeo\:&&DL0PU)`P"OVl70l\eoBVAY#`4s+[JN`7KhVLaSgEGG1/!KT5=8(lAcRLat
%O<-8K(J_J^>D4;?+@?N-lRPGLjdlJ?`drC3-Zb`MGXXEj$$$HL;/S+BJGUm:S^qu&NCabI's"fc,IPr2@Wq>+E7kY/!!7+Z'd\SV
%i$4/F52>^(jf0nk5"':?(1S>(&YF[l^:VlLZRNPkE3h=&s5>j;NEheM6t=&03!NASK,[u',6kHp8"e8:cu:pcF-'H?D7DK@90jP&
%EKr(A*H<ek;GImLD^#m#2-mT>E+oAT].@j<aGKXKgWe6dFXM5#U3<34L+0_g=<)ocRC5LIK&Z0j\9LI^L<2thBEp5:K_t=FOjLmt
%<n@r)X&(U.OCD%*Igp_Z'Fl\V_U4'&bd]rF70&L/l_\Rj=@5a*6j,890Q9=;l1.##)`(CX!Y]j+]7m_u)KIYMAkid9jd;p='kBdS
%Kf+L!3?$?lY:0HKLo!tSa&]tU_c;3?4FlJ.*LA5]`df"la?`nC%c5qi-4gn#!mW646^Vc7>N3F=f*0B-R]D7iH<YsS<MCK.eY`;<
%,c#ZpHnea!AqB1*]n!JJ5tk&iEnf_2O<a18%^nHP:s(AE&kId%jO-!jPE#^-9B2[KnV6+W(uf+m)b:aHn5HM6N]+AC1;i%oP_p<\
%b$q(r#-o6j4WC:a>U([KT^<d)PHr%Z+JWUHU\WG:#dl2!0]1!D$k3a8+NtR_0b+Jm9*Uc;jnC('9Y>pZaFPX8!_lAubm[p8=^H]J
%,45kc(QW&uKWYFf`[V1H8RHABJ8m*Rfd%Xr>Wb!p!p7!'KXJIgR6#=+16$ZbS&NVjJPD%b.E/G%=EDRP#RhZf^k('ZY*^bjdJB4J
%2f8U"B16(;W\h[_^Ss`c/I%+!>7<%l*5Lc7Amip2_U0J8bmphH1iZ7J^rA6_aiG'Q1GOq]j$bB,VWPnC*.bZ1j'-4iGLJR0Td,pO
%ZDWSV,Fg;H0PZ0<UXg"=3/Xi5Ser9@2`+t,?.'57\@"]mdM+GS2$MZE2HR#O!`H.k!`lFo!Y2=Q_@4VE=Z[%\\YdEL>rt>Nbai-o
%);Kf^fK2E]feGW:ij^=X&6QR^/2DKF@'k3ZBElIMn5^f''sgE$gD],BVSHb+YbG\'#R4.]UKTj4ODZS708?5YI8-r]p9c,8>N:Jf
%G>2bae<H[1gTDmJY%;&>L^@&(eg8O/T`H"Q>X0?^M0pT:!onI:.<lZ7*s;,=$H*^_=HLZ^j=S1Z[\Ak'\p7Ag-"%fhfrm].Q_<9)
%:9_=G`@_K!l]tWl7?_.OrA$79%gkuHeMG/(&K!;``%F/6,D6Z<Kl`61&K-n0_LeJN"ukR:6'cY=&Mh#H&g56U_6)6mPD[RqU6S]<
%@;^<kJfuD(S!dPP]YUCj%`J?Y$I`ZZ_@;YN0d9l`(\EMeil3ARln(V"GFN$$l\*arTGZa2a`(N:0EO+_R$&HIpW>Y"VTse=,D7cB
%5fm2i/qb`,Y_K^;(sKu5@mTPq(i*iI]g6*E@AmS$E^YWqK*?ldj?926;r#R`9#JNi5SP3_OHGHR.s:1FoqH`g_m17_cn>Md6?.*P
%SC7NaAWj8!9Z&H@l;2T\Z-IX<W*p+;)/kB?.XH'OYf:?.9S#e&%T`<*YT]0loLbGV!=hi7N[o7<$HpT._lR@fRo7O%hK=h@%oWOP
%gQlmjfJ6#SB^1tre25>U49tq>.N++g&<,jY])8p_94MuDIpW^C>%ch'Us]`KB/jqWd9Sl*9/)\;?>XXZ8Hk;\V:UP;-42>iN[65!
%#%P(\D]5;^S@_7XbIE5Y8H&4iimAr7-=4\;h$.%Y.5lapW?5Q/+X_?#Ou`_%1e2Q07(5(WEj^.3#e"m+#R4[E6T_O2R*t4T*/hmu
%C1%luftd8:f4kmB%+[#]gf0UVb2ZGmQ3\#nLdbXW_RR+c/ftV>0TF/%#dH>HK!m:<^np3?"cgS/Y?-ESN!Zu<3EEdAXe85:O4,j!
%_K<t`MM6EE"01Xt,Gu[HdY7dn.KRZT!^tLSL7+_`K[?+(*HAXm309&1aYC<@J?1e7O^\^NZH9Q7%TRKP,Yfg-mFa3Ja.\t0N$r5p
%g9B/X'It\S2uZDa7_O`#,;="G^r7dLV'4n8m&dMcfXi<V=2M7`nA.AbVE@sW;-qq-]3'WW!SG!JUmg;)#TQbK4;hjI/Wj!8Nq&q<
%h(:`4r<Zp8gjDq7!ojb#P85N;YGI-)Fp3PTBe?4*"tdmL/Ru^>n`#NJ1a3'+G+c+1+r^V#'(*3@DdY:1X$pMm3EN1SnVdt@NbWkT
%O<pn0Lo2IO.O9:d#0],gX2])-\SbSsW[Xf$nGXoXNAm,74LC[_dLAq5&1F1[LnliH'X.q^"a(s=]/VGhFLOEn@SqjMHLOEI@[DIB
%_1pVAKJ79I%]sV@4S6EHa5,sqOA3WUN\k#fL,<</fMC_t!6d<+"XL%#.mu\='XYf;B+QQ.Y=9L$gV_h9nGnN++-%Y9_Dc0aFdJtM
%i0C/CdAANTLsVO!)%)(6C>l1ZSBG2*W%"-&faUV;<l?Q26PC!j3&,#6/n#/Xp9pC@Or8+H)Q^Y#<nY8XBT=>)UB4KHaeXLl<Yquk
%F.h#=jWtq_\72W*/R[?Ri?50q$uc:9]/Fqj-<:q&QibIR0c8,HbtZ"p$QdnW$$2K-\g?\5ECWEYBXKBM_T]B`]'7)JM#*1f:+RAN
%Kk'*`Wej5oGZ.Nc,;(5PP4J\%EPR;?;i9n[e)3L%>fo&hXc''2fU.:$'\:i66$SXGP)?#bA&RP>M6eut`n9K$*PcnbcZ!&I-tR,e
%(H*r!4j.0BXd^*A8=6hff!/rF:Et53E&GZm*0'5(_u*m[[&aq2iKELg@UD/:V+f:uh&J5(FFK/.Tk7S]\oa<jZ@$oG\qOdt'G/KF
%\61I8N[=m*glhm_%N^=8Y'?K^[LZdWVP0Cb-n>KH9#F%+D&[mS>C[.;Xep\hD+2p+UQ#9g>XaV'BIf<<;2&\jTKCNg"H_'Wa0g%P
%iX2F7s2iVq/@b###p2kbI/m7qC/Z&(Ne*pg*=<LA,i])DL%KVC'PB.SoDp@8qQOBr;$RWsduf.d`,Gr2CEgHO`Mmj-&a;Y>>0n:O
%oNc2hr&X'skCVkQj.m3Y$:Osu%^-`P0e=-[Rn/U(VN)UD,LYUOKUDmqoDp@8qQOBr;#m#m)cHm`B5u11,!DcUn5rg]q@JW%F9a(>
%QhkF2:3qQdOu5m\!*(ES+:X[Q<"PoHX_+O;F)EZIPBs<<7glU7klXbPoO5XnU*cJiQcHB5&E^]qm7f:%66(lsR3S;hbK(iE/Mn<+
%+'knIrAm.shh7KRiqs(T$CQ#dR:+!!18K`t"*4]*G>s$!m&cbgb)ZN:k==/YU8UiA<UCV/>q+TH@L2+#kV."P$6^<>kRL/[/iD>e
%-2dhq\QXWU=T_9+)*Au'WQ8O_[.,mO'?ntJe\o&:)S+E+%%#t*A?>pA0Y+9CVQQo!r1]FE-,LsnZa_YI/cf'::2D*(>rl@0"/4"U
%iJrfrC>]SC7U%ZRK>loX($P`ZgSK5GTU_ihP$q;)'Oq08d%c42$4ChG9m<FC)-E^e##eZtJ3t)[in^DT4^nH99Y*\r'nlgUA[:=L
%"Ybll.0Yc;0PRpuJOOC2JL)BD`jduh'Zj;^mK7L(921qm3C/SEjIXCOJb9:jgP?</DJ'K%_4['i#c.#7Jqe),B3/VQ,2-K,2-[:X
%AV6r/@E(=ii52PUJo7#3ONN4^)Y*ka#9nF1U!ehk?p([)'Zh;hS[1h2!Sl&,;7p/:@UKnr7CB,r=>cA2FMg7-0pjKB$_+4Ik/]C.
%Lfr9D.oEFKlG&!Q20<1L@u6HlESlreU)HOJP>r(3;i!f3?qV6TQ$Ch`Bg[aYV/(_oN,!9?N/;@f`0eVr;DqKiJuO]c^_('#>8o:D
%ZF($L<*QEm0JoGi,&uDJrDf5[JdjcD_dg,UOgGnZ#NWf/r>F/N`&J@^g1]E<#t7=>V3)%Znf`ZUCkunE7,,f6`n1jU>(pI;$)L$)
%m4jG_.MG-^`.Q.^7]<\'4Wk9H'V?DDXmMkdgn2'`8o@&)[/jAeTXG0_o=1p1ET="R@V`6!Y0Q(92TU6D[T:Y7KXNd4O@7)$@ijG"
%W.OM\JCSIOYp:7!&W-f4-:h=&*__U\0j3$D$R2ViYokfea9'uEj"Q`%&NF5cA5sii6rm;rJSJ1"DM=r#\\P;V<E7\EJce38<`P9]
%(>K/EkV7@e0ht,;2&^^Q/8a1-aC81-`eP*DYp$EQ&T&bn)Il-F<>CMt`Y,h4PnI)Yb(L<E%&a_m@a`&S7N%_W3.e9>(m$NuN:I1W
%[8*ogX:o#XPpHF\ecoO4J@]i/fo<mg+/Ng4gKKpNHWr4/)l34.>H9@ZKXNdD#Dc&%<_Th;Mh/*o?;Nj:K$*W%rE:#H/mr!<nnZ.n
%JQ>YWBRr[@UK4KnN%pFuNYiFt<FcN9SY-<`AW-[#)&$02LbY"q<Z%T8@"jB0=[h3*\oeDs0dd0c\.\s;p4t:iRN7a0(5`OAT?[U>
%LU,)Xr^:oi)L,q5OZdqfJI5;c'1#"J7!:SbG\!.Nb_b\l_T0Hr\o\1-)[!(@M4chf$C`)_]+HNp=:`K*&M>C=@Y'<K;g+7ED;PTk
%#'oGU$cJ$B-X`Dj!):L$4*4I2a:Ar)lsRe3Wmu_u.ST0fM%rlsM"Ztc<m&5\5N;T$<YE=+E*7Q(k&@S4&rW+\%HY\d[(A;;,KR=S
%UE$ahUA6]Y!?]_i>HBX@XrB<%mr`>SSq.V#kY)(BCbS$+,:<'gH_ETU\7*Q7A3X1!6\*%=CYNi\Vm/Fl\>Kr*OXU'YA]Esk30joZ
%*1HHf-<Q`iBuF2*\nQni]+1)qF7K0e.jGWq<E-3%@:=_I<cVhC=/a9l!$OC'6u6q_>rf(]s4dG%*_VY8]C,st5P,`mJq7XVq]UGm
%[r$ALp.J_qD&A#SDDee2pWOJL))(^@43eue&XdpFX):r1C3MBFTGb$*Ak"Hk,_JB(,0c.p77M-m.Lc/Y-kV^&Dj@8<*b(8knHPQm
%Y&-P3fs&V(hC?3m!!o'I,h3??5m/`JrjDoXPJF+n@dsm3&s1+)4BuK9iWCKNeboq;./MUP"Y44-hWRM1$-_<<86qC$#K]!RK/,Wg
%(:'[T,/oVl"c6M;.=St2K2YC-b?/$G\Z?]/TJEd]MDCtYo&lR@/bU=,O]d`<!^^F@[!]ig0/jhC;MhKOlX5#pi$HH?2j&8WL/2cl
%NL%7'N$/A:W:77BVsG0#[m5+lLSu)u@ffeD2cj?<@kq!qa8jS8qmM=j_M6p%)0OnZiP?G3R70/f<1r=+\I.7,7E)<eEP5e(F3#\`
%:9&KK1b^<%BgF=D(O[sjW[aa)SVX@@6H$@R+HpW21.A]&P-7g&/er2e%6AUKC:gS)fG*dT#+l/fW2@J.JHgQ:ZWH5M)M,fkJ5-hQ
%S9p?'"J[PhhlDW_;ts2UO+a$4Ht/6uJdfJur+VEJdr<>\J9CWVP3-Of#+FFWcfEf%?PYu%K,M"n8fj"E?k@m)">*!)UrLnGCq(TM
%kH83@LGM2,2JuCQ$Dsu(UqKtFj'iTK'(#)7Gf`[:[PCpc9l&S2jPX"KP,XR4>i\J,9rJ&'Du)0=R>-dFWGGbh&K?VP*1BH@nX:BO
%(N?5/;fI4e"mlf@8&HZK]r8n@83FMhaR>^_V3RYV@/Dh.^#1YiWCju^Ua.rO^>^>CZ_.ZpRA^PukbAb2,4?eegKejPg$D!#(j*hI
%>8s5f<*!)*_^&msFDAi<mpqlpV1>S+OYqs(`dKap!2_97+96A9X0rhc.%*$?JCKS\+<;Mr^Isikq4\,-RK[p;Fs9RR.B(&@G^lUe
%/p[(N(&10l=QflC",[KE3+DB%H3F-qCln)A//W$PjrMPgNo8/C?\e,M#GRJ^atQ-Pe$6#q(RTJ)4QqsM'A3d+T<2FC"d,GMa.^c[
%!_(Zafh2cVU*%eT41VBM$8lU'JCa!@>V%-tQrmso_Y1ojBW:)a;i\uRn)WaKU5QJ"#@!(c8XJYM-WM'uqugm<)kp!Nq-;XS%%L=@
%oOb\*'Wr\Z7k18/i[TdM/pIg;,UoUflY+&($.jj-Ylf(TqOhqr!)r(qOJf'Z?$8UZVYuFi;aFV.bJD[uP(p<?/(\92)V^]hdrC@M
%]SF-lJF-8J,l%Wb21SBRV(D"n2KNi#nDYo3=V,=%;_^-.gg$CF>noIYG2G%cM.\sdk_r!iZqpf-eR>i7B0UG4Gq/FR<\n(hPm_^j
%_cEgFQn;/W=\:k-28uY>5:pO@%<E"K;pTEaP]&&t?(L57,l&,HXX"%u?@2XUCJE3F#;=?_!`IMs\T[DQiAa7-eFV)MNE2P:cZ)?2
%^C/0->sf&2B&g4\ZZk\U`m!-BU^K"Balb;.O_8jmFc[\-HhcG)J4+gQ[T>f\_GGY<O#b_JB-j'l1VpOUY(BeFRs^;AoE]kQchWml
%A=qA&JU:RRL+>R;=ZBalAUZ"Q42GWoC"sn<DFA&FiSU,-ef7p?GBg5,"4VqMMTX$0nZ2W$:LT.;p>n9JlBBU#268O#3;ME*k_@[;
%0kI^]e%'h$"^AZB$nIQCPYE=5$gUPmIWn"idh<q]:IaWt]rCnU-g0ZYFa9klhZZLSZlmtN3#u%JcF"9sh.>3m$QMluXW2jYMt1$?
%'hM%m/T?YKBhe2s!N'Hd8pG-A-FAWPcP"GY^VLa?BZXB9A@NYA#H8'uCa<L`LEL8-B;Bj*[=T/g&+uZmQn34D6M+3HL5W6/EI\9o
%_=R3<]F14t?heS!pu5Rts-io/`X1l%j)t1V'WO[N]#JjNetQJ+2dY^T!2gR/0#ON,^c;lGPa!ZoJ"WlTQp9sr!:49_:u^tJUs!ib
%32$!aHca'%m_fWQ8cfP6%M08d2@;PUJ<Xe!4ad_rnXZd.E&qU3*<8DOC#Tr)?k,C1#dqeO&Db<HBJ%?_aXD]%q0XE\j=KUm(DSqS
%oRd^gciu$9"a]rYlTB^XEWATOrY/3b2ASX-0J[K!LI@Ja4U+b"NO`(C^K&]P3C3m92f'!+NraTn,_"A*`kn/S<bQ5mF,QK[3TQ^8
%Xi>4XY0da([(RN`8CJ:nj5?aP]?RQu".QN<V%CabS!B.Y#r<f,lTkO3L8_k0'k$VP$,E9m(r&q'57P\q>p9iHdI26mk%UV)2s5fQ
%ogiS`3"-IX.^nS2PQdot2iS,&MYVQ`r/dIlTPg5+HU-'/at?o.%[FVJ:c!ILK.=Z57&B><"be.#*(L444,QX>;2'P0JP%?28`^o'
%=I]9P*IT`,IK[JsOA_A="p"u(_?_\)2P.1)j+RUI@,Ja%'fY>R5;P41IClc\3@(-D97!oT&q/TA*0M92YsMp+1>1*+(h)YJ,;,Ob
%Bf&.PA5:_`Wdkq";+f:i!'u=+0-o0S#;\i=Rsqoc(BpcPC"S3fm8uT#en97Ql<YcYc6]:(b*H`1SM=m*6SdeiJPlqTW_'ZsK-&ra
%&3Q._?:=gmI'Bj/&0rI-*D%[a<>.GO!hbGscNn/Md/oudnD2A4=@*g=T8a6=W9$h@F;;e/`*_Tn/>=GSG3dt`gWOPdp\??I)\kP4
%(-'+s%6(7Gq"o0,#";=H\1`e5l9OqGWTW%q&m.V^"Z@?&%sD`t#Z?2!J=<8m##Zt/[YA`tPW_#p#d=a+Kpisg$^R'[q6j(o?8r54
%UN+9tI?^-f-aGlWA?E-9[\VllKB1]TS85-$FYPC!&UP4u>QfL2DOdL[(d_._alBHKo9dGuY9OVF_SalO40LTuVS_ssrV6nZ3JeGZ
%(Yfc<kL(dTDp1%;[X^'sq]iMA'YYEl\>Jj@2L%`q$g6%a(BPb#+*s4"jHPW1W*[;N'\*R3e_\60$;m8:UHbS.Z7CUF?T,m>SW@=b
%=3<^c76sU%'o>j-EOVgD7W5..DG\Rg3)PIU!YRC\QtoO<FP(n5,7ko0P'"F3kB;)(!F<1UlMraF8gFl^S.\3(+nNrWamAB$/I/A=
%:C#<E\Mu"M4071FG.-m!M;,W1dXjNrSBU53EhqEf$2E%ZXEV[m[Z/c;/;fa)J]FHUZ7E9Bdc!J_WfV0cK74FP$.f^Q*\8eddtl3;
%Fb.P?aor8@3?Q3F!*XX]WI85hquDuXlWcYl4r+dlft<:RU8nJ1-P;;*hjL0p&.I!AeSr)STI@OM;E,D5EYJsoO*+i>7=>u:dRKrd
%e?0]/'fRe91QpX;1,ZmF@0>mp2A1Ls<h#ulf=Zk1!NkTIeW2X/.J-2lifM"qBPHTu70!ur#"[0D/i"ZePN8O+Td_h3ORi(Gj`!lC
%Msd6I9n\%YPKg,pe68m;*;1$5./.q.(QU>[Fr*AXM+:!=(L@p3@hi*W+meK*,B`YP&STfch=hYX&DC:S/1M?-51?Mg_ncmgC$EE$
%JB5a9OXSa.k<:Z5kZ'F.:@]%2YYS]X"\sL&roGaB$1L?jK5%Jp<DJ2([?HCX+6RQr\kd2qrGAQka`Hq]>'i"kp'_2D$[.@:KI;kQ
%Cg",/a`45%2mbCT:]aD%JS>pY6p,e/DI$6&,62&c+Zr0U"(:rg<.RU;n65EQU'H5nfsjsHl@c6-j1ENFnKJ!Q1Fq8J7ZA%7Kr5JN
%J';V3kBgR=<I;)h'J6,MFXERtNJ-GNLS<Xr,6KiaDPW8e)q?nTj-JmO:.F2Qe@FCZNY:oZmo4$%Jf?>&0%/%mNG9Fbm,m$rBjBhJ
%-V#9'm)"I7*5?]XU'"ZA3u)M-l[Xti)en?r7Q$4#f*^sK(8EA-%XgQ]Pi0Vo,8-k7bAkN]]$iR'*lpC6cR1LGGQ\NG*C@<?q-=kX
%-`\?4GEX:^0cD"7M1Ma2.Rkc5EU>l"(q1$_`U3h2q(2lr534"6EK`aY\8bd%-qXc#7r_B>%idONJ_uZi&hLk2-3.m]\^(%H`]b1*
%]LRlEV22'6/[>8N;9r0Ej&2HW3g>i1:uZ'f&/%8c@j`S(?p0nb!59Z*\X<ec"##nf1)38>RYpq!AcVmg"rDQI&5+UD(pHl45b;hi
%_IdeUm!U)*+'!)LEGjQ:G%-JACB)E#NO3\HUDc(XR@$ZOAn'rc1)'8q:&>kg(MW'p7Q#'91L[W"9_M5!53giQh7.HGfa&P;deo;u
%)en?p7Q#'9'/>o^9Z56$9i!;4ZPj<RkXs\(^,54>Oqs5lA0'dRDucN_QbFCKS+MCnG;B3'7.4E40(/1/6`I[D0`E/-CB4oU?%LgF
%Ccn4W@p=TABWO_%2,K-9PQS*:;<<'^)KR6l.Gr7sa6p8,0/,OMpG5m1]^q"pVr>^37*(o:dm[k@%55X9>B)(@D?uH.7Q[kt4_jo3
%R5>lh<C!Pp>X`Tf[!^fsR`T^#GOkD]+6O\Dr.GI15Ii5g#e9!f\]q(BNQo\U5FgI.5oBOqgkNCX7%ZDJSCr/SE,IJ[d2:17Q]960
%lG5[I.,iRK0a@Cr],3,04K!1imp0BWbhggnn]oNnO4R4*SXgbV8/k&XWc<+ujN4?3OEZ^;K015\G'7nJ,AeFVW&gBn7k3)O0pMUE
%HcAnEjK;atO3`m\!8EI[cKAc<k>7HJSp]Bc)kT'hnTgPfahD>dG<X@%S.Tt/C4&4l(8DE$`T[KX=M9[aSDTSDGI%&dZb5gS[ie/s
%c%9s45[3S=OHn_8"ka_Q/]bs%h1D^ubr.,5:WguO8Q8EhRufLml`BPclsmWdkpE2j-&:YZDF2]f6rUsh"]=8k(B?9$9sp/l<q(L*
%",&eS7E^4Sm0-M@1*B%I)NadQZ3u@415F<u@(8Q`TB6\)0E,pZZWUN[H`-[aZr1ilcAe=:HH^A&RkVC`OZ%)p<9**r*g91=GjO3j
%`a_3B[/]4L7bYA_;2q(21hX/)9_M5!h@]>5\@HF/NFQ]%aj#gPEH@ln2j]Ag9NicPkN4T57be`kEUuG"lo^ApT;7IgKP_p"q;06?
%a.h"o;Ht3t/V-fDm;>$Lck]OjAEE)o#W?j#6a6*'2[&GDe*r:!PHo7P&gpJA+db'r9_hG\4r/4L_[N?=e4Tb?bs:YoH$lt$7c!]`
%7;r'UBrJO5D'q,9Ojno#cnY^ULF@<&b^bh9Amdg4[/1sL!jZYgCfnr!go*Rk$%BG/^mr>c[eC*Ij-\h!2t$TKQ=(/5C3\e%7ToZE
%LrRbP#UZ%,+kZV$%)I=1l1`<GNO84sUWQu)LBsQeU93d*LmU!1ZJ\J)hdIUM-8,HULU%W/0mTNF->u:^o!/diGKW2:9V1soLqD(o
%-6HoZb6P>1m;=$.4K]@3PGO>2bBA$=nT6]%7c"lpEqM\dCctU[YIfM@(cEta`nB07X@H"X0@!>8cIYXX>[8+S:#n@uqq1`nMXVWE
%iaLc\VqQqg6<jDn>GgTAC%TFU43tjon.):[m$/0NYF\]O;=P'rM*^j6Yer4TTX^_T1^6p8dArWkia!hsr^YUbaZT0F)+:;=DA^E3
%Y1o_$2'-&aLtJtnM'r7]N'(bR7!YD%H&W7HOUEZ+#I!1fpj*2\j--E"_3@e/!/Me;#:R'@:_&]U4W7b7^+2ZcX_8WJZjhXT@n*Mp
%6Oc0u/g1JZ/>2\L\YkrfD`iWX<72`1p0U0?&t!]9"+_)&OcZhDB<e3,Wc!08Rkl9)M2=Zm$WV'W0NH\S:"j#QO(</L*=&uD,?He,
%2JO9H.k2?tJ..)+gA`HY5\B!H4q`DKUbpj3)'uL>A"pANBY4Ea'U4S<V@'%,0O/6]865($FJY3YY$o\tl:Rs\+9nMOp\P%q`@RV&
%-ldaf`>=:P[,Em9=lQ)SA:X!/--^u2JQO3qKG5;Q*f+is)5!C3>_M=shNJ7WZLBVdn`5Q431c,S%qB.q(g`4lhuTgB&`-R,\56ba
%ouGUuQ#Lr>@Ona4fbm[?pleC9.K:@/=Ro42?B>dde8?S3KP")/?o\HaH)'^ra;@k(?"N-4/82.ZE.`'IF@@45:$'t-WQ^S^j;5HP
%errl\[r4g\=)`iVXFVFl"RJBo]Ap:+`(T[*1N<`nf2>:6OnZ"SO`.>oa2G;oM/$N2<j1ir?MA2DN?hT=)l,"S/sPXt',`9t!BD=1
%;K_l.(@g4%)XI1=XPVhLA4(<5`K(iM!+;I!(=i\*dMPW>\[[nP%Uq.LU+%p2N%2D4CdA/nA'Ng\>pmN"-H)Zbh3Z>XdrsJiQkb-E
%%*`!eZ]o,\USZ)P^<H1b5A58nlq[0bH@+BVFTO1)AFEZ/77\-"<_#4ue/i+'ot2TjhZ`KRkUiX2>W,pt*[GuA7?M1_>sV?5b.%eu
%cMNN[-9'4\[eEf1d06e+5R<>k"!BtXlJ"A^0K2:_*gW@k'P2upE>L)d"iYEXRnJ?cjH.8@pO3HLd1N0K/]GdcPo<D:7:@QEU(kKU
%8kC\:_+,T"ed4:bI;g>[m4(DY3Y`fA`Hb\.U+f^]K@g@;CPW"+Batm[WP8<*_.lYpgWAeM.Rmp\[*(9<^CpSR6@`e@T+l0f^j]>A
%VgncGiJ&m(NBp#_[Gj-a*]0>(8m-_'!,MbS2f'&Hro6POlHqLWW(A^?;NYd"P'p,`UDSO:i?c01l>;;qd)"^N.#&eTYBOP%C>6#p
%VfgWK/dmRe.6T(uo!IAY/"C09B3FY+QD,<bAkbg/o9FG(1_U"E;U34f8@!h2+LPR"'ZbfInM%S[-nIkhd=o8-=tAC@@8.>d^pH`L
%Qrtj'XB6'+\oImq,W\?t@7.Yf\f??nW^V<u0aTfq5sHC.0to3mZ]ora:-&1&!2#o^PU=2m6X=2j<,!t`<mK58O<iX(.<.?Uc*sJQ
%TdmhrIpRp?74"a9$1=:g+utsPMhmL)L.1I8XM74T:DML?k>Pk%>"r]G'i1VO_;@UuX(#fDD:W;<2R]"VbtAl&1!.Z-dPiM%f;TL*
%r<8^JluJ$WQ#J'(ef%6I3pOu(;fWK"*$YhC#kLl1dT,+`d26+d:2+_uU!TFm#38%t@OEu4\;*G34K%\G-t6sp2%9u')4F['_4ZmZ
%(brCCor9UT@d2jW1O9W<-]g2b8lKVZFSNg:d4/I9D/M]g-6P\:UPXek_K)H,iIf(IU7OTj<1f[FW`s$0K>6pD`9)8fise+S?@NL4
%"SYS`3hcUf%GRG2PGM6A!*ZM#A>EadWWDT5`h_R48)6*m$AN-@3SR96C;B@TMJS"3G9PM>^GUrVr_sdi"5tZ/*'&FQ&klEU6>X5g
%Ha$EgFG7)DLC-<ff6bt3C>Uf)W3XXG:%Y9BG/lo_\08^3[QGk8(9`<0d+qa:PX@S)mDRu\fDOSK9s9*Ln`WF!bMN6Z(1-a&\&WB$
%Xtd!eB&_oB)P;R?j0^d+'TM4IgalUIgopiS%^qCr/"fm4O!PIXYALY-H3bA%MEa4lE$1;^?K>P%!sr$;QLM/C1L(Og6)^1e!!`o\
%nt_8D6KoH6![T!&D/jn:.PrR-6&ke'Re.An^]l3SI&HmMYJ7kV?B+-PP@1jV7#Zb*mjVE4.kEbrfI%V47c`J'"'%=FX=,`thN"st
%p?ciS;o'h$@B%>-*f0ZTLc!iXgTL=2-Jq:&$_NH?-LDAiUdna)Eo+2RM?7!j]XoU6a'r"]E<&'+@sD#Nh3!R!ekWcs)FG;_-8T_M
%(+%]s*hY8jT6,M.qTQu5OS<slkAkJ)@IdiOlQm((Flr.2o&IS@jJ,oLlc-1uhS2sn_<PT*MgT'\I*"b:SNEYko[poD5.h">Iej-A
%\>JjD&!7Ar]C=lXOn]@()BQLM]pOCYrU+=rcTgOk;SS6A]NiARl?B^[/Enh8Z?X2YoIPLl&l#D_GdabTc<R`Y^A$=WQG7p#`\kb"
%=6K/O0@@?i7>?c[U$J?MQR/Q=p$\$Wp)iP.FR\f2g\sCLks>0o*ZY#.?$uLdnP(t8naR-f_;<\`V`u_,Eg'901A$l]55jI8c'pcj
%pkLZkDX$E7+-+"GWN/gE35+UC^-;PT/-35%p?<)8VV]bU#Hlp'+mg=&(EJ#&reKt"pmBi<_Hf60"M6VmG5U+p*ji\-j5$2SpZ?u'
%:\X#GIl@<$>C$8MU$ak&/!fkH#qC9<PDl"5]bBBKI%9&J50@$:rnpo2BHQnb2/=i/H5+`#qSn?i+EB(?hutT0K9C$]*os0Xp$B0k
%>%^*VflVm6h._C*<[cIggkUn`;'*uNrSqiTeur-ZO9qAY&L"]BNm'PfK_`o6bniasS06[%@HN7\R7@%OSu*=:L\5$nj,KLg&K@L8
%5R*;GgPDWu48$qKbQ^?En,6[GDGtE*hJ][]m7gub0Cq;*UQI?Y\]TFi;9%\Tr,HIDZUISS&kgfN%@:nJl4WEFKI`VA-<HH>O=f=e
%DF-,(o[,kYU*PaKmDRTCd=f7.p*aA3f=[6BJE4dq2n<r#AtAFm+KFW^'q6U]hjqj(mKr0i'&W6f<.0I^H*:Ho-6H93^#U=l+J?A-
%STB#dOnY3$h+6o$#K_`%?9*$i##mKO#\WOU*pDrAZ"X`U=Y%@BW=g\<$tWRcmEq$9)@fP$k*h!Vp0`Y7f?`0G!J=Z5Su;:t"`c9q
%TKP3eY!"]6e/jVE!qDpHOI202[9T*Q!s@qR[Q1`c_oh%G-NF4_2LeUG'b*[V6-B\>opPQNb+g.8f9nsng1)?LjCU$l"6>pYA:*"4
%6-ufspFD^;5n[:pJ$@G>2SWOM$q=c:kAQCkL6WOk6%s-^?&*7WWC3&R9Z;PS\o(\Zl&`m?m8;fhd%OW(A53#q7'7MTn`fHJq9<8/
%h>PO7+n)76"!,],c@F?8mgegj05q3HnU8,ETJ(Q(;ns85h_!3McuU304\B$cK>W:(7,N0s]!Pf)k-gJHo]Ngm]%G>O'U7(mFqp%=
%^>E)'ad:b;/8'@Ckr>440V&?<W,=R*-i1-Xr51)kiqS;XqVQB=:4HCF_Judjs5EaQS'JtB&#\CCF=;$u?Z.t@r5204$bYCDc38^t
%')-u2G_q'h(HgHk+9Q!/AFT?&gl19V4nsdc.&37AL]69./r)(So:6BQpTr\9,KHG8GhhH+9*,fg?!aZ67I8V+`@GOEhA)mfGDY,o
%R2hahFB7p]OQlgd"["-bPrgHj5jLhZJD*P)iM;<+#_>BE_#A"4^E$kE\d&(HJ#"5%gGJqI,9s,3=&"/Wdu,-2eFi.F.>o/4UNt<^
%TA(GV:)#9cLHL^MOF5):Git0gA.ChuKW`MM$hDR!/")7UaM_[k.iEs:377kW_BDLcQq<JbTjLcXa%$^_B*,/%pV.?$ZioIe](i8c
%.PYAGEr;jB58/?>#t'$])pK4_69dVj"?1`a"t#:=i^=TD9F]M.'fSPAHsCO(;Ctb;B]tHMSXq>5F5o5pjSupFVh`@S09EG5PEDP"
%F1jjT,]5<Y.9nrA1A499!]^OJ[(W8\<YZUr86fZ5ZGX])8d2r4#j"g@aOs+N=(LR>F!]H!r:q@(ZAJNPATs?e)c-Q8lPIWtGr$6]
%h]TP\dtO^`-^+<Ba=;QqQR9RiU8DhF6;]H!79RPB[DmZD#PnYSGTd:mSj1!N,(,.Z2fa'J!^A(*SW;/X+"s.@3'6aOjQp?fE9?`Z
%(S>"%:4)isg%A>t-uYO[rPS5d"CLX21SK"@cSlR#"[1U>-kEK#6N?O[F2=K``*aF#T5??J2:"0!\&IL'6ci'oTcW4DJESYh-KOfS
%[3P?E=#4;lkf&YIX0/>\oS98poi5(7_EZg0.!k$dQkXuJC/jhaF#>KELPoRarJ##`qSft+I`oBorc$l:/JFn/\/H65e^_m6ril%/
%cL,.VP^YJJb1MW_;>Si$.*&M<`t!e>UN9XQDk+OZ)BU!qebnVrXp.GsE&Bqj^[ZnSN.7qsGFi7Jj1g[Q5?(s$B[idt2(Xh.)o+1C
%M?FRES)QN@:*R*[4!`W@M4WRPL-_;j."K*-Z;kVu4Zgi'eBaqf@16:?BB2@:aG_EcAsM3o-^m]jM/VH#-sE6=A-=m=,('>fPX[_2
%R$@751]\ooV8,K`_SGgG>eVT'Ct9,61`_dmFcgeNT.a`Gm.R9tPUfhMR+VEe+\RI"J+hVm+$RI8onRI8o:+WdqY8Npn,MnQdr0^,
%Da&UHLVNg[7BI`@@u*O#i8JmP^AmHHO8n%-#.!8K]sfXYrSR6]Zoiq,]`%2HrV#tMrO"iR*dHhnnIMZsq"+OY`udMFr6qRG6K.S3
%Dh%QXqqmH!r8li8hsp`@rXac@i?;gGqr,Ta5Q1B3&&8/<k<Jt.2pT/1msk-&]+:MUrf[1Q^>n\^cJ^-HqF/b<N-4uTmsho2r"n7?
%qpW"r56%OQ5Q(N$&)[EZ>aG3KbWe5aCX;!`I*Rf.F,+FM)pA(2Ie_mA,(9ILj8\qEDu]UsIMoAHr,[/OrO;gqdsqA_&,>@<r:&a%
%n,?uf5.or5md3OEk/6r.s8;-%J,eK>:Ck*?aZ$Hh*XenEr-B5DL10%h.4?)CB1mh-]65kSK8-BT6iW.IN883[c.L+Q77QAJBKh,r
%d-YKKj:2CSUCO;:?Oi,4oPPH>B,'7nlPj\"!uncnR#M1_,-h)#Sa4KahHRbb34e%qVI'h=&+H2?QS2JB^>L;QTL4)*.e!Vf?\`"e
%me`ooE;`Z3207_scGKEZEnWX6$Dk;^@K57LV<3)kBLSuaITX6Og3:l;c@r=OehnGu!h_[B6$CmB.'HFc+.bmN--N'm<SM3ahV#tk
%btud=da<WYcMP="8EX:ik&\3%.0+;RB`N(TlcAO$-"&Bh[ea<ZYu+<2\rh244"t92cSU?LfSQP+c=]XqG_-[deb@Am@'Hm!Hk+4g
%-V*"6-V&Tu@(FtV6Q8aSFRmmloUdd)S`]dm@`Ob+YMc6AjSk^_oV&r:E%6>,df2^AqU9oaMjs^(S,S].oO2MVX/au]RY/ai0&=rf
%b=da7,sV2jgQ_S)"R86*#Bt'"iT8?*o_<Ihet^DQ$OQ#oq+06Sp-rntr(`_/\)q_%p:WZ+lf%Z!QTYN!mu'BGX#U=RSQd]IqLod;
%j0HHi4h1\bhJIR*i_FB(Re'UY!6&h>LU1'4G._M&G]5hH]gJlqjeaHjj:rO-j;"a4/@3&S[*`th-b$m'nG,E%af[9KVHg\.G8Iu/
%::`dlj)tk1rqZf5\-9XW"b0^b^d!"6rV9)V6Y&e"gSo>rM4nK.n+ms!Yi2PMO]:3QLM\F9\"PcE67/hlD/XbGinUgt9)<3N4A/?E
%q;eE')mWWXUcaTCc^09T%I'\);7.BH^UuDuRcK_UG<-:r!kn%tb(8a!D)1ZpF4hC(=bBt>fUC#RgQu@o/!iFAaU))qDmmtCVQU"@
%en5HLaIg_je,&;(L?5eqB,9U5C)_G*[>d9r]"YKfEolNBh16PJF6T[5AnY6GKYjXVh1n\r5L/lq04sqpZhk9Xm)I(Aj"")Wd.f+Z
%^JrmF]MBca.(`qqe7iAnKRRXn)509nn.hX(:Tgr!1pMs\:t?S2R$#/m_A/_N;n:3M:0SWDo.]SSCOkp(_g"qe8q(ETW,=nMB5J](
%SN/RJ)q!V2!3-at?b#l9M4Td!`_i#K69BO&7c&QoK$'=$4H#O_,g*O$)ch]5Qh$O*L7sF-`']!4O\Q-t,G,IulNPJB.KHtua$Y%W
%5^I6ZpWSA<EmNB4U`Au9f'KT!]%9)lI']toTN25(5,Z@Ro$1ZEn[.>i87fU&]G;5i+0HU7U,(\E?OEX"*9-eLiYSn?4[6U,db>uE
%BFe&[cACGd^2:QJ"2EFjYIqB3hiD&>s87!m]K5Vg%K9`eToo)'ktn2C\Aqd:4MT>`,&,I[4a=(P;?GMr@4e49:91mr>g"6mWQ0&h
%Yj;f;FsdgnN)XfF@V>MnRa6-AGHP%sZr,'0DBINCK$.phl_(N8]4_HCDWJpr'jb3?>K;m/Iogl?4hAoLMn^3JkO1m3r3c=jRa-'<
%pN$#U>gLZ2*k8hPKf,Cb">&\1dXelc3a')-KuL7[/K?a^]S6%>nc9M=2qlR1NBB55gk@VRlb)]Jm:/ZTHea>QKVFPmFmL1Fi[)Na
%b\!"sPna=-S%:i4L'@>*MdohAW1kDXqpK?^'m;u^S(c+X-Z?iB-Z<G,?tlnV:jmg=2:UTW@l\V+T20"t[cMgkj_U-qo''J3WdiHE
%\E!-T[5Z3_nBa)^WCSuICp\W<2ta825D=mT'$^3u>0*Or&#-9BnTo:k=!/70j43$qbpW=sjr8TkBh!]_\R1bKG=p[)!0Id2o#jUI
%q][dCmaa-s[bZ!@nsF7&/`l4-pFbS_#OhZR4J^p&$[VZerC_H4G2Clm:Bn,JftVQRhU4_37<5Z*[C)-@c0TF@kj_22;[\(=gI:Q3
%a*BZ!Tdm.O[%H_4l0+%C:Ms>NJ*"]ec(dp?3?R67VT@%]b89!sF.N/u$Fnk'9L#h,qP)_`f%+!jh.Sls2tCMJoL1^9D7b)Vn(]_R
%URSbhr[uoU^DhIh=+/J53nKeWbM>ZoS<q8W"C7b.iClZ&NTOk*E#0'2,?)q;F(BCMaASbpZ6]Z"-@[(MCt9f/>*GK/]1j@fG$0AW
%LY+,MM148o#0Q%9Yn)mV1g3cGe.Ul.M[$@iNTm1kQp+lu2LL9tYl-Q+$`!,nce]c!/AM02U'"TeiMfO7]JR>prOcsp)_%DGXeT"&
%qnmfIhnS<%TWMe[@ZPT`ciq>!E*/%kou")/5E:?pY%7]AE%K%@>I8h3-M=lb45#AWcnm<qVg2_#]dZG^HC<)]2og(X"R'De_k+4k
%;b&`>h8k%mq/$l)(NcH\<SL!C.+)%K1s%H%Ynq7p1ph(aUP7#ZIDK!J(6^68UQ0&%OaMNj]cd""R5]I3aeP\jG.'1Vr!JL4*`-nG
%AY7/*C#9l.H8+^USDE3<1=ti+'g+=&oZ'BCdS;eR_BL!9_8t@T%'pPbNZ2KuNN*00gDXHf]p*tnFR0d`:8r:HG1sA3M`f&Pq*Z8N
%01C:VAZs<pOr&;s]13oab$VSI#TM=jH&iefh[kG&fF_ep%Fno>(j@_r;PH\2g*D5Lr6=]"AC?L-A:N*>+/f^8NFWj),#I,kS"qC<
%4ACT:11tZ<iqMl(#9E&qm?2l<eh5XA@;^p=)&DVD%#[67_7%HpmFinB<ES!dIrl%n>_\fXXi!oBL%&nIZqqHJ5*q\p]+>K3n9WK:
%8.B3fMpX6L0'.`JG\Gi&k[nNd7#RSgK^3#&E4n7?CH:_dURh+rp8Eg.i>V;rM]bA4Qa>)\Yh8<m\b<q2b`-o*]*tmBQSthqQXT9:
%D&&q0Y>n]#_^\@N>(sL-->0gTYV3l%*O\J9N6bMVC"kE0A6Xh+4)EBV9`3aipe!_L^qf6@%k=MIriC/.40^l,]ZWKZh5.HrJQC1j
%o!D+fFG(-7T9!MnZFd&^:VRT,_OX24@^M3:.2_k:am!ZfK\>&8@!cI6BT[+%a%^.*s*U]d9Xh3!NniRWb>P_">4nrG9EAb'Nd3`5
%8*c).fMf.*KFbcfQ1D:Ko+,H!]k3j:!/SdGM-<^SaY0&cs$/?ISh+]-O#"-6K?52gZduaRfIZ:78ta"=mmel_D=_?cG1pOS(AV>a
%-@)p1o1N$&DhHcG`&<>*8ur]]p4@##[gu3eDC0PtAg`ULS#h$Oj2m"UIp_SrYAboi6(3Y.l/J&!M5P'D?d-GQC,>Ce(&e#?-=6:[
%bpLb"l@j/V_>7L`FZ0#SbZ<2t#iMP/gKQ'r>!f4iFmMk7\*#/8efL$*j5FI'+/rp.5=lr>7(oG$4bsm90",/dU9(3IBGGsd%%^sk
%dES3GLcp]LTR=d,F(=)$`r'-teoY!UcXR7]c[_B'Dga/Ko$g_8g/7a3jQP4t&mZO<0Y]eP-4P0(V6G5f$u!"2:?!:=V\&r_(rq3`
%eM'PS(I`e2*qs\Z%r)E`I1Pa__if.MYQ>C+S*8&j[rI#W8RD6cijXi'=RqQ.nK@<RK-hZ#+]WGA%ZB.WU6"nG:R8!?h0QgIJ<fG+
%5o+e0UE6n))75@R/UEQ;JjhoI&2cf<j(aj1U,!^H'(p-!1oI_C!59O<S*B2!"N[!uOo\snN"r$N9&XpY?u>UrVdA%.ngmW.`*s^M
%BH]*7@!np2.b*Xd-b4,5Hc1Dq*mbRHLSF_j3X]>4H`LXDF7TnA.V2CgZ3)86h+K(0Hu=p"UXM)D.[DZQ_ND78\OjlV9>W<+'e4M2
%i^'eJ*\<JWg]`_Qb3Ym0@,m6lP>qVa]2mu;Nl[q^&AjgcJ[>a#U,jQu6\`TfA'u<QMINR1NYFcX\9q9g._'Eb+rhI.g2Z(PI2<J&
%5SNQQYIG./P]G-$a7.*KB9/#Aj-ENVi6Z3q2SHJJ@tt'Xi+U[L/t]NZ]ZV$A%.kScQ-r',MKD`bF7t]i#[m%*DkfqSqb+t?FQQKp
%NYEEr>/in`$s=,B;IX]LhSH!u'$+,IMAk7OYK,#&,B0U^3E^Z-RO#p=J?rj4PM@Z7+s8<\aOgTaq-[?@@[s?TALP2B!j4kr39u\!
%TeEE::E)A$ZAoFf;.[Gg]MSU\q#WB2piqRd&)jOZ=+11@-IBZKq6:T:eORYWUlAAAl6k6cZ&L6.6QJ"U<PAS3<as$rDb#r)m#?2s
%C`Mp5?*5`6e6pmKkB%Qf[S\2S4it[mQpAb9+UQ2W_<jtY&H.?R_SJ\A*Fm]dAD"pK*(_M8BN/M3jidsXOr`kbAI/!#%8#)g%^!sG
%_oO5AaAjlt]>bn''79@/_<[hG<"BV8O*/[?&s*kZ#+4\9Cg1@hK9RR713aBb93LR(3P'D7Zq[K0X<BBAAR/#63\s8T!k##+j;R[R
%BTs7C^9o<Ej^tN],,;6t+nA@#FHW#g?BW=nb8@fL=nN*2+I(d#"IakB#]<qp\0".h:[uL%o=bku;2#+kQ=(YE/m%&g<rn8$143a%
%&]"qD\mDBH-)jol=,mpp=3pbT<3%:B!9^W@V&_akZ>,cRd-fRu_EZdTC#OGog.@<QTWeRDX58AYP'iHZm[9r1MQFmS.)Ig0dQE;2
%EGh=U0rkWU(_B4e[=c\12oiNN/H:R`bHPaU,346M2Ch-I!I[^a4W$VHp@"4cfPD#X<#LE#P]e^eJfRIgp<J+n\qtAKMsKn1Vu]O-
%X(Z6rTFKN,R0I#/"CL(-&)*+2:Wke00O`'#H;$M@2#0-sl=2e;$A?-f\D.fV_kbhQ'JOk^mA;AC0Au5b]!R%/93Wq3dX.eU#tL^4
%h[au_<QCn&;N_H&m$?N"nO`BMAcgaa(]gT3#9(kf`@lZiRAU[H*(b?O1aCEGjkJdC(sVj7RHUk<#qP,NqOo>AAJ)&g=<C)V]A)oH
%rn'3L7?<`7=e<]2'Ak7Lq]'1gD:gLM,K!fhIXsW:"?;T3*eMbX7%_OtI*?"LWc_[b-XHHW;oaV1B:SdTm&?5pjR,^a3[-3F<O"O2
%rC8VJ)J\Bo9@t!G#'Cc:G^2fqjc7)Ap+9O)4X@biK7/Q'R/0oh7o;I51HJg+$Wh??oaau$o'@+/o=[R.rA\@sZ;2IJ1Khr_nJsS#
%a*]&:a$I8Kj!&p?\'?Gt7#<d<PPS%rXjqf-bg?.5mbphL=2%qrr-gR.cT0K=<Z]Z'e1]na<N^gr^,"jZ?D>a@JsRm-^>L:e?$UBd
%lMBLQX*+F@-&UN'qcq[S'6pBp^F_8&bI,1.D)JMH\12h(iKgK.rF'O`ro'0Sf0<LT^4-!SnrNF>-M9f/[BG(i.XqBUQKmWTDCL)7
%iJ.21qUGT8&%>5_ro%SppkN'ci:Md<6Z/:n*S&[WkV"RNi(.5?=^Q8.$2TFX;)$R-b_#iQ@Mk?k=4<hCG;Tl>V09tiFZ?pK,kMUK
%1SFo])@HG\fi6c+_KhX,'Dq-W'cP<eS!(\6"t-T[AEQ':kQjCNNDX/_EQE:XWP&hS:dbh&YICs(&1]D?cXVkocHq]/0-FP5m>Eg.
%HslFn<GAV3,R[q4OQ&_N1^$@_OLt^M(5XrgIQXS8[ZhsH`Y.PpOW-*j].iZP!#f2oN4[4,?iBC=XN.N:c[:c;q<[:jT>(C#Q*HUp
%mL[*=);?'X(f-l"qm^'n\h+)[>qdAt6Gh*YG1nX&r>tKpD9[gH*$.E%f??d`%:eI9)%cABoXGYCc#.#QD&B?PZIRP!ZAIA(nQklj
%m8;r&f;Phjc4UaHF[nF$*'>n8J-L(C,NDu!D:,R7@R1X(S$ZUjX1,Ug7NO'bUW.tXHjLisap`Cr[%/fg9s/Q!lW<rAd1kP&lU=]^
%>4t]aA*5gOBH,X"r/C`a0J$E\LC%8LIbtM.="K`uAQMWr$K;!"6MdGi$AcR"&kWX8.iYI\#@4S4iMNbn#U"bqOoD1&ELl1h;6+(Y
%c&%X$&%7Er*bB'g(rT/f;UmWO^SnZWOkZ<M/Y':a>c)l2jmHn"X0'4*1-"iR.?hkO<8Zit%j]*KCH_2/)@P/r)t0,nS%RW8`5_]M
%i*pC#B%$1VGM\A_AkMI/q_=Ou3lm<TEuLD0hTPdt/9SPI%=B^a]O-6]dNh9<U&&31BW;[q!pF:T*msRdi8UH9S9j`ATL-M<e6&T$
%H\4"?ik#;8\A0gT8rn%"^r]Dd^p2U,p?RbTrtD\*Sc^.>jr6l)..m,/mrl8`mg\Kq"@>ETJ/e)Ed%A,T3u1&E#P\$WrNSW:oQt=n
%>;I!S5PtcV9N-hI&]G2g5hfO9aZ,"=-,Z+"o&42T"WQ.S8d8k=\S*p3a#:5ZUj1`IU(a`2BM43*3Rji?afe4rG!dt+j2r5cILK3-
%@8ADs3ZKs\YDsOJ`MN7PYl+":r]='FL\F\d=q%o+O2SbFmp5,\NsdCAMZ/n'rF_G5,6+O6/euD[jSNJ]Bei(H]E-lKDf)!Ec*&$r
%+)6ou%D?Y?U0O8<Y?eI0#Ajl=BVfG+T,X<sI$\Rdf).haUm`_r<AQA^01"-CF9[D4:uGWkQ#d(QIis%DW=;`Eap(pk5XNoP(PM(h
%-sU,VB!i36rJIP*cWCH6;lBgdL<MT*3'[u-S#`'06I2;$de)*1NIl/>aHY/@GjAI_dFX'&ji4[%A>aB/*dJ\#ER_dL\D?BC)iNn"
%d2^eOR83#,lqVi)\:peB&0JVon^,f#a/O"0$b(E0c7HQQVNcju)LdYcQ4eOko"s4V*Qu>;#/C-AR0:Eec;4E.\u^RnkZP:33#8nE
%#s:RTcla(cm6G</\@LUUk;MN=RLcqS;612o]E^A/aN08G:%"/b$iNB_;,Tc#^#.r'&IsSP$'QNObSe8YPa:/L+?c\:g]HEOaOkfg
%Es1t#>JorL_VMnpn"(hQ[/Kjh((fT'LNI.87pN*K\2,%+n#.Peq!?s]o:U;81lB^j@uACRBVMSQm*c'3D[bT":-[OB%oV`gT<H)r
%7mf7+&$5KQ&iN$m=f`kU$Q*%d/h<"rE*_Cac,7[\A;/tfiI!;9ro"-i_(*a(WaZ7F=p<"`4PV&^/eV9&n?P>3-&4T0+u\AZ#2#WF
%AOOV-K/suZ68Kl&'1t^\:mL5d6dMN.VtKG;3O\j.%osZ2?I+]oi+o/kH72)h>b_D.Ij9-/4mCpOUSs<`]R%gX_]+NhSd]aIELn1-
%jN"?dYi2_hTr,bfT+Qd=h[\PP$RM(ZI1Lrpo4\Pq*/@E5VnjM=FGHZUDZUQ"1aU+D8db2VXP.:Lb43e.:D'keefqf#L/^G!fC^a(
%kikpaEI-l#RSO"qj#M?+\tDUBo1A)pJ4BC+IMK@M)k$']/33g6,5"R.5\a5$S,a[lJV5Rb?\gn)[:R2mpsgSil&a8^-NCEKDfhcZ
%_03iBbW&e5_2"EM//9Ar.I8'n3ZL[^4Y`\F88]=_akK/?\Yc)f_Y3)uV'u!8-4]o7>QS3p$=nJJBQRgHk_]MVh3'<H6mA"ce>Qgh
%=8!^+F[a.ZBkIe"=O484]$@rBU,XEpVF6kC>,C@7%<Cea#he`8K+shh-cC+sb*d1RC0Y13,qXF4f7k+*$,_QEY=:r!kSHf['Ej2J
%PSi-$"i<592Zi:RC;s_q=)+*"-^'\SUHic\dP<8</o0;Da^'FuR>bHP`<OP`WkbqL+"0W:BV&^JdY.rqiliWA$%A=T\0F-"W*Y:g
%/,dJCKk:)t=O72_"]pd<X,,kP!7qJ[R!L3`BktS*%*q8@=b%1uh"%J8`d-'a'Sl;CL&[8"TG?(=GZ+G4\Ep#8HR8_lP4K$A<jU?d
%J35)M;kQ44]^M,U'/,SH5Qs*3H7hc--BZ2uDSP%MC,pSj&s(*lNOGsh.9,2h2mj3+(oc?!ldQjD3DJTDd;5P(*MeoXEes5?WD1d"
%LU'jh%_+fPVsI/Ln`.cVlDq![WJpSfK2#VfHgF[)*WEIcJftr%2eE*W(0D9D#at<!\?d/cV'ca=)jW1Y%$)&tAkhq@H^rpKCBQJ*
%-E?)8:'.@3[qf8n94lP=gJU!i2HI*p-HK>W2tX!mfDtIDCXZEEmV1`8Lj`0`>T((@(F_fXW!a6H9p^/OR8]lF?>YCB1<\,Ynk2o/
%UY)]gCr(p4AiZ1l"<XVe>]Zo9.lEAYN!#LVNhjp"9d:13$BOQ@M(74&q!W)nm/(E@)\+O_3SB/aD5#a1]\Ij2$jrpgW9J<EersU`
%0mtF52E!r8XZ'cPSnTWf,J;L#^1tc;"@>1a_q%h]ANEDH-9k"8GRN\)'-`PY&DQCh85Zu'*/HW/+F><XemU>3H/EfcbjAgDpYMZu
%#W0SbEU;*%q]M1E2_%Ce<?u!hXO8BhZI?hU/TZthO635Bg*JDJEOJY0$;#Qg-r#.RSd_`l+,/:/!=d'oSnU&bOQH6cZ`PsO7)Xbr
%F:Qd6G6o=F-M`Os\_J6ae_TY?]L$a#ro!J[-Z0`'Kd9Yp_l]j\-Tc6j%l^,C/r-NA4`DW`Kpont:oMBcQ9jP.4UB;"g!Q3t@1OT*
%*a/;J%a`n7H?lknGK`!j0#4)P4_o`_nVS>:#guW+Q)D\7ODhsC91B+iCaOZVPW(aL%&m4[*9OWgDum!S&H$-UKbiA0!BKPr)dA?;
%7u:*;>/:M90k![,/?m-=6dS2?QJUI>4TMV"*,57#X-(k4O;R";8U"T49"D[H`V+L_ONV9*m8-:fGrIlUOCM`;eSku"N+tmLAf2=Y
%.P.@SKsc^?f3_`ZFDk&CO=!hF9%I8fP_SLC=d`<RHD>H,k/)kE<+D!,5ZXk?6#e&PA,$kI8dNJq=`@od*mA(0H_@WUrH2KK<'[r;
%(]Ca/qLD+:T2%GecM/p+FrB[WacN\=dN/%kBs99GG)J4-btL1Db!?1o22:o=Q/paZKtifl6i%!](Uh0GIA]E"UV%>3f&Uk-C1IS^
%_.AiFMAJ<SMYTcD#jmRd2OmUV$ILhLH4ckaAWo/C#LsX.\5D9TEkltp]olT_dGd@FG<IsZR\o>P7cg0H\"c##+M4%]"k3Z%6Badp
%SL0b7]6M>'JS<Ct:qtC$-'?PD%Wsee(kW]4cRh-SJ(/P_E&"b9$Cr3m;]tBZ+/J6INs@$S9Q(QHpP8r/("XTV_,Xc5m^pU\b:]k:
%VirAV?C^Km>sM*?+<7E!&o%DHLF"8M5`!G&BT3L+HAK5aH)*h;-&k,XdoAPnAeqmRKUL-f=sA\NKtV:pO=j!j6>K3eTrpFqn<`h]
%rDec%0nX1hhB9=56j5X?1h7D%!QIV(C#n/JdKACn(.JL,"Gf]NL_5D2p.8K7[VcH!=3:g0+`.Q?24!sPHhC+lb(`>]fi:d6)I;^m
%IDSY1SE8/'+hcMKT8Q<jYt]CHn)r3\$r?OV<q]LO;hkn0Um#d86!^.YD.@!h*X3h8/[ga"Ee>k@1pe9\[F>C*D2.t&36G46)8i!O
%o49:P]N3/YDjDk+7sNeLPihfFDrW-h;f\SAF<6Ng>D!,G4;1Tb32P0"$V<*l>T0Z6P?q>,8s>RSpq7^PV>B!:ZgHcf@>^`</6rkQ
%HKdK9VU6jJ#KTUWr3Kk[2b8^`Ba@.+1Wh,ODf?(P.A8.hmbc#DHs)h^S9RJJSpk:1'O)P<_&7-k4QPH+(mGDhWOS#SDk0.f(*(oq
%?m\KgP)qs#]MLr]dsKpAW3C*jnmel]ehDpL<^mV42#iGRaX":-_^m%Ldc[TLS6_kNUE!qO/VNJU`[5,eq=X?`[X=DF)cZ9o)$CjT
%bqREaMn[TD3sfRP=T(.J4)n.RDqMSiOSmDC)=n0k.En4'jEUB[)hT"Z@r8Q4WKpr%W.EM7%[NH##fME]7gqAt^(u[8]<XU/9&\/_
%;+Gc:cRK#*mW#qfO(GJ_6Y(qGOcf-/>%4$'6n#F@SlfNN)A3n@66'jV7?pN?@R=+"or#KIfr"6+9LF%A''"mVrG1X8"MMJ'@Nm3_
%I=7brcmBZ6BYJf)aJAJqfN3?M:fcp]EdWjHmRB&[%2\eBeh3_/:)@)b6C4Nea_kNaG$hd;R7Ep2B'.NgSEO/(=%<%ST_W8V"kMjX
%TXakL<R!l]>^@Cd)NTUi#L=ha3<6_,7@fq2<W^c:jIJL&XQ_qZ]/nd^]?m(CpP7=9bpn/mQ(OCYC#\iM2HW;FBC0W#T1?oZ4c=]9
%RpYp*,,&aK`h?q;b3#e<m=5CKXh9dnY$bhZiPF<6148nD+MeL@h7Q[7WN&k_F]!PY_hXNNn]rcF,),'PA(Lm%?TBo2R<.cd*,6%2
%Rk-(T#!Pi'L1)su3:\ihgB,a0dk*/uqk6]L\OaV7E9gJfB>IFta!*uS2)(@0;^`"@Ub'X"1.O6[A0fK<%1nT=`<"P?%jo%[EsQ_c
%2F/F&N(RZaeB\^*5kSHS!H8QQ^b-6cTA^7[fK2.k?t#iWJ9@4c+::/[(j$?OLMCqukQ5eh8r[l>)'n(<OHoum)'6u7#d"eF23=AG
%h5kgCK<=CNlV@lID@Lg!7s.?#oOCT#ql+5X/#^Z!F:]d@%!.3rSaY(T(FC0u"Gd`]'2Z5GFUP$`R(P&-<<N:o=RJcAAqOnH#3q%E
%'QkjWj$ahpb`9[QgU!rk6B9/a[oc:n8LlGZ)]gT2`k7,YG[oZ_&J:3`IuTXA'3l)>(E]J_e!fTa;UeulSG6B0Zi'=Cr/=,U-G!5W
%6%g6&l]m]'iL-#^3]%FfRf-0R3j"7D6d.NdDGD\p&;"fIh@*IGH.e4facS)jpq]f2^"9aoqKpi$/QX=$ZK)Mc#g-+1\:fMC"HCe:
%gLJ,(2"a2JL<RXQUhNQ5KN;8$KIc]13(rA@0Sg08.WT&D)nJWsJJP77[\,##@0`j%-S'To.$P.Og5bnqpiVVPoEds8;-gaHe*gMm
%8$bm<Sk0H8*,r1W`_L6\2AdgVMS"F=J`M?Pjp5J'h&dW>%@.#E:iB(3m])Od:9qCJ[404?Fg@^a`D@BO,ct-);_rZdeE2YCNmLX8
%Sa:SR3_#$H#?C.b<KTg<$,N19>Yi/41hOP>MO1@'$,"/!/Z!SC'FXRaai*5ThWAqtBW2iJ1XM!dK!<pFl)#\+f$4N*3jlV+NbS9u
%\*&iUD5JsJYM\Rg8k&Und4IZ1B[3h.C6snI4)nF%KIF(q83@nL1uoN-j1&T(:R.EOi9K!^j`:!fCZa18_Q3/%B]tWS3M$UU(Gbfp
%Grt#2KA8%UYM#+4$;LYDYPF&OBNOu%KDonJ8"cgr<R0V5VjIf61M($Yoi=_PaYg=g#oCB,Zd-^8OSof:2Tk7"UlP@lf@6X=9[l<T
%*@@B!flO\TQ)b*5H_+*0\S?oGf$t)L3U(U$m^*u`eKaJ;*1fjj)g\J<g(??tBt?43>SbZ?B3LrrVm<"T>`Ql8gI>f2e7B]l(adE!
%&9>dZ.GL!-O#5V)h$7Lp>>,Fefn17lHaAH5WW\4jX)M7H]-ZmMhHXDhiYq)a.7_a?\An;=aX'd^J]pU3TOfKlm>07>V0T8O)Dn^X
%A4$=3)Y)B\<nWcfG0'kRLJ3$*aHj*&ll`pgeW["rBMDZ/(Ss+5ea;MC_ej,$c^tGBW"Bk6RYR-gPXq8=rF:rFIU;=[Hgl&@a[g4+
%L-a.kY1>H:.N76IBQ>fuA/KWg7\P"go]gpF3,L4\`V-q*juKpJY:)?Nndq:I]'uF+GN;!?Y`gpl>-nCc&rO[/BS(oFOS!Ht%&,M?
%I17.G]q.f_Yp`XKH&kUKU2/7gRO_I?Gh_E_`.KWE=cSeqZDu+qZ-@R;pLkuF.V]B['.8j\VS>kXl-bj:"EVq;lVh"Z64nt:`O+[N
%VF<Af8Wu>mFS;ZE4LME#F:-0O>idZjOZT=cX5[n[R2;dI[9>L0O%`>,g0#L,^7A?bZtOYVh%P[4^TQ).2M<0<AhFlXG:OV8%7O8p
%X@<h"!"F^,j'CS30$$Hg?5jWCKo<XI7Yp]Yi#7n]ki!N;YDP&IMirF,0oL]2jk#bBa+]K'(J;J&"[2/cPuqQcMl(8L',I9A2+J'G
%fWkU:6M+nX[]1YhjX=#Z9M#g"6A\1*Q!an4/79#$;?'8&Uo,k847aE9;bBOFI3!N:lM=O.C:%_**YmI%$R.'Am,=,XDKT<WB1`BR
%OLpYJ-6^RSZoVoA+[;;T$nOg?9A\3/^mYR3*R9K-%sX7hK=otkmk5""^4JQTlWJB,8,uJ9&?^D<)k"&Yq]561.<W-k"[Jj0>dINq
%d]f:^Vd//^G@t(L)b*]"bM$^,-OWj@he_OrP:[q7gm1!\ICRe6\gQ+(LZItHPD1h5/$*qrO28f4="IhtW>rCaZlOaP[UsP"k/W*Z
%%mlGI'^DL[@F6HNd*P@M!]%DCfboT:JmHXhYfU4kmXp<>\qF8J--70!6&;A>YnncXDr,MLITZ$FmM5J06.sXjf*G*s;cs[#8605F
%+&SYHVN[h;,%s=Ol#Ui^G*'BrZ<X=/Q*Ig)*1TFZDOH!UbO8Muq/O8E(92II_Qu#(`,sp/en>Ro-#&=fK3!TO&?1/WR^P"^QN^VM
%58?,6i^1L$oZ<>7Pr0Gl$pc,?T$U/9-d,hhdEf*1,876@d3_po:h*)QLaYoO#]i+]iagXT37$lnka@gr5Xg/S2fm1eS2T9Jc(i43
%6<;thZ]nX,l?u\>7cW*/\gnX+U2arbX/>a*aQqY#VAFdc:/Gp;]rtgcN'('k7pSGS$2Jg?GR7/Jr4Lu8l.o17G0>s3+N_Tr1T"k>
%89QEpc5tI^Gu=oL910]'F9^nooD7L%Dd2G/<0Iir^We'jZcJZ4lgF01]Ze%?1^RXfE%d:K#KmkGXP9.Rd:*`:jqYV>r*%Lt\?;I`
%!6s*faXflf."Q54T8^b#:DIM6!F_hQintjL'&VfFO4GN87-VB&'Ml-hP,'Fl@Ul,cJ*j"u,A?J;R0Gso"=VV3%uaR+qI9LogWa[*
%1L_j`&lJ/-q7\=E&@h1Oap^o@U)'rpBZ7#PkNEMTmlHsudgV[^@%bcqWkoY'o&)Dt-4(+STZtFWHe\+Vk!60^R03g.KLTDSBgH3j
%9EWU%U#q"o-q9f!rOTA.",g'>AsLX/iAN-p#gD*;rtpq!=-e*\/("75SHLXT/UMm?/j!3g3E9'UD/BK%7+:)rH=k2?Cr?u8@KY`o
%\Y?MTZHe?b/tj0-iaPIXZGPRN8e//`,r#SID:F5i.\u#Foj"EE1bVpb336*pYhm<](K;u"$A)>,GL5&KoKcEpl`s(E(`IJ25RS`N
%$fN3IW"SeccYr-;Z;RJe9=-7JViI-GeS.[*Q1/tm5G$C=43Or6@8=2IMVTe'&%<."q))W/'N+(&EIMWX+)f+Cb6f0hpp<J',q(^Q
%`K5-cfqlb:A1^0$Y:JR\<q3C<VoolFP5mkJBh)]Ab)\dWAsrGn\5;6\=?o`dr*!A:8`>>^bq*Kml$_!CY"Ib9VWAH%T&l]0=A'q3
%YSntrbsGuAE0dh8bE=</Af*l\s&Qgn@??l4#=*[:F_"j*96Ol^$pIki<_W]j^2'aESiGDGTPK*mApk.%&M"Huhs`\.8_4>2AlWn3
%:9=K*<HPrEOY6Qp/0&TU0PB(S7=#t&R='gAgdP\P*4J`[fpH!'B[.#Vif9AlJJ8Z"K/;c1Y(sCFB'C)kYSLenb[u@&Ciih6(B]Rl
%lD9S-^i!cb8OjnVg!L^"_c[HUC]$2qN]ku+%L-h,hCH.C.ZNiW&\,6kGuq\A1RAp"3^$]p5ie%8kot]s_(8Dq:``:?<H:MHhKpR#
%RPid)`S;iOWIUYZ[No4(TF3%X`LJ5T3#''A8`5%C=HL(um?gp&1bk7)=W^UsA#XkMQ=K=D;AXdN.-DT9`c1NCZ0oQB"Z>GR**_mN
%IHZi%_-Jj?6BRt-fQDh+P=LfG2OLUqJk,0i)"eK6Z-6`Gr\3fo6H!2P>30%/d5go:"pd\h59J%CC7.dL>-LS"SUI.;])h$/Mj_@E
%,P"d?<FF">J/0WI"p'^s==@iVbS`8&T-aUWB3$+dT"k=1,a0ur"U0mg\:'_!fJr=0akbUc=ncd<jB,l;kSHUbH8AlmL,q&eWF4+P
%rYl8P><\tFBd"VhT4!9m(f`kjUdSIIGF=gcK,9!V7?)kK#K+=l),`f]'gC?>KaV3!fn)=tkr>*RBUZ%o:/0J^#PR3Z/UFI[C7Qg.
%W75o_g?*ujSZ&H]dWOph%]8I2r>fI&GefsU@]iO7fA`^BNetJ(I$P\P,IH&`KNaR?W(7[DH@XM<:`@R'TR4j\QlJp7ma+(Ap=,1'
%#`:1FA>,]Z?-O(TiF/Tue)[VF]'d*M]'0IA.-(]l[Ah>IPb1HV$<!361W3?n:gFGo6Hc+G+t=m,Q/OF47bAceJ7S=^\;[;.bb6Fe
%bYd0Ph%[`he79&<]gBI/b7,37q3,[*m'QQjX/enW)d,438mc,!S;S(VFY&c?;"m+K1\>i>lUcEG_ontJ._)2!QHk/P@!P%C/Mr$!
%a_K%U)Mt-/h;"_)ROga7/!Z45eG1n]&nG#E&h^1G9lI)3.4s:K;Nn%CWWk![K/.MG2*=`nZPqZWVR.Z^+CN=qHX0g3a,pXg'Ip"@
%`f_:$R:t88nrA(JJs^4KE7RH'l?db;/m2\/l.uOb/Oh>,TMd)V?$$;.!B3uj#i&3R$\9Xi44lTf<;lVtYPm'?lC3q;fdAU99=k=3
%L#lWRraC>uVjni90'ri:O6UPXVH9%9,%*rLOqik)H6'BB'V8^&,cf:dWGji1d[Q^4Q!Fc,(deff3aJO%(Hcg=!-VdZCgn.o.f81E
%O10JP0p!qe<k5Nq;Q:sT/5+jd#PX;p[71Ac-o[/*W$!qGo]MLqE_;W<AA=EoFogED>g]G6X\*jM[TLn@6l1Y9;37"^f@W_(qJej;
%ELL5+BL-6@'+th9iaPma2?GKF3h0_W&4]c%<g<f"YmTguc8eW9B7?;2Vb)6gq5aQ$]Ru<r6/AD_2bb3`Tepi%;97:_s3IF5-;R5d
%o.C+]EOf0-_qgYKGJ*gp3O!90!Cr?0hW#SR\=(c!M`e\M:lsf$!/;_s`H*gEFc@#@NPRSCnmi$+LGj32CMXp:9?hao`fp%+>`AmX
%-%^g`S_^fNpJS*X/]/E@kTF)tAIlat?DI?5U!HuT.NRYrQ?7`3JoHYa8QJ*,`gc-a1$E*mdHRW^5r6VRP:.S=:AEi7bR^Vk&n)Ll
%hNGTG_n?R$3b\"fTSLi&QiM*1(##s_=&<f=80O;[Qm?*EaI3R<-O-<q]TH_f`CV>TM^?^mC;h.p?M,%UNg#uC=M3J>cUpK/04%FM
%=/TT:IN@Tg4)Y_q6k=-`S\eF8XE3[Tl+I9/<-^KSe#.l>_!\S[C00S_j$$,4/'?)(MT-q!TXXCG2pJ*LaK7=<1eKJ8/gM-o&ZNHL
%jY,mn!%qZ:dUqRWacK4r-2/$=ioHg^Tc-2bP^H+B<qWs4Z!30KSAs=d;OZIC=@]Jl6goT'\RRp&&of3LQ#gr:!)\>0mjM&li,r%?
%d>W[O<MpDjA=4RG`2I@OlU%Tsi@")OGV90(%saAC>>fZ-EhR)3Me%sfC"9SC1Kl-[>M#mDP-^aSMmSkFAs^t0E"OIrAQPsQHnn9i
%"O7*I^5%WnB_V9c<1TG8ZQ.?pEl[7MfL8W&RinjFO8E=WU]SGSbiY"8C4Xs4mQp9'&hio/T3ju11p%\>akAN`L,<WV4e^Q4SbI3I
%-36l)_r3@Cfk$K;2l(`0[`6.^Q;qDI,TW8``G($<p3GJ`..X=6V"'0bl%oT^Fa>+Gn[_rh;tAc<j%Spf:,S]:l5)r3_S;4LRF!Zi
%4a;5YCnG:th6RSTcc[8rV]KO(@JL#1Aq<P'NZ\NtiJRqZ:p;@]@%I"%7:eO'Q[reoCi+@END*7Bm%VWl["ALI&4.HFB(VM=;6roH
%EMl"kHD&Pcm`p=m)kj!7,h+%7Cj)0<\$!g*(RW^4\Yl*\;$Jq#Xc:%fd!]kCbTH:Fc`^\@7"j)4Z<Ek-+i/K#aEs=S6d1NemuBF;
%ZCXV%=H5Yn@tO+fFEFG,a)H^I(/(8%e:,f=9K8/Z[)9<B?TqQ<&/:dUJZpbh>S.fsgnjU#&uR51bb4-:@."/a%6#o1cuD0\U%=/*
%85aA@bQkQ6:(n(&)(*u+qBg'(013I;oa_/Dgrk!G@Cc\\)',c?;aQG+!4Ga=41'rA,#93_ER\3G%j[b[p(K1A3j+3!%j:4g1T]AE
%:m8?#6"$[8i7R()QSg%>9p06:o.hQ*i+H(m4fl+G_KZ3PSLf#^'u4"3@gGUjCF24YqAps%Nec>F6:DRs@./V7G/SnsN!hN)SQ/9b
%7M9,Hhau#RfLrR@@B3C;C'g^u8cW'AA9h<lOt@3EfYtYW;mC>/7aK^6Rn07?2tQ9sW/r(DCqInA?r@(R"L.dC>au?4p,qj5c`?^+
%4s>8,q;BjY0r;Ib!'*9fqH\jdC#]*NX"rmOJH5fT#0n_CdC:.ROZK_@7E)VAJf7e:gOP;/5khkR%7a68ht*!V,$drJ%RCop?5R<t
%fK=sN_=.^H<2K=?J<R8_Pm#:,98H/[6(%jY1a^o>-p_sMK$7)rFO\DOi[1tuMTCDT2QGV>\`2,<GB/MMhL+kVR7Umo6b/f_h6BO!
%H<M'*?GbidGQF7X7E_7[L1[dt$mq2A)JZOM)/;&:AEJ"T^8)V7<d(ZhrItJr?,44J,$.!,U6$dg:*)Y>$'@<:1/;CW#B5=-gp,eW
%9FNRBUIb.am!r"FP+Y0.V'4C&e'jW04''hVT6=q&*XQA6D_O$oal[7&"2aDL.YCjAR2JJ1;@s9N/5q-#J'jJ-&q*Km)OW&\>)7nU
%(^ZY'9^cjn:5^nIl8%6(j[X8m4B`**<G5+^!Dm$iZ\(id<ZkFJd"@B%T4Xr<+;[m-Brg)0i!s_'b-9)UL`oDuGh^8d;",qA;/;rJ
%F3]7%OtJ4$W16;<*35bqiJo6AmHgDhKChtLZ_os$@O:)o%Z-Ik]Y_j"08=HTZcIrC'4+(3]GU&N'KaQ7_Kf:K!FgJA251t.iX(aI
%XR_^9D=Ia6,Fia%J:[6P7*G"bW8<Wm_gr5S0=SQE:jIKS_UPODN%D9PHl(52M4(A11cpb]%0Cf+'&,poE?ORh-4>Z1"R_/)G?5fI
%'V^SoVJ7s*9-m$epJm;-nZL"a=U)`U'trZ'[L50P"nj-[.<\--8ogC+IEO*00Z4i@[7fdV#iLh5#?[`i&?1?T4ru9VN)[bR#[7Ke
%8e#90kIcJu&Y6*.*sAARi:9I-(oj-8O[@0A%Vu.MbQR3+6CNFS&qk!jQ]s4JJrlE@A%CZ:9"gk8=:!,([t.p,$RT&cU[f,:fU`#O
%9Ac^J2+K<E6K^hsAX7\1LeCLdn:SnP9N!puXFd<9+NU0[<CGC2WHG$@.$o--B`]PQW@E3!&#u]MW7"EJ1fjPqAb%+\cT=QZ(ArR@
%'_r*,_W7kg/I">fQK!'43uQJ4@)lR&X"uKK6Y?\/O5/q'W#[u:A$jU)<>aC'=I@AnF@SS)+MjYGY$%p+=X'GVH'']U#E[1%2hmPA
%,-RsKV$IDj0=-hXZ3cUWK)C&Q6EpSu!0k/qHu[INWPmQN@%cJ6R6T[8!+j6JqqM0.V+b-e(/[68--O`AdU``_l;=1o::c^k4f-q`
%dG0B=c;k0"M,:oQ,T'\fIMLHXe*k/D)s[d6#b`/%*E!LU9CJ!J,$-W&R?q3F-3U2F5QW]g/95D&<_CsV09un#9Yfl7k?*J@q%"Yt
%*a2'>90uK5..W$!4>4e'!D![RG+hNP"p06u=m6iWNB:XbCC?gE:j@QaU[nOjE4dFd!"UU6I4-&E0'&r#('N]i"=5#n(Bj@77V7aH
%'kg8bc=;aV)gF<a2(:a$c62?WBXsXuCC+C(U]o>1K"DmCr?fp[B^EQlV^CWY%!ZgUUi&HK+mC1/>;<KgAKhl1BG@R&kdD4s?E#",
%A@K#"\K5p#-a,tD&>K4s>@_.u;u=E0BFE7&*>:]k%Gu_M=H2;Di),dYE1;!M",s-;V(qfhdU3&-,\MBZM5_5Y[Zj+=&+fc#Q<mPu
%K80"I`7!0:GNir)9sAXSPk@5M,X_<XH0r4#$FD=u'RV`tnsUMtL.DTC<OR$X@L>aV6)4+D(N5k^UiteFV-0XVHqu4u'bOu*I/*Q8
%h/Eq!DM55.Y@<\aNDdE@VXI?W3HZ.d;QUEF"+uPcs.kK+L&I\X+kMqG"!gI$A5*WslFb>Xd.FcpQZ<dlMnD0m]KNIbju&,;P:d`E
%&Fg(XI0U<hlq.<Ek'<diKS:Jk\d<7)E4:E_(ZuYR=;OX_j8.r53J]A'@b`6f-kj0d[:N-W9$IW2[B.q2)<,uWB_Etd7g'6&gGQdV
%27murFUJpINEc.C**T7[U[rr*q%p.P2WOT$PIo#NNcj@gV7U]NDY,&%>?[tGErp%3D8-j'RaS"&!gVk0g`TD@*fZ#3)\ag/`It0s
%?L"0r^Che6N>C\'/FX^*UuXR[k2'_4E>@<"SgSDb7?fhj<L[bSnJJMZ_9i+LGq!#KPCP#cX4\moq^JUVoXd+n^R1+hR6AA#B9d<i
%$YagG=RmTEs1iIc+c%ZmV8Wm4o2h-s3Ri%,GR9J<\7-:$nPDJdU-1<ngjmjVV*VY4f!nBdc^H>kaLXTHb/1%i(/%PE@JuGd,SM)k
%+:#eqF'n.@"%s!;R3`&MBfV\3M/>3%=O=.l6H$.5Rshr(Qafs!Ej$&_=d3L+D@K9_8Z#OZG0B8Z9GGY>R^P\bl:2O;Pr;bXN!>C`
%L*lup&B"f?3rnNHOp(/ZlpS']C?Pume7nCR>L*A#3bl#a<"pa/B>TuP.0E*kKVun'ccAt*[a3Eb@-Vd3[Z+Z<HW]c17HM-SlT[tS
%m\-&rm7%K?]L3%F48jFXZFf$`3Q9P:ZEo]^P(Z6E2TfJd>Ti5dEGt)1<,HAIIF[1XKFj<.M2Tn('>$'?Q4X;dQkL'"Qn$RSFu_NT
%bd5T6YL8Wo'f&rp)eKs`IbpD&>gGiq3hT%?ZVlWJMJ,e`572!8EGmrV:fjXPkA"Y*[(lp;>nS&`0sqGn4m:3a:(g>Q6sA#2IGu>@
%AsX30?UssKBo4@Yk3k'")RFp=3XbSNZ^)CB5Q+@?b"dkY.Uh`tl")9op=A7[2f59$U$1BJr%ECcZ`[s`oNnMr0rtUt'5<n23didJ
%46p+Z]-T'($((p6b?J-mMW\k"86LQ?f\BeA?=HMFQ]&f_%$7KT)1Ft"Gne&Sn<R].`r@N2'hHP;QDgB$+(:SLe'pE.:od'GKR!i^
%A4iF`JA'I_n'^\0=HPBC0ADUbE.P?-$hbu[+jA??rZs[_Ti@g5q$`1?(RV1gYV44Ye>K'_U4bqDKtAo+dBEUV[&[;UDk-ul72f,,
%MDs+t,hVS4.."0lCs!mDJo]ilB5]LPSHJ'_UbmYnZObGaTrF2+?&"-%=>7:KieG<,Pq^bVEN%2Tl>H94,bCpK]K]Gtf'e)99)bFY
%f(]2R&H;S\o'cS.pV24XiGUsZprtaMn>lTai=DR[o#D9uIfB!"TDas<r:.])qt0$gpYS?OI/:V<:N-7%j/5-@oYZ`^hYcoIJ+ssZ
%n>#f3?iB7srJ,n$BE.&m"%nkuIK~>
%AI9_PrivateDataEnd
